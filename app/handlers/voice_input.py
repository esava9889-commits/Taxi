"""–ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∞–¥—Ä–µ—Å–∏"""
from __future__ import annotations

import logging
import os
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from app.config.config import AppConfig

logger = logging.getLogger(__name__)


async def transcribe_voice(file_path: str) -> Optional[str]:
    """
    –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    –ü–†–ò–ú–Ü–¢–ö–ê: –î–ª—è production —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î:
    - Google Speech-to-Text API (–ø–ª–∞—Ç–Ω–æ, –∞–ª–µ —è–∫—ñ—Å–Ω–æ)
    - –∞–±–æ OpenAI Whisper (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, self-hosted)
    - –∞–±–æ Azure Speech Services
    
    Args:
        file_path: –®–ª—è—Ö –¥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    
    Returns:
        –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ None
    """
    # –ó–∞–≥–ª—É—à–∫–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î None –ø–æ–∫–∏ –Ω–µ–º–∞—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
    # –ü—Ä–∏–∫–ª–∞–¥ –∑ Google Speech-to-Text:
    """
    from google.cloud import speech
    
    client = speech.SpeechClient()
    
    with open(file_path, 'rb') as audio_file:
        content = audio_file.read()
    
    audio = speech.RecognitionAudio(content=content)
    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.OGG_OPUS,
        sample_rate_hertz=48000,
        language_code='uk-UA',
    )
    
    response = client.recognize(config=config, audio=audio)
    
    for result in response.results:
        return result.alternatives[0].transcript
    """
    
    # –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None (–ø–æ—Ç—Ä—ñ–±–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ API)
    logger.warning("Voice transcription not configured. Need Google Speech-to-Text or OpenAI Whisper API")
    return None


def create_router(config: AppConfig) -> Router:
    router = Router(name="voice_input")

    @router.message(F.voice)
    async def handle_voice_address(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∞–¥—Ä–µ—Å–∏"""
        if not message.from_user or not message.voice:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞—Ä–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        current_state = await state.get_state()
        
        # –Ø–∫—â–æ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - —ñ–≥–Ω–æ—Ä—É—î–º–æ
        if not current_state or "order" not in current_state.lower():
            return
        
        await message.answer(
            "üé§ <b>–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É...</b>\n\n"
            "‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
        )
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π —Ñ–∞–π–ª
            file = await message.bot.get_file(message.voice.file_id)
            file_path = f"/tmp/voice_{message.from_user.id}_{message.voice.file_id}.ogg"
            
            await message.bot.download_file(file.file_path, file_path)
            
            # –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç
            text = await transcribe_voice(file_path)
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
            
            if text:
                logger.info(f"Voice transcribed: {text}")
                
                # –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤—ñ—Ä–Ω–æ", callback_data=f"voice:confirm:{text}"),
                            InlineKeyboardButton(text="‚ùå –ù—ñ, –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", callback_data="voice:cancel")
                        ]
                    ]
                )
                
                await message.answer(
                    f"üé§ <b>–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∞–¥—Ä–µ—Å—É:</b>\n\n"
                    f"üìç {text}\n\n"
                    "–¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                    reply_markup=kb
                )
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏
                await message.answer(
                    "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n\n"
                    "üí° –°–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫—ñ—à–µ\n"
                    "‚Ä¢ –ë–µ–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º—É\n"
                    "‚Ä¢ –ê–±–æ –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º\n\n"
                    "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n"
                    "–ù–∞—Ä–∞–∑—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–≤—ñ–¥ –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.</i>"
                )
        
        except Exception as e:
            logger.error(f"Voice processing error: {e}")
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é."
            )

    @router.callback_query(F.data.startswith("voice:confirm:"))
    async def confirm_voice_address(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—É –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        address = call.data.split(":", 2)[2]
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ —Å—Ç–µ–π—Ç (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É)
        current_state = await state.get_state()
        
        await call.answer("‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–π–Ω—è—Ç–æ!")
        
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        if config.google_maps_api_key:
            from app.utils.maps import geocode_address
            coords = await geocode_address(config.google_maps_api_key, address)
            
            if coords:
                lat, lon = coords
                
                # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∏ —Ü–µ pickup —á–∏ destination
                if "pickup" in current_state:
                    await state.update_data(pickup=address, pickup_lat=lat, pickup_lon=lon)
                    await call.message.edit_text(f"‚úÖ –ê–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\nüìç {address}")
                else:
                    await state.update_data(destination=address, dest_lat=lat, dest_lon=lon)
                    await call.message.edit_text(f"‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\nüìç {address}")
            else:
                await call.message.edit_text(
                    f"‚ö†Ô∏è –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\nüìç {address}"
                )
        else:
            await call.message.edit_text(f"‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\nüìç {address}")

    @router.callback_query(F.data == "voice:cancel")
    async def cancel_voice(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥"""
        await call.answer()
        await call.message.edit_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é")

    return router
