from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig
from app.storage.db import (
    Order,
    insert_order,
    get_user_by_id,
    get_user_order_history,
    get_latest_tariff,
)
from app.utils.maps import get_distance_and_duration, geocode_address

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="order")

    CANCEL_TEXT = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
    SKIP_TEXT = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    CONFIRM_TEXT = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"

    class OrderStates(StatesGroup):
        pickup = State()
        destination = State()
        comment = State()
        confirm = State()

    def cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def skip_or_cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=SKIP_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def confirm_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=CONFIRM_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def location_keyboard(text: str) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
                [KeyboardButton(text=CANCEL_TEXT)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=text,
        )

    @router.message(F.text == "üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ")
    async def start_order(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user or not user.phone or not user.city:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")]
                ]
            )
            await message.answer(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n\n"
                "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.",
                reply_markup=kb
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await state.update_data(
            user_id=message.from_user.id,
            name=user.full_name,
            phone=user.phone,
            city=user.city,
        )
        
        await state.set_state(OrderStates.pickup)
        await message.answer(
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –ø–æ–¥–∞—Ç–∏ —Ç–∞–∫—Å—ñ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ")
        )

    @router.message(OrderStates.pickup, F.location)
    async def pickup_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        pickup = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        await state.update_data(pickup=pickup, pickup_lat=loc.latitude, pickup_lon=loc.longitude)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.pickup)
    async def pickup_text(message: Message, state: FSMContext) -> None:
        pickup = message.text.strip() if message.text else ""
        if len(pickup) < 3:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ.")
            return
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            coords = await geocode_address(config.google_maps_api_key, pickup)
            if coords:
                lat, lon = coords
                await state.update_data(pickup=pickup, pickup_lat=lat, pickup_lon=lon)
                logger.info(f"–ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {pickup} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {pickup}")
                await state.update_data(pickup=pickup)
        else:
            await state.update_data(pickup=pickup)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.destination, F.location)
    async def destination_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        destination = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        await state.update_data(
            destination=destination,
            dest_lat=loc.latitude,
            dest_lon=loc.longitude
        )
        
        await state.set_state(OrderStates.comment)
        await message.answer(
            "‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø—ñ–¥'—ó–∑–¥ 3, –ø–æ–≤–µ—Ä—Ö 5, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
            reply_markup=skip_or_cancel_keyboard()
        )

    @router.message(OrderStates.destination)
    async def destination_text(message: Message, state: FSMContext) -> None:
        destination = message.text.strip() if message.text else ""
        if len(destination) < 3:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ.")
            return
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            coords = await geocode_address(config.google_maps_api_key, destination)
            if coords:
                lat, lon = coords
                await state.update_data(destination=destination, dest_lat=lat, dest_lon=lon)
                logger.info(f"–ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {destination} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {destination}")
                await state.update_data(destination=destination)
        else:
            await state.update_data(destination=destination)
        
        await state.set_state(OrderStates.comment)
        await message.answer(
            "‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø—ñ–¥'—ó–∑–¥ 3, –ø–æ–≤–µ—Ä—Ö 5, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
            reply_markup=skip_or_cancel_keyboard()
        )

    @router.message(OrderStates.comment, F.text == SKIP_TEXT)
    async def skip_comment(message: Message, state: FSMContext) -> None:
        await state.update_data(comment=None)
        await show_confirmation(message, state, config)

    @router.message(OrderStates.comment)
    async def save_comment(message: Message, state: FSMContext) -> None:
        comment = message.text.strip() if message.text else None
        await state.update_data(comment=comment)
        await show_confirmation(message, state, config)

    async def show_confirmation(message: Message, state: FSMContext, config: AppConfig) -> None:
        data = await state.get_data()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —ñ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        pickup_lat = data.get('pickup_lat')
        pickup_lon = data.get('pickup_lon')
        dest_lat = data.get('dest_lat')
        dest_lon = data.get('dest_lon')
        
        distance_text = ""
        fare_estimate = ""
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–ª–µ —î —Ç–µ–∫—Å—Ç–æ–≤—ñ –∞–¥—Ä–µ—Å–∏ - –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        if (not pickup_lat or not dest_lat) and config.google_maps_api_key:
            pickup_addr = data.get('pickup')
            dest_addr = data.get('destination')
            
            if pickup_addr and dest_addr and 'üìç' not in str(pickup_addr):
                # –ì–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏
                pickup_coords = await geocode_address(config.google_maps_api_key, str(pickup_addr))
                dest_coords = await geocode_address(config.google_maps_api_key, str(dest_addr))
                
                if pickup_coords and dest_coords:
                    pickup_lat, pickup_lon = pickup_coords
                    dest_lat, dest_lon = dest_coords
                    await state.update_data(
                        pickup_lat=pickup_lat, pickup_lon=pickup_lon,
                        dest_lat=dest_lat, dest_lon=dest_lon
                    )
        
        # –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
        if pickup_lat and pickup_lon and dest_lat and dest_lon:
            if config.google_maps_api_key:
                result = await get_distance_and_duration(
                    config.google_maps_api_key,
                    pickup_lat, pickup_lon,
                    dest_lat, dest_lon
                )
                if result:
                    distance_m, duration_s = result
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                    await state.update_data(distance_m=distance_m, duration_s=duration_s)
                    
                    km = distance_m / 1000.0
                    minutes = duration_s / 60.0
                    distance_text = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n\n"
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
                    tariff = await get_latest_tariff(config.database_path)
                    if tariff:
                        estimated_fare = max(
                            tariff.minimum,
                            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
                        )
                        fare_estimate = f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {estimated_fare:.0f} –≥—Ä–Ω\n\n"
        
        text = (
            "üìã <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {data.get('pickup')}\n"
            f"üìç –ö—É–¥–∏: {data.get('destination')}\n"
            f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment') or '‚Äî'}\n\n"
            f"{distance_text}"
            f"{fare_estimate}"
            "–í—Å–µ –≤—ñ—Ä–Ω–æ?"
        )
        
        await state.set_state(OrderStates.confirm)
        await message.answer(text, reply_markup=confirm_keyboard())

    @router.message(OrderStates.confirm, F.text == CONFIRM_TEXT)
    async def confirm_order(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        data = await state.get_data()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —ñ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
        order = Order(
            id=None,
            user_id=message.from_user.id,
            name=str(data.get("name")),
            phone=str(data.get("phone")),
            pickup_address=str(data.get("pickup")),
            destination_address=str(data.get("destination")),
            comment=data.get("comment"),
            created_at=datetime.now(timezone.utc),
            pickup_lat=data.get("pickup_lat"),
            pickup_lon=data.get("pickup_lon"),
            dest_lat=data.get("dest_lat"),
            dest_lon=data.get("dest_lon"),
            distance_m=data.get("distance_m"),
            duration_s=data.get("duration_s"),
        )
        
        order_id = await insert_order(config.database_path, order)
        await state.clear()
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤
        if config.driver_group_chat_id:
            try:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                            callback_data=f"accept_order:{order_id}"
                        )]
                    ]
                )
                
                # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—â–æ —î
                distance_info = ""
                if data.get('distance_m'):
                    km = data.get('distance_m') / 1000.0
                    minutes = (data.get('duration_s') or 0) / 60.0
                    distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n"
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
                    tariff = await get_latest_tariff(config.database_path)
                    if tariff:
                        estimated_fare = max(
                            tariff.minimum,
                            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
                        )
                        distance_info += f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ~{estimated_fare:.0f} –≥—Ä–Ω\n"
                
                group_message = (
                    f"üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
                    f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone')}</code>\n\n"
                    f"üìç –ó–≤—ñ–¥–∫–∏: {data.get('pickup')}\n"
                    f"üìç –ö—É–¥–∏: {data.get('destination')}\n"
                    f"{distance_info}\n"
                    f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment') or '‚Äî'}\n\n"
                    f"‚è∞ –ß–∞—Å: {datetime.now(timezone.utc).strftime('%H:%M')}"
                )
                
                await message.bot.send_message(
                    config.driver_group_chat_id,
                    group_message,
                    reply_markup=kb
                )
                
                logger.info(f"Order {order_id} sent to driver group {config.driver_group_chat_id}")
                
                # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
                from app.handlers.start import main_menu_keyboard
                await message.answer(
                    f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                    "üîç –®—É–∫–∞—î–º–æ –≤–æ–¥—ñ—è...\n\n"
                    "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–æ–¥—ñ—è–º.\n"
                    "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! ‚è±",
                    reply_markup=main_menu_keyboard(is_registered=True)
                )
                
            except Exception as e:
                logger.error(f"Failed to send order to group: {e}")
                from app.handlers.start import main_menu_keyboard
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–æ–¥—ñ—è–º.\n"
                    "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=main_menu_keyboard(is_registered=True)
                )
        else:
            # –Ø–∫—â–æ –≥—Ä—É–ø–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞
            from app.handlers.start import main_menu_keyboard
            await message.answer(
                f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                "‚ö†Ô∏è –ì—Ä—É–ø–∞ –≤–æ–¥—ñ—ó–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=main_menu_keyboard(is_registered=True)
            )

    @router.message(F.text == "üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    async def show_my_orders(message: Message) -> None:
        if not message.from_user:
            return
        
        orders = await get_user_order_history(config.database_path, message.from_user.id, limit=10)
        
        if not orders:
            await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        
        text = "üìú <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        
        for o in orders:
            status_emoji = {
                "pending": "‚è≥ –û—á—ñ–∫—É—î",
                "offered": "üì§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ",
                "accepted": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ",
                "in_progress": "üöó –í –¥–æ—Ä–æ–∑—ñ",
                "completed": "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "cancelled": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
            }.get(o.status, "‚ùì")
            
            text += (
                f"<b>#{o.id}</b> - {status_emoji}\n"
                f"üìç {o.pickup_address[:30]}...\n"
                f"   ‚Üí {o.destination_address[:30]}...\n"
            )
            if o.fare_amount:
                text += f"üí∞ {o.fare_amount:.0f} –≥—Ä–Ω\n"
            text += f"üìÖ {o.created_at.strftime('%d.%m %H:%M')}\n\n"
        
        await message.answer(text)

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        await state.clear()
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone and user.city
        
        from app.handlers.start import main_menu_keyboard
        await message.answer(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=is_registered)
        )

    return router
