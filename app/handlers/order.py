from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig
from app.storage.db import (
    Order,
    insert_order,
    get_user_by_id,
    get_user_order_history,
    get_latest_tariff,
    update_order_group_message,
    cancel_order_by_client,
    get_order_by_id,
)
from app.utils.maps import get_distance_and_duration, geocode_address
from app.utils.privacy import mask_phone_number
from app.utils.validation import validate_address, validate_comment
from app.utils.rate_limiter import check_rate_limit, get_time_until_reset, format_time_remaining
from app.utils.order_timeout import start_order_timeout

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="order")

    CANCEL_TEXT = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
    SKIP_TEXT = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    CONFIRM_TEXT = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"

    class OrderStates(StatesGroup):
        pickup = State()  # –°–ø–æ—á–∞—Ç–∫—É –∑–≤—ñ–¥–∫–∏
        destination = State()  # –ü–æ—Ç—ñ–º –∫—É–¥–∏
        car_class = State()  # –ü—ñ—Å–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤—ñ–¥—Å—Ç–∞–Ω—ñ - –≤–∏–±—ñ—Ä –∫–ª–∞—Å—É
        comment = State()
        payment_method = State()  # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
        confirm = State()

    def cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def skip_or_cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=SKIP_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def confirm_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=CONFIRM_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def location_keyboard(text: str) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
                [KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–º")],
                [KeyboardButton(text=CANCEL_TEXT)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=text,
        )

    @router.message(F.text == "üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ")
    async def start_order(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # RATE LIMITING: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –≥–æ–¥–∏–Ω—É)
        if not check_rate_limit(message.from_user.id, "create_order", max_requests=5, window_seconds=3600):
            time_until_reset = get_time_until_reset(message.from_user.id, "create_order", window_seconds=3600)
            await message.answer(
                "‚è≥ <b>–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
                f"–í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ –≥–æ–¥–∏–Ω—É).\n\n"
                f"‚è∞ –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑: {format_time_remaining(time_until_reset)}\n\n"
                "‚ÑπÔ∏è –¶–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ —Å–ø–∞–º—É."
            )
            logger.warning(f"User {message.from_user.id} exceeded order rate limit")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user or not user.phone or not user.city:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")]
                ]
            )
            await message.answer(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n\n"
                "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.",
                reply_markup=kb
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await state.update_data(
            user_id=message.from_user.id,
            name=user.full_name,
            phone=user.phone,
            city=user.city,
        )
        
        # –°–ü–û–ß–ê–¢–ö–£ –∞–¥—Ä–µ—Å–∞ –∑–≤—ñ–¥–∫–∏
        await state.set_state(OrderStates.pickup)
        await message.answer(
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –≤–∞—Å –∑–∞–±—Ä–∞—Ç–∏?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é üìç",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ")
        )

    @router.callback_query(F.data.startswith("order_car_class:"))
    async def save_order_car_class(call: CallbackQuery, state: FSMContext) -> None:
        car_class = call.data.split(":", 1)[1]
        await state.update_data(car_class=car_class)
        await state.set_state(OrderStates.pickup)

    @router.message(OrderStates.pickup, F.location)
    async def pickup_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        pickup = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        await state.update_data(pickup=pickup, pickup_lat=loc.latitude, pickup_lon=loc.longitude)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.pickup, F.text == "üé§ –ì–æ–ª–æ—Å–æ–º")
    async def pickup_voice_instruction(message: Message, state: FSMContext) -> None:
        """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥—É"""
        await message.answer(
            "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∞–¥—Ä–µ—Å–∏</b>\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üé§ –≤ Telegram —Ç–∞ —á—ñ—Ç–∫–æ —Å–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥:\n"
            "üó£Ô∏è \"–≤—É–ª–∏—Ü—è –•—Ä–µ—â–∞—Ç–∏–∫ –±—É–¥–∏–Ω–æ–∫ –ø'—è—Ç–Ω–∞–¥—Ü—è—Ç—å\"\n"
            "üó£Ô∏è \"–ø—Ä–æ—Å–ø–µ–∫—Ç –ü–µ—Ä–µ–º–æ–≥–∏ —Å—Ç–æ –¥–≤–∞–¥—Ü—è—Ç—å —Ç—Ä–∏\"\n\n"
            "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü—ñ—è –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ—ó. –Ø–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é—î - –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.</i>"
        )
    
    @router.message(OrderStates.pickup)
    async def pickup_text(message: Message, state: FSMContext) -> None:
        pickup = message.text.strip() if message.text else ""
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏
        is_valid, cleaned_address = validate_address(pickup, min_length=3, max_length=200)
        if not is_valid:
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–ê–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                "‚Ä¢ –í—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 15"
            )
            logger.warning(f"Invalid pickup address: {pickup}")
            return
        
        pickup = cleaned_address
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            logger.info(f"üîç –ì–µ–æ–∫–æ–¥—É—é –∞–¥—Ä–µ—Å—É: {pickup}")
            coords = await geocode_address(config.google_maps_api_key, pickup)
            if coords:
                lat, lon = coords
                await state.update_data(pickup=pickup, pickup_lat=lat, pickup_lon=lon)
                logger.info(f"‚úÖ –ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {pickup} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {pickup}")
                await state.update_data(pickup=pickup)
                await message.answer(
                    "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏.\n"
                    "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç"
                )
        else:
            logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –∞–¥—Ä–µ—Å–∞ –Ω–µ –≥–µ–æ–∫–æ–¥—É—î—Ç—å—Å—è: {pickup}")
            await state.update_data(pickup=pickup)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.destination, F.location)
    async def destination_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        destination = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        await state.update_data(
            destination=destination,
            dest_lat=loc.latitude,
            dest_lon=loc.longitude
        )
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –∞–≤—Ç–æ (–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º —Ü—ñ–Ω)
        await show_car_class_selection(message, state, config)

    @router.message(OrderStates.destination)
    async def destination_text(message: Message, state: FSMContext) -> None:
        destination = message.text.strip() if message.text else ""
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏
        is_valid, cleaned_address = validate_address(destination, min_length=3, max_length=200)
        if not is_valid:
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–ê–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                "‚Ä¢ –í—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: –ø—Ä. –ü–µ—Ä–µ–º–æ–≥–∏, 100"
            )
            logger.warning(f"Invalid destination address: {destination}")
            return
        
        destination = cleaned_address
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            logger.info(f"üîç –ì–µ–æ–∫–æ–¥—É—é –∞–¥—Ä–µ—Å—É: {destination}")
            coords = await geocode_address(config.google_maps_api_key, destination)
            if coords:
                lat, lon = coords
                await state.update_data(destination=destination, dest_lat=lat, dest_lon=lon)
                logger.info(f"‚úÖ –ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {destination} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {destination}")
                await state.update_data(destination=destination)
                # –ü–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await message.answer(
                    "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏.\n"
                    "–í—ñ–¥—Å—Ç–∞–Ω—å –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –ø—Ä–∏–±–ª–∏–∑–Ω–æ.\n\n"
                    "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç"
                )
        else:
            logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –∞–¥—Ä–µ—Å–∞ –Ω–µ –≥–µ–æ–∫–æ–¥—É—î—Ç—å—Å—è: {destination}")
            await state.update_data(destination=destination)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –∞–≤—Ç–æ (–∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º —Ü—ñ–Ω)
        await show_car_class_selection(message, state, config)
        await message.answer(
            "‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø—ñ–¥'—ó–∑–¥ 3, –ø–æ–≤–µ—Ä—Ö 5, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n\n"
            "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'",
            reply_markup=skip_or_cancel_keyboard()
        )

    @router.message(OrderStates.comment, F.text == SKIP_TEXT)
    async def skip_comment(message: Message, state: FSMContext) -> None:
        await state.update_data(comment=None)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")]
            ]
        )
        
        await message.answer(
            "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
            "üíµ –ì–æ—Ç—ñ–≤–∫–∞ - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º\n"
            "üí≥ –ö–∞—Ä—Ç–∫–∞ - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è",
            reply_markup=kb
        )

    @router.message(OrderStates.comment)
    async def save_comment(message: Message, state: FSMContext) -> None:
        comment = message.text.strip() if message.text else None
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        if comment:
            is_valid, cleaned_comment = validate_comment(comment, max_length=500)
            if not is_valid:
                await message.answer(
                    "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è</b>\n\n"
                    "–ö–æ–º–µ–Ω—Ç–∞—Ä –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                    "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                    "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'"
                )
                logger.warning(f"Invalid comment: {comment}")
                return
            comment = cleaned_comment
        
        await state.update_data(comment=comment)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")]
            ]
        )
        
        await message.answer(
            "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
            "üíµ –ì–æ—Ç—ñ–≤–∫–∞ - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º\n"
            "üí≥ –ö–∞—Ä—Ç–∫–∞ - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("payment:"))
    async def select_payment_method(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏"""
        payment_method = call.data.split(":")[1]  # cash –∞–±–æ card
        await state.update_data(payment_method=payment_method)
        
        if payment_method == "card":
            await call.answer()
            await call.message.edit_text(
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é</b>\n\n"
                "‚úÖ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ –æ–±—Ä–∞–Ω–æ!\n\n"
                "üìå –ö–∞—Ä—Ç–∫–∞ –≤–æ–¥—ñ—è –∑'—è–≤–∏—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Ç–æ–≥–æ,\n"
                "—è–∫ –≤—ñ–Ω –ø—Ä–∏–π–º–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            )
        else:
            await call.answer()
            await call.message.edit_text(
                "üíµ <b>–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é</b>\n\n"
                "‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏."
            )
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await show_confirmation(call.message, state, config)
    
    async def show_confirmation(message: Message, state: FSMContext, config: AppConfig) -> None:
        data = await state.get_data()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —ñ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        pickup_lat = data.get('pickup_lat')
        pickup_lon = data.get('pickup_lon')
        dest_lat = data.get('dest_lat')
        dest_lon = data.get('dest_lon')
        
        distance_text = ""
        fare_estimate = ""
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–ª–µ —î —Ç–µ–∫—Å—Ç–æ–≤—ñ –∞–¥—Ä–µ—Å–∏ - –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        if (not pickup_lat or not dest_lat) and config.google_maps_api_key:
            pickup_addr = data.get('pickup')
            dest_addr = data.get('destination')
            
            if pickup_addr and dest_addr and 'üìç' not in str(pickup_addr):
                # –ì–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏
                pickup_coords = await geocode_address(config.google_maps_api_key, str(pickup_addr))
                dest_coords = await geocode_address(config.google_maps_api_key, str(dest_addr))
                
                if pickup_coords and dest_coords:
                    pickup_lat, pickup_lon = pickup_coords
                    dest_lat, dest_lon = dest_coords
                    await state.update_data(
                        pickup_lat=pickup_lat, pickup_lon=pickup_lon,
                        dest_lat=dest_lat, dest_lon=dest_lon
                    )
        
        # –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
        if pickup_lat and pickup_lon and dest_lat and dest_lon:
            if config.google_maps_api_key:
                logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({dest_lat},{dest_lon})")
                result = await get_distance_and_duration(
                    config.google_maps_api_key,
                    pickup_lat, pickup_lon,
                    dest_lat, dest_lon
                )
                if result:
                    distance_m, duration_s = result
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                    await state.update_data(distance_m=distance_m, duration_s=duration_s)
                    
                    km = distance_m / 1000.0
                    minutes = duration_s / 60.0
                    distance_text = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n\n"
                    logger.info(f"‚úÖ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º, {int(minutes)} —Ö–≤")
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–ª–∞—Å—É
                    tariff = await get_latest_tariff(config.database_path)
                    if tariff:
                        base_fare = max(
                            tariff.minimum,
                            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
                        )
                        
                        # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –º–Ω–æ–∂–Ω–∏–∫ –∫–ª–∞—Å—É –∞–≤—Ç–æ
                        from app.handlers.car_classes import calculate_fare_with_class, get_car_class_name
                        car_class = data.get('car_class', 'economy')
                        class_fare = calculate_fare_with_class(base_fare, car_class)
                        
                        # –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
                        from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
                        from app.storage.db import get_online_drivers_count
                        
                        city = data.get('city', '–ö–∏—ó–≤')
                        online_count = await get_online_drivers_count(config.database_path, city)
                        
                        estimated_fare, surge_reason, surge_mult = await calculate_dynamic_price(
                            class_fare, city, online_count, 5  # 5 pending orders (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
                        )
                        
                        class_name = get_car_class_name(car_class)
                        surge_emoji = get_surge_emoji(surge_mult)
                        
                        if surge_mult != 1.0:
                            surge_percent = int((surge_mult - 1) * 100)
                            surge_text = f" {surge_emoji} +{surge_percent}%" if surge_percent > 0 else f" {surge_emoji} {surge_percent}%"
                            fare_estimate = f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}{surge_text}): {estimated_fare:.0f} –≥—Ä–Ω\n"
                            if surge_reason:
                                fare_estimate += f"<i>{surge_reason}</i>\n\n"
                        else:
                            fare_estimate = f"üí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}): {estimated_fare:.0f} –≥—Ä–Ω\n\n"
                        
                        logger.info(f"üí∞ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {estimated_fare:.0f} –≥—Ä–Ω (–∫–ª–∞—Å: {car_class}, surge: {surge_mult})")
                        
                        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ FSM –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        await state.update_data(estimated_fare=estimated_fare)
                else:
                    logger.warning(f"‚ùå Google Maps Distance Matrix API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –≤—Å—ñ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: pickup({pickup_lat},{pickup_lon}), dest({dest_lat},{dest_lon})")
        
        from app.handlers.car_classes import get_car_class_name
        car_class_name = get_car_class_name(data.get('car_class', 'economy'))
        
        text = (
            "üìã <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
            f"üöó –ö–ª–∞—Å: {car_class_name}\n\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {data.get('pickup')}\n"
            f"üìç –ö—É–¥–∏: {data.get('destination')}\n"
            f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment') or '‚Äî'}\n\n"
            f"{distance_text}"
            f"{fare_estimate}"
            "–í—Å–µ –≤—ñ—Ä–Ω–æ?"
        )
        
        await state.set_state(OrderStates.confirm)
        await message.answer(text, reply_markup=confirm_keyboard())

    @router.message(OrderStates.confirm, F.text == CONFIRM_TEXT)
    async def confirm_order(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        data = await state.get_data()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é —Ç–∞ –∫–ª–∞—Å–æ–º –∞–≤—Ç–æ
        order = Order(
            id=None,
            user_id=message.from_user.id,
            name=str(data.get("name")),
            phone=str(data.get("phone")),
            pickup_address=str(data.get("pickup")),
            destination_address=str(data.get("destination")),
            comment=data.get("comment"),
            created_at=datetime.now(timezone.utc),
            pickup_lat=data.get("pickup_lat"),
            pickup_lon=data.get("pickup_lon"),
            dest_lat=data.get("dest_lat"),
            dest_lon=data.get("dest_lon"),
            distance_m=data.get("distance_m"),
            duration_s=data.get("duration_s"),
            car_class=data.get("car_class", "economy"),
        )
        
        order_id = await insert_order(config.database_path, order)
        await state.clear()
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤
        if config.driver_group_chat_id:
            try:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                            callback_data=f"accept_order:{order_id}"
                        )],
                        [InlineKeyboardButton(
                            text="‚ùå –ù–µ –º–æ–∂—É –≤–∑—è—Ç–∏",
                            callback_data=f"reject_order:{order_id}"
                        )]
                    ]
                )
                
                # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—â–æ —î
                distance_info = ""
                estimated_fare = None
                
                if data.get('distance_m'):
                    km = data.get('distance_m') / 1000.0
                    minutes = (data.get('duration_s') or 0) / 60.0
                    distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n"
                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É: –≤—ñ–¥—Å—Ç–∞–Ω—å {km:.1f} –∫–º")
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –¢–Ü–Ñ–Æ –ñ –õ–û–ì–Ü–ö–û–Æ —â–æ —ñ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
                    tariff = await get_latest_tariff(config.database_path)
                    if tariff:
                        # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
                        base_fare = max(
                            tariff.minimum,
                            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
                        )
                        
                        # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ (–¢–ê–ö –Ø–ö –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê!)
                        from app.handlers.car_classes import calculate_fare_with_class, get_car_class_name
                        car_class = data.get('car_class', 'economy')
                        class_fare = calculate_fare_with_class(base_fare, car_class)
                        
                        # –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¢–ê–ö –Ø–ö –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê!)
                        from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
                        from app.storage.db import get_online_drivers_count
                        
                        city = data.get('city', '–ö–∏—ó–≤')
                        online_count = await get_online_drivers_count(config.database_path, city)
                        
                        estimated_fare, surge_reason, surge_mult = await calculate_dynamic_price(
                            class_fare, city, online_count, 5
                        )
                        
                        class_name = get_car_class_name(car_class)
                        surge_emoji = get_surge_emoji(surge_mult)
                        
                        if surge_mult != 1.0:
                            surge_percent = int((surge_mult - 1) * 100)
                            surge_text = f" {surge_emoji} +{surge_percent}%" if surge_percent > 0 else f" {surge_emoji} {surge_percent}%"
                            distance_info += f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}{surge_text}): {estimated_fare:.0f} –≥—Ä–Ω\n"
                            if surge_reason:
                                distance_info += f"<i>{surge_reason}</i>\n"
                        else:
                            distance_info += f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}): {estimated_fare:.0f} –≥—Ä–Ω\n"
                        
                        logger.info(f"üí∞ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É: –≤–∞—Ä—Ç—ñ—Å—Ç—å {estimated_fare:.0f} –≥—Ä–Ω (–∫–ª–∞—Å: {car_class}, surge: {surge_mult})")
                else:
                    logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É –±–µ–∑ distance_info")
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
                from app.storage.db import get_online_drivers
                from app.handlers.driver_priority import get_top_drivers
                
                online_drivers = await get_online_drivers(config.database_path, data.get('city'))
                top_drivers = await get_top_drivers(config.database_path, online_drivers, limit=5)
                
                # –Ø–∫—â–æ —î —Ç–æ–ø –≤–æ–¥—ñ—ó - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ó–º –æ—Å–æ–±–∏—Å—Ç–æ –ø–µ—Ä—à—ñ
                for driver in top_drivers[:3]:  # –¢–æ–ø 3 –æ—Ç—Ä–∏–º—É—é—Ç—å –æ—Å–æ–±–∏—Å—Ç–æ
                    from app.handlers.notifications import notify_driver_new_order
                    await notify_driver_new_order(
                        message.bot,
                        driver.tg_user_id,
                        order_id,
                        data.get('name'),
                        data.get('pickup'),
                        data.get('destination'),
                        (data.get('distance_m') / 1000.0) if data.get('distance_m') else None,
                        estimated_fare if 'estimated_fare' in locals() else None
                    )
                
                from app.handlers.car_classes import get_car_class_name
                car_class_name = get_car_class_name(data.get('car_class', 'economy'))
                
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps
                pickup_lat = data.get('pickup_lat')
                pickup_lon = data.get('pickup_lon')
                dest_lat = data.get('dest_lat')
                dest_lon = data.get('dest_lon')
                
                pickup_link = ""
                dest_link = ""
                
                if pickup_lat and pickup_lon:
                    pickup_link = f"\nüìç <a href='https://www.google.com/maps?q={pickup_lat},{pickup_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø–æ–¥–∞—á—ñ (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É)</a>"
                
                if dest_lat and dest_lon:
                    dest_link = f"\nüìç <a href='https://www.google.com/maps?q={dest_lat},{dest_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç—Ç—è (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É)</a>"
                
                # –ë–ï–ó–ü–ï–ö–ê: –ú–∞—Å–∫—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –≥—Ä—É–ø—ñ (–ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ü–∏—Ñ—Ä–∏)
                masked_phone = mask_phone_number(str(data.get('phone', '')), show_last_digits=2)
                
                group_message = (
                    f"üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
                    f"üöó –ö–ª–∞—Å: {car_class_name}\n"
                    f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{masked_phone}</code> üîí\n\n"
                    f"üìç –ó–≤—ñ–¥–∫–∏: {data.get('pickup')}{pickup_link}\n"
                    f"üìç –ö—É–¥–∏: {data.get('destination')}{dest_link}\n"
                    f"{distance_info}\n"
                    f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment') or '‚Äî'}\n\n"
                    f"‚è∞ –ß–∞—Å: {datetime.now(timezone.utc).strftime('%H:%M')}\n\n"
                    f"üèÜ <i>–¢–æ–ø-–≤–æ–¥—ñ—ó –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è</i>\n"
                    f"‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è</i>"
                )
                
                sent_message = await message.bot.send_message(
                    config.driver_group_chat_id,
                    group_message,
                    reply_markup=kb,
                    disable_web_page_preview=True
                )
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ë–î
                await update_order_group_message(config.database_path, order_id, sent_message.message_id)
                
                logger.info(f"Order {order_id} sent to driver group {config.driver_group_chat_id}")
                
                # –ó–ê–ü–£–°–¢–ò–¢–ò –¢–ê–ô–ú–ï–†: –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ –∑–∞ 3 —Ö–≤ - –ø–µ—Ä–µ–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏
                await start_order_timeout(
                    message.bot,
                    order_id,
                    config.database_path,
                    config.driver_group_chat_id,
                    sent_message.message_id
                )
                logger.info(f"‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
                
                # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É
                from app.handlers.start import main_menu_keyboard
                is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
                await message.answer(
                    f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                    "üîç –®—É–∫–∞—î–º–æ –≤–æ–¥—ñ—è...\n\n"
                    "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–æ–¥—ñ—è–º.\n"
                    "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! ‚è±",
                    reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
                )
                
            except Exception as e:
                logger.error(f"Failed to send order to group: {e}")
                from app.handlers.start import main_menu_keyboard
                is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–æ–¥—ñ—è–º.\n"
                    "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
                )
        else:
            # –Ø–∫—â–æ –≥—Ä—É–ø–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞
            from app.handlers.start import main_menu_keyboard
            is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
            await message.answer(
                f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                "‚ö†Ô∏è –ì—Ä—É–ø–∞ –≤–æ–¥—ñ—ó–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
            )

    @router.message(F.text == "üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    async def show_my_orders(message: Message) -> None:
        if not message.from_user:
            return
        
        orders = await get_user_order_history(config.database_path, message.from_user.id, limit=10)
        
        if not orders:
            await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        
        text = "üìú <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        
        for o in orders:
            status_emoji = {
                "pending": "‚è≥ –û—á—ñ–∫—É—î",
                "offered": "üì§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ",
                "accepted": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ",
                "in_progress": "üöó –í –¥–æ—Ä–æ–∑—ñ",
                "completed": "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "cancelled": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
            }.get(o.status, "‚ùì")
            
            text += (
                f"<b>#{o.id}</b> - {status_emoji}\n"
                f"üìç {o.pickup_address[:30]}...\n"
                f"   ‚Üí {o.destination_address[:30]}...\n"
            )
            if o.fare_amount:
                text += f"üí∞ {o.fare_amount:.0f} –≥—Ä–Ω\n"
            text += f"üìÖ {o.created_at.strftime('%d.%m %H:%M')}\n\n"
        
        await message.answer(text)

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        await state.clear()
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone and user.city
        is_admin = message.from_user.id in config.bot.admin_ids
        
        from app.handlers.start import main_menu_keyboard
        await message.answer(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=is_registered, is_admin=is_admin)
        )

    # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–æ–º
    @router.callback_query(F.data.startswith("cancel_order:"))
    async def cancel_order_handler(call: CallbackQuery) -> None:
        if not call.from_user or not call.message:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–ª—ñ—î–Ω—Ç—É
        order = await get_order_by_id(config.database_path, order_id)
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        if order.status != "pending":
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ", show_alert=True)
            return
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success = await cancel_order_by_client(config.database_path, order_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
            await call.message.edit_text(
                "‚ùå <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
                "–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤
            if config.driver_group_chat_id and order.group_message_id:
                try:
                    await call.bot.edit_message_text(
                        "‚ùå <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú</b>\n\n"
                        f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º.",
                        chat_id=config.driver_group_chat_id,
                        message_id=order.group_message_id
                    )
                    logger.info(f"Order #{order_id} cancellation sent to group")
                except Exception as e:
                    logger.error(f"Failed to update group message about cancellation: {e}")
            
            logger.info(f"Order #{order_id} cancelled by client {call.from_user.id}")
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
    
    return router
