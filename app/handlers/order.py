from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig
from app.storage.db import (
    Order,
    insert_order,
    get_user_by_id,
    get_user_order_history,
    get_latest_tariff,
    update_order_group_message,
    cancel_order_by_client,
    get_order_by_id,
    get_user_active_order,
    increase_order_fare,
)
from app.utils.maps import get_distance_and_duration, geocode_address, reverse_geocode_with_places
from app.utils.privacy import mask_phone_number
from app.utils.validation import validate_address, validate_comment
from app.utils.rate_limiter import check_rate_limit, get_time_until_reset, format_time_remaining
from app.utils.order_timeout import start_order_timeout
from app.handlers.car_classes import CAR_CLASSES, calculate_fare_with_class

logger = logging.getLogger(__name__)


# –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∫–ª–∞—Å–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
class OrderStates(StatesGroup):
    pickup = State()  # –°–ø–æ—á–∞—Ç–∫—É –∑–≤—ñ–¥–∫–∏
    destination = State()  # –ü–æ—Ç—ñ–º –∫—É–¥–∏
    car_class = State()  # –ü—ñ—Å–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É - –≤–∏–±—ñ—Ä –∫–ª–∞—Å—É (–∑ —Ü—ñ–Ω–∞–º–∏!)
    comment = State()  # –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É
    payment_method = State()  # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
    confirm = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="order")

    CANCEL_TEXT = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
    SKIP_TEXT = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
    CONFIRM_TEXT = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"

    def cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def skip_or_cancel_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=SKIP_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
    
    async def show_car_class_selection_with_prices(message: Message, state: FSMContext) -> None:
        """
        –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å, —á–∞—Å —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–ª–∞—Å–∏ –∞–≤—Ç–æ –∑ —Ü—ñ–Ω–∞–º–∏
        """
        data = await state.get_data()
        
        pickup_lat = data.get("pickup_lat")
        pickup_lon = data.get("pickup_lon")
        dest_lat = data.get("dest_lat")
        dest_lon = data.get("dest_lon")
        
        # –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö—É—î–º–æ —Ç–æ—á–Ω–æ
        distance_km = None
        duration_minutes = None
        
        if pickup_lat and pickup_lon and dest_lat and dest_lon and config.google_maps_api_key:
            logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({dest_lat},{dest_lon})")
            result = await get_distance_and_duration(
                config.google_maps_api_key,
                pickup_lat, pickup_lon,
                dest_lat, dest_lon
            )
            if result:
                distance_m, duration_s = result  # API –ø–æ–≤–µ—Ä—Ç–∞—î –ú–ï–¢–†–ò —ñ –°–ï–ö–£–ù–î–ò!
                distance_km = distance_m / 1000.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ –∫–º
                duration_minutes = duration_s / 60.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ —Ö–≤–∏–ª–∏–Ω–∏
                await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
                logger.info(f"‚úÖ –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º, —á–∞—Å: {duration_minutes:.0f} —Ö–≤ (API: {distance_m}m, {duration_s}s)")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —á–µ—Ä–µ–∑ Google Maps API")
        
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ - –±–µ—Ä–µ–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å
        if distance_km is None:
            distance_km = 5.0  # –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            duration_minutes = 15
            await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
            logger.warning(f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø—Ä–∏–±–ª–∏–∑–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å: {distance_km} –∫–º")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ
        tariff = await get_latest_tariff(config.database_path)
        if not tariff:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await state.clear()
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É (–¥–ª—è –µ–∫–æ–Ω–æ–º –∫–ª–∞—Å—É)
        base_fare = tariff.base_fare + (distance_km * tariff.per_km) + (duration_minutes * tariff.per_minute)
        if base_fare < tariff.minimum:
            base_fare = tariff.minimum
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¶–Ü–ù–£ –ó –£–†–ê–•–£–í–ê–ù–ù–Ø–ú –î–ò–ù–ê–ú–Ü–ö–ò –¥–ª—è –ö–û–ñ–ù–û–ì–û –∫–ª–∞—Å—É
        car_class_prices = {}
        car_class_explanations = {}
        from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
        from app.storage.db import get_online_drivers_count
        city = data.get('city', '–ö–∏—ó–≤') or '–ö–∏—ó–≤'
        online_count = await get_online_drivers_count(config.database_path, city)
        pending_orders_estimate = 5
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫—ñ–≤ –∑ –ë–î
        night_percent = tariff.night_tariff_percent if hasattr(tariff, 'night_tariff_percent') else 50.0
        weather_percent = tariff.weather_percent if hasattr(tariff, 'weather_percent') else 0.0
        
        for class_key in ["economy", "standard", "comfort", "business"]:
            class_fare = calculate_fare_with_class(base_fare, class_key)
            final_price, explanation, total_mult = await calculate_dynamic_price(
                class_fare, city, online_count, pending_orders_estimate, night_percent, weather_percent
            )
            car_class_prices[class_key] = round(final_price, 2)
            emoji = get_surge_emoji(total_mult)
            car_class_explanations[class_key] = (emoji, explanation)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ —Ü—ñ–Ω–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É
        buttons = []
        for class_key in ["economy", "standard", "comfort", "business"]:
            class_info = CAR_CLASSES[class_key]
            class_name = class_info["name_uk"]
            class_price = car_class_prices[class_key]
            class_desc = class_info["description_uk"]
            
            emoji, explanation = car_class_explanations[class_key]
            button_text = f"{class_name} - {class_price:.0f} –≥—Ä–Ω {emoji}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_car_class:{class_key}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥—Ä–µ—Å–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è", callback_data="order:back_to_destination")])
        buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ü—ñ–Ω–∞–º–∏
        info_text = (
            f"üìè <b>–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É:</b>\n\n"
            f"üìç –í—ñ–¥—Å—Ç–∞–Ω—å: <b>{distance_km:.1f} –∫–º</b>\n"
            f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: <b>~{duration_minutes:.0f} —Ö–≤</b>\n\n"
            f"üí∞ <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ:</b>\n\n"
            f"‚ÑπÔ∏è –¶—ñ–Ω–∏ –≤–∂–µ –≤–∫–ª—é—á–∞—é—Ç—å –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –Ω–∞—Ü—ñ–Ω–∫–∏/–∑–Ω–∏–∂–∫–∏ (–Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ, –ø–æ–ø–∏—Ç).\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–ª–∞—Å, —Ü—ñ–Ω–∞ –±—É–¥–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞."
        )
        
        await state.set_state(OrderStates.car_class)
        await message.answer(info_text, reply_markup=kb)

    def confirm_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=CONFIRM_TEXT)],
                [KeyboardButton(text=CANCEL_TEXT)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    def location_keyboard(text: str) -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
                [KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–º")],
                [KeyboardButton(text=CANCEL_TEXT)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
            input_field_placeholder=text,
        )

    @router.message(F.text == "üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ")
    async def start_order(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # –ó–ê–•–ò–°–¢: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        existing_order = await get_user_active_order(config.database_path, message.from_user.id)
        if existing_order:
            from app.handlers.keyboards import main_menu_keyboard
            is_admin = message.from_user.id in config.bot.admin_ids
            
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"cancel_order:{existing_order.id}")]
                ]
            )
            
            status_emoji = {
                "pending": "‚è≥",
                "accepted": "‚úÖ",
                "in_progress": "üöó"
            }.get(existing_order.status, "üìã")
            
            status_text = {
                "pending": "–æ—á—ñ–∫—É—î –Ω–∞ –≤–æ–¥—ñ—è",
                "accepted": "–ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º",
                "in_progress": "–≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è"
            }.get(existing_order.status, existing_order.status)
            
            await message.answer(
                f"{status_emoji} <b>–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
                f"üìç –ó–≤—ñ–¥–∫–∏: {existing_order.pickup_address}\n"
                f"üìç –ö—É–¥–∏: {existing_order.destination_address}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                f"‚ö†Ô∏è <b>–ù–µ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n"
                f"–ø–æ–∫–∏ —î –∞–∫—Ç–∏–≤–Ω–µ.\n\n"
                f"–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                f"1. –°–∫–∞—Å—É–π—Ç–µ –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Üì\n"
                f"2. –ê–±–æ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è",
                reply_markup=kb
            )
            logger.warning(f"User {message.from_user.id} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∞–ª–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–µ #{existing_order.id}")
            return
        
        # RATE LIMITING: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –≥–æ–¥–∏–Ω—É)
        if not check_rate_limit(message.from_user.id, "create_order", max_requests=5, window_seconds=3600):
            time_until_reset = get_time_until_reset(message.from_user.id, "create_order", window_seconds=3600)
            await message.answer(
                "‚è≥ <b>–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
                f"–í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞ –≥–æ–¥–∏–Ω—É).\n\n"
                f"‚è∞ –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑: {format_time_remaining(time_until_reset)}\n\n"
                "‚ÑπÔ∏è –¶–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞—Ö–∏—â–∞—î –≤—ñ–¥ —Å–ø–∞–º—É."
            )
            logger.warning(f"User {message.from_user.id} exceeded order rate limit")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user or not user.phone or not user.city:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")]
                ]
            )
            await message.answer(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!\n\n"
                "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.",
                reply_markup=kb
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await state.update_data(
            user_id=message.from_user.id,
            name=user.full_name,
            phone=user.phone,
            city=user.city,
        )
        
        # –°–ü–û–ß–ê–¢–ö–£ –∞–¥—Ä–µ—Å–∞ –∑–≤—ñ–¥–∫–∏ - –Ü–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ò –í–ò–ë–û–†–£
        await state.set_state(OrderStates.pickup)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, message.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:pickup:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:pickup:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:pickup:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        msg = await message.answer(
            "üöñ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ</b>\n\n"
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –≤–∞—Å –∑–∞–±—Ä–∞—Ç–∏?</b>\n\n"
            "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
            reply_markup=kb
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        await state.update_data(last_message_id=msg.message_id)

    @router.callback_query(F.data == "order:pickup:send_location")
    async def pickup_request_location(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è pickup"""
        await call.answer()
        
        # –¢—É—Ç –ü–û–¢–†–Ü–ë–ï–ù ReplyKeyboard –¥–ª—è request_location
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await call.message.delete()
        except:
            pass
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–µ –∑ ReplyKeyboard
        msg = await call.message.answer(
            "üìç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
            reply_markup=kb
        )
        await state.update_data(last_message_id=msg.message_id)
    
    @router.callback_query(F.data == "order:pickup:text")
    async def pickup_request_text(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è pickup"""
        await call.answer()
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")]
            ]
        )
        
        await call.message.edit_text(
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –≤–∞—Å –∑–∞–±—Ä–∞—Ç–∏?</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º:\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "order:pickup:saved")
    async def pickup_show_saved(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –≤–∏–±–æ—Ä—É pickup"""
        await call.answer()
        
        if not call.from_user:
            return
        
        from app.storage.db import get_user_saved_addresses
        addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        if not addresses:
            await call.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å", show_alert=True)
            return
        
        buttons = []
        for addr in addresses:
            buttons.append([
                InlineKeyboardButton(
                    text=f"{addr.emoji} {addr.name}",
                    callback_data=f"order:pickup:use_saved:{addr.id}"
                )
            ])
        
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:pickup:back")])
        buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üìç <b>–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ:</b>\n\n"
        for addr in addresses:
            text += f"{addr.emoji} <b>{addr.name}</b>\n"
            text += f"   {addr.address[:45]}{'...' if len(addr.address) > 45 else ''}\n\n"
        
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("order:pickup:use_saved:"))
    async def pickup_use_saved_address(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è pickup"""
        await call.answer()
        
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 3)[3])
        
        from app.storage.db import get_saved_address_by_id
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ pickup
        await state.update_data(
            pickup=address.address,
            pickup_lat=address.lat,
            pickup_lon=address.lon
        )
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ destination
        await state.set_state(OrderStates.destination)
        
        # –ó–Ω–æ–≤—É –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è destination
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:dest:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:dest:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        await call.message.edit_text(
            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b> {address.emoji} {address.name}\n"
            f"   {address.address}\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "order:pickup:back")
    async def pickup_back_to_menu(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–≤–µ–¥–µ–Ω–Ω—è pickup"""
        await call.answer()
        
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:pickup:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:pickup:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:pickup:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        await call.message.edit_text(
            "üöñ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ</b>\n\n"
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –≤–∞—Å –∑–∞–±—Ä–∞—Ç–∏?</b>\n\n"
            "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "show_car_classes")
    async def show_classes_callback(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å–∏ –∞–≤—Ç–æ –∑ —Ü—ñ–Ω–∞–º–∏ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ saved_addresses)"""
        await call.answer()
        await show_car_class_selection_with_prices(call.message, state)
    
    @router.callback_query(F.data == "order:back:pickup")
    async def back_to_pickup(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –ø–æ–¥–∞—á—ñ"""
        await call.answer()
        await state.set_state(OrderStates.pickup)
        
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:pickup:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:pickup:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:pickup:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        await call.message.edit_text(
            "üöñ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ</b>\n\n"
            "üìç <b>–ó–≤—ñ–¥–∫–∏ –≤–∞—Å –∑–∞–±—Ä–∞—Ç–∏?</b>\n\n"
            "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "order:dest:send_location")
    async def dest_request_location(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è destination"""
        await call.answer()
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        try:
            await call.message.delete()
        except:
            pass
        
        msg = await call.message.answer(
            "üìç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:",
            reply_markup=kb
        )
        await state.update_data(last_message_id=msg.message_id)
    
    @router.callback_query(F.data == "order:dest:text")
    async def dest_request_text(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è destination"""
        await call.answer()
        
        data = await state.get_data()
        pickup = data.get("pickup", "")
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        await call.message.edit_text(
            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n   {pickup}\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º:\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "order:dest:saved")
    async def dest_show_saved(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –≤–∏–±–æ—Ä—É destination"""
        await call.answer()
        
        if not call.from_user:
            return
        
        from app.storage.db import get_user_saved_addresses
        addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        if not addresses:
            await call.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å", show_alert=True)
            return
        
        buttons = []
        for addr in addresses:
            buttons.append([
                InlineKeyboardButton(
                    text=f"{addr.emoji} {addr.name}",
                    callback_data=f"order:dest:use_saved:{addr.id}"
                )
            ])
        
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:dest:back")])
        buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üìç <b>–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n\n"
        for addr in addresses:
            text += f"{addr.emoji} <b>{addr.name}</b>\n"
            text += f"   {addr.address[:45]}{'...' if len(addr.address) > 45 else ''}\n\n"
        
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("order:dest:use_saved:"))
    async def dest_use_saved_address(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è destination"""
        await call.answer()
        
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 3)[3])
        
        from app.storage.db import get_saved_address_by_id
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ destination
        await state.update_data(
            destination=address.address,
            dest_lat=address.lat,
            dest_lon=address.lon
        )
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –∞–≤—Ç–æ
        await state.set_state(OrderStates.car_class)
        await call.message.answer("‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å...")
        await show_car_class_selection_with_prices(call.message, state)
    
    @router.callback_query(F.data == "order:dest:back")
    async def dest_back_to_menu(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–≤–µ–¥–µ–Ω–Ω—è destination"""
        await call.answer()
        
        data = await state.get_data()
        pickup = data.get("pickup", "")
        
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:dest:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:dest:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        await call.message.edit_text(
            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n   {pickup}\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "order:back_to_destination")
    async def back_to_destination(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"""
        await call.answer()
        await state.set_state(OrderStates.destination)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
        data = await state.get_data()
        pickup = data.get("pickup", "")
        
        from app.storage.db import get_user_saved_addresses
        saved_addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        kb_buttons = [
            [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:dest:send_location")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:dest:text")],
        ]
        
        if saved_addresses:
            kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        try:
            await call.message.edit_text(
                f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n   {pickup}\n\n"
                "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º\n"
                "–∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é üìç"
            )
    
    @router.callback_query(F.data == "order:back_to_car_class")
    async def back_to_car_class(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
        await call.answer()
        await state.set_state(OrderStates.car_class)
        await show_car_class_selection_with_prices(call.message, state)
    
    @router.callback_query(F.data == "order:back_to_comment")
    async def back_to_comment(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
        await call.answer()
        await state.set_state(OrderStates.comment)
        
        data = await state.get_data()
        car_class = data.get("car_class", "economy")
        estimated_fare = data.get("estimated_fare", 0)
        
        from app.handlers.car_classes import get_car_class_name
        class_name = get_car_class_name(car_class)
        
        comment_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="comment:skip")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É", callback_data="order:back_to_car_class")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        try:
            await call.message.edit_text(
                f"‚úÖ <b>–û–±—Ä–∞–Ω–æ:</b> {class_name}\n"
                f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {estimated_fare:.0f} –≥—Ä–Ω\n\n"
                "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "‚Ä¢ –ü—ñ–¥'—ó–∑–¥ 3, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n"
                "‚Ä¢ –ü–æ–≤–µ—Ä—Ö 5, –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å–ø—Ä–∞–≤–∞\n"
                "‚Ä¢ –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–∏—ó–∑–¥—ñ\n\n"
                "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'",
                reply_markup=comment_kb
            )
        except:
            await call.message.answer(
                f"‚úÖ <b>–û–±—Ä–∞–Ω–æ:</b> {class_name}\n"
                f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {estimated_fare:.0f} –≥—Ä–Ω\n\n"
                "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "‚Ä¢ –ü—ñ–¥'—ó–∑–¥ 3, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n"
                "‚Ä¢ –ü–æ–≤–µ—Ä—Ö 5, –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å–ø—Ä–∞–≤–∞\n"
                "‚Ä¢ –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–∏—ó–∑–¥—ñ\n\n"
                "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'",
                reply_markup=comment_kb
            )
    
    @router.callback_query(F.data.startswith("select_car_class:"))
    async def select_car_class_handler(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–±—ñ—Ä –∫–ª–∞—Å—É –∞–≤—Ç–æ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—ñ–Ω"""
        car_class = call.data.split(":", 1)[1]
        await state.update_data(car_class=car_class)
        await call.answer()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª–∞—Å—É
        from app.handlers.car_classes import get_car_class_name
        class_name = get_car_class_name(car_class)
        # –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—É —Å—É–º—É (–ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —è–∫ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ)
        data = await state.get_data()
        tariff = await get_latest_tariff(config.database_path)
        distance_km = data.get("distance_km", 5.0)
        duration_minutes = data.get("duration_minutes", 15.0)
        base_fare = tariff.base_fare + (distance_km * tariff.per_km) + (duration_minutes * tariff.per_minute)
        if base_fare < tariff.minimum:
            base_fare = tariff.minimum
        from app.handlers.dynamic_pricing import calculate_dynamic_price
        from app.storage.db import get_online_drivers_count
        city = data.get('city', '–ö–∏—ó–≤') or '–ö–∏—ó–≤'
        online_count = await get_online_drivers_count(config.database_path, city)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫—ñ–≤ –∑ –ë–î
        night_percent = tariff.night_tariff_percent if hasattr(tariff, 'night_tariff_percent') else 50.0
        weather_percent = tariff.weather_percent if hasattr(tariff, 'weather_percent') else 0.0
        
        class_fare = calculate_fare_with_class(base_fare, car_class)
        final_price, explanation, total_mult = await calculate_dynamic_price(
            class_fare, city, online_count, 5, night_percent, weather_percent
        )
        await state.update_data(estimated_fare=final_price, fare_explanation=explanation)

        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        await state.set_state(OrderStates.comment)
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        comment_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="comment:skip")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É", callback_data="order:back_to_car_class")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        try:
            await call.message.edit_text(
                f"‚úÖ <b>–û–±—Ä–∞–Ω–æ:</b> {class_name}\n"
                f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {final_price:.0f} –≥—Ä–Ω\n\n"
                "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "‚Ä¢ –ü—ñ–¥'—ó–∑–¥ 3, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n"
                "‚Ä¢ –ü–æ–≤–µ—Ä—Ö 5, –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å–ø—Ä–∞–≤–∞\n"
                "‚Ä¢ –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–∏—ó–∑–¥—ñ\n\n"
                "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'",
                reply_markup=comment_kb
            )
        except:
            await call.message.answer(
                f"‚úÖ <b>–û–±—Ä–∞–Ω–æ:</b> {class_name}\n"
                f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {final_price:.0f} –≥—Ä–Ω\n\n"
                "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                "‚Ä¢ –ü—ñ–¥'—ó–∑–¥ 3, –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω—É 123\n"
                "‚Ä¢ –ü–æ–≤–µ—Ä—Ö 5, –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å–ø—Ä–∞–≤–∞\n"
                "‚Ä¢ –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –ø—Ä–∏ –ø—Ä–∏—ó–∑–¥—ñ\n\n"
                "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'",
                reply_markup=comment_kb
            )

    @router.message(OrderStates.pickup, F.location)
    async def pickup_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        
        # ‚≠ê REVERSE GEOCODING + PLACES: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ ‚Üí –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –∑ –æ–±'—î–∫—Ç–∞–º–∏ –ø–æ—Ä—É—á
        pickup = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"  # Fallback
        
        if config.google_maps_api_key:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ Places API
                readable_address = await reverse_geocode_with_places(
                    config.google_maps_api_key,
                    loc.latitude,
                    loc.longitude
                )
                if readable_address:
                    pickup = readable_address
                    logger.info(f"‚úÖ Reverse geocoded pickup –∑ –æ–±'—î–∫—Ç–∞–º–∏: {pickup}")
                else:
                    logger.warning(f"‚ö†Ô∏è Reverse geocoding –Ω–µ –≤–¥–∞–ª–æ—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ reverse geocoding: {e}")
        else:
            logger.warning("‚ö†Ô∏è Google Maps API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–±–µ—Ä—ñ–≥–∞—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
        
        await state.update_data(pickup=pickup, pickup_lat=loc.latitude, pickup_lon=loc.longitude)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.pickup, F.text == "üé§ –ì–æ–ª–æ—Å–æ–º")
    async def pickup_voice_instruction(message: Message, state: FSMContext) -> None:
        """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥—É"""
        await message.answer(
            "üé§ <b>–ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –∞–¥—Ä–µ—Å–∏</b>\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üé§ –≤ Telegram —Ç–∞ —á—ñ—Ç–∫–æ —Å–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥:\n"
            "üó£Ô∏è \"–≤—É–ª–∏—Ü—è –•—Ä–µ—â–∞—Ç–∏–∫ –±—É–¥–∏–Ω–æ–∫ –ø'—è—Ç–Ω–∞–¥—Ü—è—Ç—å\"\n"
            "üó£Ô∏è \"–ø—Ä–æ—Å–ø–µ–∫—Ç –ü–µ—Ä–µ–º–æ–≥–∏ —Å—Ç–æ –¥–≤–∞–¥—Ü—è—Ç—å —Ç—Ä–∏\"\n\n"
            "‚ö†Ô∏è <i>–§—É–Ω–∫—Ü—ñ—è –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å—ñ—ó. –Ø–∫—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é—î - –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.</i>"
        )
    
    @router.message(OrderStates.pickup)
    async def pickup_text(message: Message, state: FSMContext) -> None:
        pickup = message.text.strip() if message.text else ""
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏
        is_valid, cleaned_address = validate_address(pickup, min_length=3, max_length=200)
        if not is_valid:
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–ê–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                "‚Ä¢ –í—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 15"
            )
            logger.warning(f"Invalid pickup address: {pickup}")
            return
        
        pickup = cleaned_address
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            logger.info(f"üîç –ì–µ–æ–∫–æ–¥—É—é –∞–¥—Ä–µ—Å—É: {pickup}")
            coords = await geocode_address(config.google_maps_api_key, pickup)
            if coords:
                lat, lon = coords
                await state.update_data(pickup=pickup, pickup_lat=lat, pickup_lon=lon)
                logger.info(f"‚úÖ –ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {pickup} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {pickup}")
                await state.update_data(pickup=pickup)
                await message.answer(
                    "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏.\n"
                    "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç"
                )
        else:
            logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –∞–¥—Ä–µ—Å–∞ –Ω–µ –≥–µ–æ–∫–æ–¥—É—î—Ç—å—Å—è: {pickup}")
            await state.update_data(pickup=pickup)
        
        await state.set_state(OrderStates.destination)
        await message.answer(
            "‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n\n"
            "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
            reply_markup=location_keyboard("–í–∫–∞–∂—ñ—Ç—å –∫—É–¥–∏ —ó—Ö–∞—Ç–∏")
        )

    @router.message(OrderStates.destination, F.location)
    async def destination_location(message: Message, state: FSMContext) -> None:
        if not message.location:
            return
        
        loc = message.location
        
        # ‚≠ê REVERSE GEOCODING + PLACES: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ ‚Üí –¢–µ–∫—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –∑ –æ–±'—î–∫—Ç–∞–º–∏ –ø–æ—Ä—É—á
        destination = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"  # Fallback
        
        if config.google_maps_api_key:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ Places API
                readable_address = await reverse_geocode_with_places(
                    config.google_maps_api_key,
                    loc.latitude,
                    loc.longitude
                )
                if readable_address:
                    destination = readable_address
                    logger.info(f"‚úÖ Reverse geocoded destination –∑ –æ–±'—î–∫—Ç–∞–º–∏: {destination}")
                else:
                    logger.warning(f"‚ö†Ô∏è Reverse geocoding –Ω–µ –≤–¥–∞–ª–æ—Å—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ reverse geocoding: {e}")
        else:
            logger.warning("‚ö†Ô∏è Google Maps API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–±–µ—Ä—ñ–≥–∞—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
        
        await state.update_data(
            destination=destination,
            dest_lat=loc.latitude,
            dest_lon=loc.longitude
        )
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å–∏ –∞–≤—Ç–æ –∑ —Ü—ñ–Ω–∞–º–∏
        await show_car_class_selection_with_prices(message, state)

    @router.message(OrderStates.destination)
    async def destination_text(message: Message, state: FSMContext) -> None:
        destination = message.text.strip() if message.text else ""
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏
        is_valid, cleaned_address = validate_address(destination, min_length=3, max_length=200)
        if not is_valid:
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–ê–¥—Ä–µ—Å–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                "‚Ä¢ –í—ñ–¥ 3 –¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: –ø—Ä. –ü–µ—Ä–µ–º–æ–≥–∏, 100"
            )
            logger.warning(f"Invalid destination address: {destination}")
            return
        
        destination = cleaned_address
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        coords = None
        if config.google_maps_api_key:
            logger.info(f"üîç –ì–µ–æ–∫–æ–¥—É—é –∞–¥—Ä–µ—Å—É: {destination}")
            coords = await geocode_address(config.google_maps_api_key, destination)
            if coords:
                lat, lon = coords
                await state.update_data(destination=destination, dest_lat=lat, dest_lon=lon)
                logger.info(f"‚úÖ –ì–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ –∞–¥—Ä–µ—Å—É: {destination} ‚Üí {lat},{lon}")
            else:
                logger.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É: {destination}")
                await state.update_data(destination=destination)
                # –ü–æ–ø–µ—Ä–µ–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                await message.answer(
                    "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏.\n"
                    "–í—ñ–¥—Å—Ç–∞–Ω—å –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –ø—Ä–∏–±–ª–∏–∑–Ω–æ.\n\n"
                    "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç"
                )
        else:
            logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –∞–¥—Ä–µ—Å–∞ –Ω–µ –≥–µ–æ–∫–æ–¥—É—î—Ç—å—Å—è: {destination}")
            await state.update_data(destination=destination)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å–∏ –∞–≤—Ç–æ –∑ —Ü—ñ–Ω–∞–º–∏
        await show_car_class_selection_with_prices(message, state)

    @router.callback_query(F.data == "comment:skip", OrderStates.comment)
    async def skip_comment(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä (inline –∫–Ω–æ–ø–∫–∞)"""
        await call.answer("–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è")
        await state.update_data(comment=None)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="order:back_to_comment")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        try:
            await call.message.edit_text(
                "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
                "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
                "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è (—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è)",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
                "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
                "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è (—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è)",
                reply_markup=kb
            )
    
    @router.message(OrderStates.comment, F.text == SKIP_TEXT)
    async def skip_comment_text(message: Message, state: FSMContext) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä (—Å—Ç–∞—Ä–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        await state.update_data(comment=None)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="order:back_to_comment")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        await message.answer(
            "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
            "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
            "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è (—Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è)",
            reply_markup=kb
        )

    @router.message(OrderStates.comment)
    async def save_comment(message: Message, state: FSMContext) -> None:
        comment = message.text.strip() if message.text else None
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
        if comment:
            is_valid, cleaned_comment = validate_comment(comment, max_length=500)
            if not is_valid:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚è© –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="comment:skip")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back_to_car_class")]
                    ]
                )
                await message.answer(
                    "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è</b>\n\n"
                    "–ö–æ–º–µ–Ω—Ç–∞—Ä –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏:\n"
                    "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                    "‚Ä¢ –¢—ñ–ª—å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å",
                    reply_markup=kb
                )
                logger.warning(f"Invalid comment: {comment}")
                return
            comment = cleaned_comment
        
        await state.update_data(comment=comment)
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="order:back_to_comment")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        await message.answer(
            f"‚úÖ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ:</b>\n{comment}\n\n"
            "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
            "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
            "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("payment:"))
    async def select_payment_method(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏"""
        payment_method = call.data.split(":")[1]  # cash –∞–±–æ card
        await state.update_data(payment_method=payment_method)
        
        payment_text = ""
        if payment_method == "card":
            await call.answer("üí≥ –ö–∞—Ä—Ç–∫–∞")
            payment_text = "üí≥ <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é</b>\n\n‚úÖ –ö–∞—Ä—Ç–∫–∞ –≤–æ–¥—ñ—è –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        else:
            await call.answer("üíµ –ì–æ—Ç—ñ–≤–∫–∞")
            payment_text = "üíµ <b>–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é</b>\n\n‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏."
        
        try:
            await call.message.edit_text(payment_text)
        except:
            pass
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await show_confirmation(call.message, state, config)
    
    async def show_confirmation(message: Message, state: FSMContext, config: AppConfig) -> None:
        data = await state.get_data()
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —ñ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        pickup_lat = data.get('pickup_lat')
        pickup_lon = data.get('pickup_lon')
        dest_lat = data.get('dest_lat')
        dest_lon = data.get('dest_lon')
        
        distance_text = ""
        fare_estimate = ""
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–ª–µ —î —Ç–µ–∫—Å—Ç–æ–≤—ñ –∞–¥—Ä–µ—Å–∏ - –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        if (not pickup_lat or not dest_lat) and config.google_maps_api_key:
            pickup_addr = data.get('pickup')
            dest_addr = data.get('destination')
            
            if pickup_addr and dest_addr and 'üìç' not in str(pickup_addr):
                # –ì–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏
                pickup_coords = await geocode_address(config.google_maps_api_key, str(pickup_addr))
                dest_coords = await geocode_address(config.google_maps_api_key, str(dest_addr))
                
                if pickup_coords and dest_coords:
                    pickup_lat, pickup_lon = pickup_coords
                    dest_lat, dest_lon = dest_coords
                    await state.update_data(
                        pickup_lat=pickup_lat, pickup_lon=pickup_lon,
                        dest_lat=dest_lat, dest_lon=dest_lon
                    )
        
        # –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å (—Ü—ñ–Ω–∞ –≤–∂–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –≤ estimated_fare)
        if pickup_lat and pickup_lon and dest_lat and dest_lon:
            if config.google_maps_api_key:
                logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({dest_lat},{dest_lon})")
                result = await get_distance_and_duration(
                    config.google_maps_api_key,
                    pickup_lat, pickup_lon,
                    dest_lat, dest_lon
                )
                if result:
                    distance_m, duration_s = result
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                    await state.update_data(distance_m=distance_m, duration_s=duration_s)
                    
                    km = distance_m / 1000.0
                    minutes = duration_s / 60.0
                    distance_text = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n\n"
                    logger.info(f"‚úÖ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º, {int(minutes)} —Ö–≤")
                    # –¶—ñ–Ω—É –≤–∂–µ –±—É–ª–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–ª–∞—Å—É, –Ω–µ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ
                else:
                    logger.warning(f"‚ùå Google Maps Distance Matrix API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            else:
                logger.warning(f"‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, –≤—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –≤—Å—ñ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: pickup({pickup_lat},{pickup_lon}), dest({dest_lat},{dest_lon})")
        
        from app.handlers.car_classes import get_car_class_name
        car_class_name = get_car_class_name(data.get('car_class', 'economy'))
        
        # –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ
        payment_method = data.get('payment_method')
        payment_text = "üíµ –ì–æ—Ç—ñ–≤–∫–∞" if payment_method == "cash" else ("üí≥ –ö–∞—Ä—Ç–∫–∞" if payment_method == "card" else None)

        text = (
            "üìã <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {data.get('name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
            f"üöó –ö–ª–∞—Å: {car_class_name}\n\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {data.get('pickup')}\n"
            f"üìç –ö—É–¥–∏: {data.get('destination')}\n"
            f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.get('comment') or '‚Äî'}\n\n"
            f"{distance_text}"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {data.get('estimated_fare', 0):.0f} –≥—Ä–Ω\n"
            + (f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_text}\n\n" if payment_text else "\n")
            + "‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
        )
        
        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirm_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order:confirm")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏", callback_data="order:back_to_payment")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        await state.set_state(OrderStates.confirm)
        # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        confirmation_msg = await message.answer(text, reply_markup=confirm_kb)
        await state.update_data(confirmation_message_id=confirmation_msg.message_id)

    @router.callback_query(F.data == "order:back_to_payment")
    async def back_to_payment(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏"""
        await call.answer()
        await state.set_state(OrderStates.payment_method)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üíµ –ì–æ—Ç—ñ–≤–∫–∞", callback_data="payment:cash")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="payment:card")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è", callback_data="order:back_to_comment")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
            ]
        )
        
        try:
            await call.message.edit_text(
                "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
                "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
                "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                "üí∞ <b>–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:</b>\n\n"
                "üíµ <b>–ì–æ—Ç—ñ–≤–∫–∞</b> - —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –ø–æ—ó–∑–¥–∫–∏\n"
                "üí≥ <b>–ö–∞—Ä—Ç–∫–∞</b> - –ø–µ—Ä–µ–∫–∞–∑ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è",
                reply_markup=kb
            )
    
    @router.callback_query(F.data == "order:confirm", OrderStates.confirm)
    async def confirm_order_callback(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (inline –∫–Ω–æ–ø–∫–∞)"""
        await call.answer("‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...")
        
        # ‚≠ê –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–∞–Ω–∏—Ö
        try:
            await call.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {e}")
        
        # –í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É
        await process_order_confirmation(call.message, state, call.from_user.id, config)
    
    @router.message(OrderStates.confirm, F.text == CONFIRM_TEXT)
    async def confirm_order_text(message: Message, state: FSMContext) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        if not message.from_user:
            return
        await process_order_confirmation(message, state, message.from_user.id, config)
    
    async def process_order_confirmation(message: Message, state: FSMContext, user_id: int, config: AppConfig) -> None:
        """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        data = await state.get_data()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é, –∫–ª–∞—Å–æ–º –∞–≤—Ç–æ, —Ü—ñ–Ω–æ—é —Ç–∞ —Å–ø–æ—Å–æ–±–æ–º –æ–ø–ª–∞—Ç–∏
        order = Order(
            id=None,
            user_id=user_id,
            name=str(data.get("name")),
            phone=str(data.get("phone")),
            pickup_address=str(data.get("pickup")),
            destination_address=str(data.get("destination")),
            comment=data.get("comment"),
            created_at=datetime.now(timezone.utc),
            pickup_lat=data.get("pickup_lat"),
            pickup_lon=data.get("pickup_lon"),
            dest_lat=data.get("dest_lat"),
            dest_lon=data.get("dest_lon"),
            distance_m=data.get("distance_m"),
            duration_s=data.get("duration_s"),
            fare_amount=float(data.get("estimated_fare")) if data.get("estimated_fare") is not None else None,
            car_class=data.get("car_class", "economy"),
            payment_method=str(data.get("payment_method")) if data.get("payment_method") else "cash",
        )
        
        order_id = await insert_order(config.database_path, order)

        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞ –î–û –æ—á–∏—â–µ–Ω–Ω—è state (—â–æ–± –º–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–∏–π fallback)
        resolved_city = (data.get("city") or "").strip() or None

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ—Å—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø—Ä–æ—Ñ—ñ–ª—é —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–¥–∏
        from app.storage.db import get_user_by_id
        user = await get_user_by_id(config.database_path, message.from_user.id)
        client_city = (user.city.strip() if (user and user.city) else None) or resolved_city

        # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∑–Ω—è–ª–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        await state.clear()
        
        # ‚≠ê –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—É –ú–Ü–°–¢–ê –ö–õ–Ü–Ñ–ù–¢–ê
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä—É–ø—É –º—ñ—Å—Ç–∞ —á–µ—Ä–µ–∑ helper –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º fallback
        from app.config.config import get_city_group_id
        city_group_id = get_city_group_id(config, client_city)

        # DEBUG: –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(
            f"üîç DEBUG: order_confirm city resolution ‚Üí user_id={message.from_user.id}, "
            f"user_city={(user.city if user else None)}, state_city={resolved_city}, resolved_city={client_city}"
        )
        logger.info(f"üîç DEBUG: config.city_groups={config.city_groups}")
        if city_group_id:
            if client_city in config.city_groups and config.city_groups.get(client_city):
                logger.info(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≥—Ä—É–ø—É –º—ñ—Å—Ç–∞ '{client_city}': {city_group_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –î–ª—è –º—ñ—Å—Ç–∞ '{client_city}' –Ω–µ–º–∞—î –æ–∫—Ä–µ–º–æ—ó –≥—Ä—É–ø–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback: {city_group_id}")
        
        if city_group_id:
            try:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                            callback_data=f"accept_order:{order_id}"
                        )],
                        [InlineKeyboardButton(
                            text="‚ùå –ù–µ –º–æ–∂—É –≤–∑—è—Ç–∏",
                            callback_data=f"reject_order:{order_id}"
                        )]
                    ]
                )
                
                # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—â–æ —î
                distance_info = ""
                estimated_fare = None
                
                if data.get('distance_m'):
                    km = data.get('distance_m') / 1000.0
                    minutes = (data.get('duration_s') or 0) / 60.0
                    distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n"
                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É: –≤—ñ–¥—Å—Ç–∞–Ω—å {km:.1f} –∫–º")
                    
                    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ –¢–Ü–Ñ–Æ –ñ –õ–û–ì–Ü–ö–û–Æ —â–æ —ñ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
                    tariff = await get_latest_tariff(config.database_path)
                    if tariff:
                        # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
                        base_fare = max(
                            tariff.minimum,
                            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
                        )
                        
                        # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ (–¢–ê–ö –Ø–ö –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê!)
                        from app.handlers.car_classes import calculate_fare_with_class, get_car_class_name
                        car_class = data.get('car_class', 'economy')
                        class_fare = calculate_fare_with_class(base_fare, car_class)
                        
                        # –î–∏–Ω–∞–º—ñ—á–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è (–¢–ê–ö –Ø–ö –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–ê!)
                        from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
                        from app.storage.db import get_online_drivers_count
                        
                        city = client_city or data.get('city', '–ö–∏—ó–≤')
                        online_count = await get_online_drivers_count(config.database_path, city)
                        
                        # –ù–ï –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü—ñ–Ω—É ‚Äî –±–µ—Ä–µ–º–æ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—É
                        estimated_fare = data.get('estimated_fare') or class_fare
                        surge_mult = 1.0
                        
                        class_name = get_car_class_name(car_class)
                        surge_emoji = get_surge_emoji(surge_mult)
                        
                        if surge_mult != 1.0:
                            surge_percent = int((surge_mult - 1) * 100)
                            surge_text = f" {surge_emoji} +{surge_percent}%" if surge_percent > 0 else f" {surge_emoji} {surge_percent}%"
                            distance_info += f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}{surge_text}): {estimated_fare:.0f} –≥—Ä–Ω\n"
                        else:
                            distance_info += f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å ({class_name}): {estimated_fare:.0f} –≥—Ä–Ω\n"
                        
                        logger.info(f"üí∞ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É: –≤–∞—Ä—Ç—ñ—Å—Ç—å {estimated_fare:.0f} –≥—Ä–Ω (–∫–ª–∞—Å: {car_class}, surge: {surge_mult})")
                else:
                    logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É –±–µ–∑ distance_info")
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤ –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó (–ª–∏—à–µ —è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É)
                from app.storage.db import get_online_drivers
                from app.handlers.driver_priority import get_top_drivers
                from app.storage.db_connection import db_manager
                
                priority_enabled = False
                async with db_manager.connect(config.database_path) as db:
                    async with db.execute("SELECT value FROM app_settings WHERE key = 'priority_mode'") as cur:
                        row = await cur.fetchone()
                        priority_enabled = bool(row and str(row[0]).lower() in ("1","true","on","yes"))

                online_drivers = await get_online_drivers(config.database_path, client_city or data.get('city'))
                top_drivers = await get_top_drivers(config.database_path, online_drivers, limit=5) if priority_enabled else []
                
                # –Ø–∫—â–æ —î —Ç–æ–ø –≤–æ–¥—ñ—ó - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ó–º –æ—Å–æ–±–∏—Å—Ç–æ –ø–µ—Ä—à—ñ
                for driver in top_drivers[:3]:  # –¢–æ–ø 3 –æ—Ç—Ä–∏–º—É—é—Ç—å –æ—Å–æ–±–∏—Å—Ç–æ
                    from app.handlers.notifications import notify_driver_new_order
                    await notify_driver_new_order(
                        message.bot,
                        driver.tg_user_id,
                        order_id,
                        data.get('name'),
                        data.get('pickup'),
                        data.get('destination'),
                        (data.get('distance_m') / 1000.0) if data.get('distance_m') else None,
                        estimated_fare if 'estimated_fare' in locals() else None
                    )
                
                from app.handlers.car_classes import get_car_class_name
                car_class_name = get_car_class_name(data.get('car_class', 'economy'))
                
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps
                pickup_lat = data.get('pickup_lat')
                pickup_lon = data.get('pickup_lon')
                dest_lat = data.get('dest_lat')
                dest_lon = data.get('dest_lon')
                
                pickup_link = ""
                dest_link = ""
                
                if pickup_lat and pickup_lon:
                    pickup_link = f"\nüìç <a href='https://www.google.com/maps?q={pickup_lat},{pickup_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø–æ–¥–∞—á—ñ (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É)</a>"
                
                if dest_lat and dest_lon:
                    dest_link = f"\nüìç <a href='https://www.google.com/maps?q={dest_lat},{dest_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç—Ç—è (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É)</a>"
                
                # –ë–ï–ó–ü–ï–ö–ê: –ú–∞—Å–∫—É—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –≥—Ä—É–ø—ñ (–ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ü–∏—Ñ—Ä–∏)
                masked_phone = mask_phone_number(str(data.get('phone', '')), show_last_digits=2)
                
                # –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ Plus Codes
                from app.handlers.driver_panel import clean_address
                clean_pickup = clean_address(data.get('pickup', ''))
                clean_destination = clean_address(data.get('destination', ''))
                
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Google Maps
                route_link = ""
                if pickup_lat and pickup_lon and dest_lat and dest_lon:
                    route_link = (
                        f"\nüó∫Ô∏è <a href='https://www.google.com/maps/dir/?api=1"
                        f"&origin={pickup_lat},{pickup_lon}"
                        f"&destination={dest_lat},{dest_lon}"
                        f"&travelmode=driving'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ Google Maps</a>"
                    )
                
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
                fare_amount = data.get('fare_amount', 0)
                fare_text = f"üí∞ <b>–í–ê–†–¢–Ü–°–¢–¨: {int(fare_amount)} –≥—Ä–Ω</b> üí∞" if fare_amount else ""
                
                group_message = (
                    f"üöñ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                    f"{fare_text}\n"
                    f"{distance_info}"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                    f"üìç <b>–ú–ê–†–®–†–£–¢:</b>\n"
                    f"üîµ {clean_pickup}\n"
                    f"üî¥ {clean_destination}{route_link}\n\n"
                    f"üë§ {data.get('name')} ‚Ä¢ üì± <code>{masked_phone}</code> üîí\n"
                    f"üí¨ {data.get('comment') or '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'}\n\n"
                    f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M')} ‚Ä¢ üèô {client_city or data.get('city') or '‚Äî'}\n\n"
                    f"‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è</i>"
                )
                
                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω—É –º—ñ—Å—å–∫—É –≥—Ä—É–ø—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fallback –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É
                successfully_sent = False
                used_group_id = city_group_id
                try:
                    sent_message = await message.bot.send_message(
                        city_group_id,
                        group_message,
                        reply_markup=kb,
                        disable_web_page_preview=True
                    )
                    successfully_sent = True
                except Exception as e:
                    err_text = str(e).lower()
                    logger.error(f"Failed to send order to city group {city_group_id}: {e}")
                    # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ fallback —è–∫—â–æ —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ/–±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É
                    if ("chat not found" in err_text or "forbidden" in err_text) and config.driver_group_chat_id and config.driver_group_chat_id != city_group_id:
                        try:
                            logger.warning(f"‚ö†Ô∏è Fallback: –Ω–∞–¥—Å–∏–ª–∞—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É –∑–∞–≥–∞–ª—å–Ω—É –≥—Ä—É–ø—É {config.driver_group_chat_id}")
                            sent_message = await message.bot.send_message(
                                config.driver_group_chat_id,
                                group_message,
                                reply_markup=kb,
                                disable_web_page_preview=True
                            )
                            used_group_id = config.driver_group_chat_id
                            successfully_sent = True
                        except Exception as e2:
                            logger.error(f"‚ùå Fallback —Ç–∞–∫–æ–∂ –Ω–µ –≤–¥–∞–≤—Å—è: {e2}")
                
                if not successfully_sent:
                    raise RuntimeError("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∂–æ–¥–Ω—É –≥—Ä—É–ø—É")
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ë–î
                await update_order_group_message(config.database_path, order_id, sent_message.message_id)
                
                logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É (ID: {used_group_id})")
                
                # –ó–ê–ü–£–°–¢–ò–¢–ò –¢–ê–ô–ú–ï–†: –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ –∑–∞ 3 —Ö–≤ - –ø–µ—Ä–µ–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏
                await start_order_timeout(
                    message.bot,
                    order_id,
                    config.database_path,
                    used_group_id,
                    sent_message.message_id
                )
                logger.info(f"‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
                
                # ‚≠ê –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–ª—ñ—î–Ω—Ç—É (–∑–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏)
                from app.handlers.keyboards import main_menu_keyboard
                is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
                client_message = await message.answer(
                    f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
                    "üîç –®—É–∫–∞—î–º–æ –≤–æ–¥—ñ—è...\n\n"
                    "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–æ–¥—ñ—è–º.\n"
                    "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è! ‚è±",
                    reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
                )
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –ø—ñ–∑–Ω—ñ—à–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø—ñ–¥–Ω—è—Ç–∏ —Ü—ñ–Ω—É)
                await state.update_data(
                    client_waiting_message_id=client_message.message_id,
                    order_id=order_id,
                    fare_increase=0  # –°–∫—ñ–ª—å–∫–∏ –≥—Ä–Ω –¥–æ–¥–∞–Ω–æ –¥–æ —Ü—ñ–Ω–∏
                )
                
            except Exception as e:
                logger.error(f"Failed to send order to group: {e}")
                from app.handlers.keyboards import main_menu_keyboard
                is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
                await message.answer(
                    f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤–æ–¥—ñ—è–º.\n"
                    "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
                )
        else:
            # –Ø–∫—â–æ –≥—Ä—É–ø–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞
            from app.handlers.keyboards import main_menu_keyboard
            is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
            await message.answer(
                f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                "‚ö†Ô∏è –ì—Ä—É–ø–∞ –≤–æ–¥—ñ—ó–≤ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
            )

    # –û–±—Ä–æ–±–Ω–∏–∫ "üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" –ø—Ä–∏–±—Ä–∞–Ω–æ - —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ—ñ–ª—å

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        await state.clear()
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone and user.city
        is_admin = message.from_user.id in config.bot.admin_ids
        
        from app.handlers.keyboards import main_menu_keyboard
        await message.answer(
            "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=is_registered, is_admin=is_admin)
        )

    # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–æ–º
    @router.callback_query(F.data == "cancel_order")
    async def cancel_order_creation(call: CallbackQuery, state: FSMContext) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø—ñ–¥ —á–∞—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏)"""
        if not call.from_user:
            return
        
        await call.answer("‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ FSM state
        await state.clear()
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        from app.handlers.keyboards import main_menu_keyboard
        user = await get_user_by_id(config.database_path, call.from_user.id)
        is_registered = user is not None and user.phone and user.city
        is_admin = call.from_user.id in config.bot.admin_ids
        
        try:
            await call.message.edit_text(
                "‚ùå <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥—å-–∫–æ–ª–∏.",
                reply_markup=None
            )
        except:
            pass
        
        await call.message.answer(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard(is_registered=is_registered, is_admin=is_admin)
        )
        
        logger.info(f"‚ùå –ö–ª—ñ—î–Ω—Ç {call.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    
    @router.callback_query(F.data.startswith("cancel_order:"))
    async def cancel_order_handler(call: CallbackQuery, state: FSMContext) -> None:
        if not call.from_user or not call.message:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–ª—ñ—î–Ω—Ç—É
        order = await get_order_by_id(config.database_path, order_id)
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —è–∫—â–æ —Å—Ç–∞—Ç—É—Å pending –∞–±–æ accepted
        if order.status not in ["pending", "accepted"]:
            status_text = {
                "in_progress": "–≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
                "completed": "–≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–µ",
                "cancelled": "–≤–∂–µ —Å–∫–∞—Å–æ–≤–∞–Ω–µ"
            }.get(order.status, f"–º–∞—î —Å—Ç–∞—Ç—É—Å {order.status}")
            await call.answer(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {status_text}, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ", show_alert=True)
            return
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success = await cancel_order_by_client(config.database_path, order_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ FSM state —è–∫—â–æ –±—É–≤ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            await state.clear()
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            from app.handlers.keyboards import main_menu_keyboard
            user = await get_user_by_id(config.database_path, call.from_user.id)
            is_registered = user is not None and user.phone and user.city
            is_admin = call.from_user.id in config.bot.admin_ids
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
            await call.message.edit_text(
                "‚ùå <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
                f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
                f"üìç –ö—É–¥–∏: {order.destination_address}\n\n"
                "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            )
            
            # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            await call.message.answer(
                "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(is_registered=is_registered, is_admin=is_admin)
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤ (–≥—Ä—É–ø—É –º—ñ—Å—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞)
            if order.group_message_id:
                try:
                    from app.config.config import get_city_group_id
                    
                    user = await get_user_by_id(config.database_path, order.user_id)
                    client_city = user.city if user and user.city else None
                    group_id = get_city_group_id(config, client_city)

                    async def _try_edit(chat_id: int) -> bool:
                        try:
                            await call.bot.edit_message_text(
                                "‚ùå <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –°–ö–ê–°–û–í–ê–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú</b>\n\n"
                                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º.",
                                chat_id=chat_id,
                                message_id=order.group_message_id
                            )
                            return True
                        except Exception as ee:
                            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ {chat_id}: {ee}")
                            return False

                    updated = False
                    if group_id:
                        updated = await _try_edit(group_id)
                    # Fallback –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –≥—Ä—É–ø—É, —è–∫—â–æ –º—ñ—Å—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    if not updated and config.driver_group_chat_id and config.driver_group_chat_id != group_id:
                        if await _try_edit(config.driver_group_chat_id):
                            logger.info(f"‚úÖ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è #{order_id} –æ–Ω–æ–≤–ª–µ–Ω–æ —É fallback –≥—Ä—É–ø—ñ {config.driver_group_chat_id}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω—ñ –≤ –º—ñ—Å—å–∫—ñ–π, –Ω—ñ –≤ fallback –≥—Ä—É–ø—ñ")
                except Exception as e:
                    logger.error(f"Failed to update group message about cancellation: {e}")
            
            logger.info(f"Order #{order_id} cancelled by client {call.from_user.id}")
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
    
    @router.callback_query(F.data.startswith("increase_price:"))
    async def increase_price_handler(call: CallbackQuery) -> None:
        """–ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Ü—ñ–Ω—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö: increase_price:{order_id}:{amount}
        parts = call.data.split(":")
        order_id = int(parts[1])
        increase_amount = float(parts[2])
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –≤ —Å—Ç–∞—Ç—É—Å—ñ pending
        if order.status != "pending":
            await call.answer("‚úÖ –í–æ–¥—ñ–π –≤–∂–µ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!", show_alert=True)
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é
            try:
                await call.message.delete()
            except:
                pass
            return
        
        # –ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Ü—ñ–Ω—É –≤ –ë–î
        success = await increase_order_fare(config.database_path, order_id, increase_amount)
        
        if not success:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_order_by_id(config.database_path, order_id)
        new_fare = order.fare_amount if order else 0
        
        await call.answer(f"‚úÖ –¶—ñ–Ω–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–∞ –Ω–∞ +{increase_amount:.0f} –≥—Ä–Ω!", show_alert=True)
        
        # ‚≠ê –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –ø—ñ–¥–Ω—è—Ç–∏ —Ü—ñ–Ω—É
        try:
            await call.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        # ‚≠ê –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ –≤–æ–¥—ñ—ó–≤ –∑ –ù–û–í–û–Æ –¶–Ü–ù–û–Æ
        if order.group_message_id:
            try:
                from app.config.config import get_city_group_id
                user = await get_user_by_id(config.database_path, order.user_id)
                client_city = user.city if user and user.city else None
                group_id = get_city_group_id(config, client_city)
                
                logger.info(f"üîç –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏: order_id={order_id}, group_message_id={order.group_message_id}, group_id={group_id}, city={client_city}")
                
                if group_id:
                    from app.handlers.car_classes import get_car_class_name
                    car_class_name = get_car_class_name(order.car_class or 'economy')
                    
                    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps —è–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                    pickup_link = ""
                    dest_link = ""
                    
                    if order.pickup_lat and order.pickup_lon:
                        pickup_link = f"\nüìç <a href='https://www.google.com/maps?q={order.pickup_lat},{order.pickup_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø–æ–¥–∞—á—ñ</a>"
                    
                    if order.dest_lat and order.dest_lon:
                        dest_link = f"\nüìç <a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç—Ç—è</a>"
                    
                    distance_info = ""
                    if order.distance_m:
                        km = order.distance_m / 1000.0
                        distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º\n"
                    
                    masked_phone = mask_phone_number(order.phone, show_last_digits=2)
                    
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                                callback_data=f"accept_order:{order_id}"
                            )]
                        ]
                    )
                    
                    # –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ Plus Codes –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
                    from app.handlers.driver_panel import clean_address
                    clean_pickup = clean_address(order.pickup_address)
                    clean_destination = clean_address(order.destination_address)
                    
                    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Google Maps
                    route_link = ""
                    if order.pickup_lat and order.pickup_lon and order.dest_lat and order.dest_lon:
                        route_link = (
                            f"\nüó∫Ô∏è <a href='https://www.google.com/maps/dir/?api=1"
                            f"&origin={order.pickup_lat},{order.pickup_lon}"
                            f"&destination={order.dest_lat},{order.dest_lon}"
                            f"&travelmode=driving'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ Google Maps</a>"
                        )
                    
                    await call.bot.edit_message_text(
                        chat_id=group_id,
                        message_id=order.group_message_id,
                        text=(
                            f"üöñ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                            f"üí∞ <b>–í–ê–†–¢–Ü–°–¢–¨: {int(new_fare)} –≥—Ä–Ω</b> üí∞\n"
                            f"‚¨ÜÔ∏è <b>+{int(increase_amount)} –≥—Ä–Ω</b> (–∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–≤–∏—â–∏–≤!)\n"
                            f"{distance_info}"
                            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                            f"üìç <b>–ú–ê–†–®–†–£–¢:</b>\n"
                            f"üîµ {clean_pickup}\n"
                            f"üî¥ {clean_destination}{route_link}\n\n"
                            f"üë§ {order.name} ‚Ä¢ üì± <code>{masked_phone}</code> üîí\n"
                            f"üí¨ {order.comment or '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤'}\n\n"
                            f"‚è∞ {datetime.now(timezone.utc).strftime('%H:%M')} ‚Ä¢ üèô {client_city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                            f"‚ö†Ô∏è <b>–ö–ª—ñ—î–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –ø–ª–∞—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ!</b>\n"
                            f"‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä –ø—ñ—Å–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è</i>"
                        ),
                        reply_markup=kb,
                        disable_web_page_preview=True
                    )
                    logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ {group_id} –æ–Ω–æ–≤–ª–µ–Ω–æ: –Ω–æ–≤–∞ —Ü—ñ–Ω–∞ {new_fare:.0f} –≥—Ä–Ω –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ group_id –¥–ª—è –º—ñ—Å—Ç–∞ '{client_city}', –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ: {e}", exc_info=True)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        try:
            await call.bot.send_message(
                call.from_user.id,
                f"‚úÖ <b>–¶—ñ–Ω—É –ø—ñ–¥–≤–∏—â–µ–Ω–æ!</b>\n\n"
                f"üí∞ –ù–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: <b>{new_fare:.0f} –≥—Ä–Ω</b>\n\n"
                f"üîç –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫ –≤–æ–¥—ñ—è –∑ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é..."
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É: {e}")
    
    @router.callback_query(F.data.startswith("cancel_waiting_order:"))
    async def cancel_waiting_order_handler(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑ user_id –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
        success = await cancel_order_by_client(config.database_path, order_id, call.from_user.id)
        
        if success:
            # –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞–π–º–µ—Ä
            from app.utils.order_timeout import cancel_order_timeout
            cancel_order_timeout(order_id)
            
            await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é
            try:
                await call.message.delete()
            except:
                pass
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
            if order.group_message_id:
                try:
                    from app.config.config import get_city_group_id
                    user = await get_user_by_id(config.database_path, order.user_id)
                    client_city = user.city if user and user.city else None
                    group_id = get_city_group_id(config, client_city)

                    async def _try_edit(chat_id: int) -> bool:
                        try:
                            await call.bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=order.group_message_id,
                                text=f"‚ùå <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id} –°–ö–ê–°–û–í–ê–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú</b>\n\n"
                                     f"üìç –ú–∞—Ä—à—Ä—É—Ç: {order.pickup_address} ‚Üí {order.destination_address}"
                            )
                            return True
                        except Exception as ee:
                            logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ {chat_id}: {ee}")
                            return False

                    updated = False
                    if group_id:
                        updated = await _try_edit(group_id)
                    if not updated and config.driver_group_chat_id and config.driver_group_chat_id != group_id:
                        if await _try_edit(config.driver_group_chat_id):
                            logger.info(f"‚úÖ –°–∫–∞—Å—É–≤–∞–Ω–Ω—è #{order_id} –æ–Ω–æ–≤–ª–µ–Ω–æ —É fallback –≥—Ä—É–ø—ñ {config.driver_group_chat_id}")
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω—ñ –≤ –º—ñ—Å—å–∫—ñ–π, –Ω—ñ –≤ fallback –≥—Ä—É–ø—ñ")
                except Exception as e:
                    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ - —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞
                    if "message to edit not found" in str(e).lower() or "message can't be edited" in str(e).lower():
                        logger.info(f"‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{order.group_message_id} –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id})")
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏: {e}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            await call.bot.send_message(
                call.from_user.id,
                "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
                "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥—å-–∫–æ–ª–∏."
            )
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏", show_alert=True)
    
    @router.callback_query(F.data.startswith("continue_waiting:"))
    async def continue_waiting_handler(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –±–µ–∑ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
        if order.status != "pending":
            await call.answer("‚úÖ –í–æ–¥—ñ–π –≤–∂–µ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!", show_alert=True)
            try:
                await call.message.delete()
            except:
                pass
            return
        
        await call.answer("‚è≥ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—à—É–∫ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Ü—ñ–Ω—ñ...", show_alert=False)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Ü—ñ–Ω—É
        try:
            await call.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ü–æ—à—É–∫ –≤–æ–¥—ñ—è..." (–∑–Ω–æ–≤—É)
        from app.handlers.keyboards import main_menu_keyboard
        is_admin = call.from_user.id in config.bot.admin_ids
        
        current_fare = order.fare_amount if order.fare_amount else 100.0
        
        await call.bot.send_message(
            call.from_user.id,
            f"üîç <b>–®—É–∫–∞—î–º–æ –≤–æ–¥—ñ—è...</b>\n\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
            f"üìç –ö—É–¥–∏: {order.destination_address}\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>{current_fare:.0f} –≥—Ä–Ω</b>\n\n"
            f"‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...",
            reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
        )
        
        logger.info(f"‚è≥ –ö–ª—ñ—î–Ω—Ç #{call.from_user.id} –≤–∏—Ä—ñ—à–∏–≤ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –±–µ–∑ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ü—ñ–Ω–∏ (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id})")
    
    return router
