"""–û–±—Ä–æ–±–Ω–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import (
    SavedAddress,
    save_address,
    get_user_saved_addresses,
    get_saved_address_by_id,
    delete_saved_address,
    update_saved_address,
)

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="saved_addresses")
    logger = logging.getLogger(__name__)

    class SaveAddressStates(StatesGroup):
        name = State()
        emoji = State()
        address = State()

    async def _show_addresses_list(user_id: int, edit_message=None, send_to_chat=None) -> None:
        """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å (—ñ–Ω–ª–∞–π–Ω)"""
        addresses = await get_user_saved_addresses(config.database_path, user_id)
        
        if not addresses:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")]
                ]
            )
            text = ("üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                   "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.\n\n"
                   "–ó–±–µ—Ä–µ–∂—ñ—Ç—å —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –∞–¥—Ä–µ—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
        else:
            buttons = []
            text = "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
            for addr in addresses:
                text += f"{addr.emoji} <b>{addr.name}</b>\n"
                text += f"   {addr.address[:50]}{'...' if len(addr.address) > 50 else ''}\n\n"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{addr.emoji} {addr.name}",
                        callback_data=f"address:view:{addr.id}"
                    )
                ])
            
            buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
            kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        if edit_message:
            await edit_message.edit_text(text, reply_markup=kb)
        elif send_to_chat:
            await send_to_chat.answer(text, reply_markup=kb)
    
    @router.message(F.text == "üìç –ú–æ—ó –∞–¥—Ä–µ—Å–∏")
    async def show_saved_addresses(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ (–∑ Reply keyboard)"""
        if not message.from_user:
            return
        
        # üö´ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        from app.handlers.blocked_check import is_user_blocked, send_blocked_message
        if await is_user_blocked(config.database_path, message.from_user.id):
            await send_blocked_message(message)
            return
        
        await _show_addresses_list(message.from_user.id, send_to_chat=message)
    
    @router.callback_query(F.data == "address:list")
    async def show_saved_addresses_inline(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ (–∑ Inline –∫–Ω–æ–ø–∫–∏)"""
        await call.answer()
        if not call.from_user:
            return
        await _show_addresses_list(call.from_user.id, edit_message=call.message)

    @router.callback_query(F.data == "address:add")
    async def start_add_address(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
        await call.answer()
        await state.set_state(SaveAddressStates.name)
        
        # –Ü–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="address:cancel")]
        ])
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–µ!)
        try:
            msg = await call.message.edit_text(
                "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –î–æ–¥–æ–º—É, –ù–∞ —Ä–æ–±–æ—Ç—É, –î–æ –±–∞—Ç—å–∫—ñ–≤):",
                reply_markup=kb
            )
            # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            await state.update_data(last_message_id=msg.message_id)
        except:
            msg = await call.message.answer(
                "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –î–æ–¥–æ–º—É, –ù–∞ —Ä–æ–±–æ—Ç—É, –î–æ –±–∞—Ç—å–∫—ñ–≤):",
                reply_markup=kb
            )
            await state.update_data(last_message_id=msg.message_id)

    @router.message(SaveAddressStates.name)
    async def save_name(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏"""
        logger.info(f"üìù –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id if message.from_user else 'Unknown'}: {message.text}")
        
        name = message.text.strip() if message.text else ""
        if len(name) < 2:
            # –ù–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∫–æ—Ä–æ—Ç–∫–æ
            error_msg = await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            import asyncio
            asyncio.create_task(asyncio.sleep(3))
            try:
                await message.delete()
                asyncio.create_task(asyncio.sleep(3).then(lambda: error_msg.delete()))
            except:
                pass
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–æ–± —á–∞—Ç –±—É–≤ —á–∏—Å—Ç–∏–π
        try:
            await message.delete()
        except:
            pass
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        data = await state.get_data()
        is_editing = 'editing_address_id' in data
        
        logger.info(f"üìù –†–µ–∂–∏–º: {'–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è' if is_editing else '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏'}")
        
        await state.update_data(name=name)
        await state.set_state(SaveAddressStates.emoji)
        
        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –µ–º–æ–¥–∑—ñ –∑ –∫–Ω–æ–ø–∫–æ—é "–ù–∞–∑–∞–¥"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üè†", callback_data="emoji:üè†"),
                    InlineKeyboardButton(text="üíº", callback_data="emoji:üíº"),
                    InlineKeyboardButton(text="üè•", callback_data="emoji:üè•"),
                    InlineKeyboardButton(text="üè´", callback_data="emoji:üè´"),
                ],
                [
                    InlineKeyboardButton(text="üõí", callback_data="emoji:üõí"),
                    InlineKeyboardButton(text="üèãÔ∏è", callback_data="emoji:üèãÔ∏è"),
                    InlineKeyboardButton(text="‚òï", callback_data="emoji:‚òï"),
                    InlineKeyboardButton(text="üìç", callback_data="emoji:üìç"),
                ],
                [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="emoji:üìç")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="address:back:name")]
            ]
        )
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
        data = await state.get_data()
        last_msg_id = data.get('last_message_id')
        
        if last_msg_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text=f"‚úÖ –ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
                         "–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–¥—Ä–µ—Å–∏:",
                    reply_markup=kb
                )
            except:
                msg = await message.answer(
                    f"‚úÖ –ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–¥—Ä–µ—Å–∏:",
                    reply_markup=kb
                )
                await state.update_data(last_message_id=msg.message_id)
        else:
            msg = await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–¥—Ä–µ—Å–∏:",
                reply_markup=kb
            )
            await state.update_data(last_message_id=msg.message_id)

    @router.callback_query(F.data.startswith("emoji:"))
    async def save_emoji(call: CallbackQuery, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –µ–º–æ–¥–∑—ñ"""
        emoji = call.data.split(":", 1)[1]
        logger.info(f"‚ú® –û–±—Ä–∞–Ω–æ –µ–º–æ–¥–∑—ñ: {emoji}")
        
        await state.update_data(emoji=emoji)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        data = await state.get_data()
        is_editing = 'editing_address_id' in data
        
        if is_editing:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è - –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
            addr_id = data.get('editing_address_id')
            new_name = data.get('name')
            new_emoji = emoji
            
            logger.info(f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ #{addr_id}: –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞={new_name}, –µ–º–æ–¥–∑—ñ={new_emoji}")
            
            success = await update_saved_address(config.database_path, addr_id, call.from_user.id, new_name, new_emoji)
            
            await state.clear()
            
            if success:
                await call.answer("‚úÖ –ê–¥—Ä–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–æ!", show_alert=True)
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
                await _show_addresses_list(call.from_user.id, edit_message=call.message)
            else:
                await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            
            return
        
        # –†–µ–∂–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏
        await state.set_state(SaveAddressStates.address)
        
        await call.answer()
        
        # –Ü–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="address:send_location")],
                [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="address:text_input")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="address:back:emoji")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="address:cancel")]
            ]
        )
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await call.message.edit_text(
                f"‚úÖ –ï–º–æ–¥–∑—ñ: {emoji}\n\n"
                "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:\n\n"
                "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                f"‚úÖ –ï–º–æ–¥–∑—ñ: {emoji}\n\n"
                "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:\n\n"
                "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                reply_markup=kb
            )

    # –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    @router.callback_query(F.data == "address:cancel")
    async def cancel_add_address(call: CallbackQuery, state: FSMContext) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
        await call.answer()
        await state.clear()
        
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å
        if not call.from_user:
            return
        
        addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        if not addresses:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")]
                ]
            )
            await call.message.edit_text(
                "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.",
                reply_markup=kb
            )
        else:
            buttons = []
            text = "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
            for addr in addresses:
                text += f"{addr.emoji} <b>{addr.name}</b>\n   {addr.address[:50]}{'...' if len(addr.address) > 50 else ''}\n\n"
                buttons.append([InlineKeyboardButton(text=f"{addr.emoji} {addr.name}", callback_data=f"address:view:{addr.id}")])
            
            buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
            await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    
    @router.callback_query(F.data == "address:back:name")
    async def back_to_name(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏"""
        await call.answer()
        await state.set_state(SaveAddressStates.name)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="address:cancel")]
        ])
        
        await call.message.edit_text(
            "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –î–æ–¥–æ–º—É, –ù–∞ —Ä–æ–±–æ—Ç—É, –î–æ –±–∞—Ç—å–∫—ñ–≤):",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "address:back:emoji")
    async def back_to_emoji(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –µ–º–æ–¥–∑—ñ"""
        await call.answer()
        
        data = await state.get_data()
        name = data.get("name", "")
        
        await state.set_state(SaveAddressStates.emoji)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üè†", callback_data="emoji:üè†"),
                    InlineKeyboardButton(text="üíº", callback_data="emoji:üíº"),
                    InlineKeyboardButton(text="üè•", callback_data="emoji:üè•"),
                    InlineKeyboardButton(text="üè´", callback_data="emoji:üè´"),
                ],
                [
                    InlineKeyboardButton(text="üõí", callback_data="emoji:üõí"),
                    InlineKeyboardButton(text="üèãÔ∏è", callback_data="emoji:üèãÔ∏è"),
                    InlineKeyboardButton(text="‚òï", callback_data="emoji:‚òï"),
                    InlineKeyboardButton(text="üìç", callback_data="emoji:üìç"),
                ],
                [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="emoji:üìç")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="address:back:name")]
            ]
        )
        
        await call.message.edit_text(
            f"‚úÖ –ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–¥—Ä–µ—Å–∏:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data == "address:send_location")
    async def request_location_for_address(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"""
        await call.answer()
        
        # –¢—É—Ç –ü–û–¢–†–Ü–ë–ï–ù ReplyKeyboard –¥–ª—è request_location
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        data = await state.get_data()
        last_msg_id = data.get('last_message_id')
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await call.message.delete()
        except:
            pass
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–µ –∑ ReplyKeyboard
        msg = await call.message.answer(
            "üìç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
            reply_markup=kb
        )
        await state.update_data(last_message_id=msg.message_id)
    
    @router.callback_query(F.data == "address:text_input")
    async def request_text_address(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º"""
        await call.answer()
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="address:back:emoji")],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="address:cancel")]
            ]
        )
        
        await call.message.edit_text(
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º:\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –ö–∏—ó–≤",
            reply_markup=kb
        )

    @router.message(SaveAddressStates.address, F.location)
    async def save_address_location(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó"""
        logger.info(f"üìç –û—Ç—Ä–∏–º–∞–Ω–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id if message.from_user else 'Unknown'}")
        
        if not message.from_user or not message.location:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î from_user –∞–±–æ location")
            return
        
        logger.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {message.location.latitude}, {message.location.longitude}")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await message.delete()
        except:
            pass
        
        data = await state.get_data()
        logger.info(f"üìä State data: {data}")
        loc = message.location
        
        # Reverse geocoding - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        address = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        
        if config.google_maps_api_key:
            logger.info(f"üîë API –∫–ª—é—á –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, reverse geocoding: {loc.latitude}, {loc.longitude}")
            from app.utils.maps import reverse_geocode
            readable_address = await reverse_geocode(
                config.google_maps_api_key,
                loc.latitude,
                loc.longitude
            )
            if readable_address:
                address = readable_address
                logger.info(f"‚úÖ Reverse geocoded: {address}")
            else:
                logger.warning(f"‚ö†Ô∏è Reverse geocoding –Ω–µ –≤–¥–∞–ª–æ—Å—å")
        else:
            logger.warning("‚ö†Ô∏è Google Maps API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è reverse geocoding")
        
        saved_addr = SavedAddress(
            id=None,
            user_id=message.from_user.id,
            name=data.get("name", "–ê–¥—Ä–µ—Å–∞"),
            emoji=data.get("emoji", "üìç"),
            address=address,
            lat=loc.latitude,
            lon=loc.longitude,
            created_at=datetime.now(timezone.utc)
        )
        
        addr_id = await save_address(config.database_path, saved_addr)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ last_message_id —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        last_msg_id = data.get('last_message_id')
        await state.clear()
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—Ö —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å (—ñ–Ω–ª–∞–π–Ω!)
        addresses = await get_user_saved_addresses(config.database_path, message.from_user.id)
        
        buttons = []
        text = f"‚úÖ <b>–ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</b>\n\n"
        text += f"{saved_addr.emoji} <b>{saved_addr.name}</b>\n{address}\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "üìç <b>–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏:</b>\n\n"
        
        for addr in addresses:
            text += f"{addr.emoji} <b>{addr.name}</b>\n   {addr.address[:45]}{'...' if len(addr.address) > 45 else ''}\n\n"
            buttons.append([InlineKeyboardButton(text=f"{addr.emoji} {addr.name}", callback_data=f"address:view:{addr.id}")])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
        if last_msg_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
                # –ü—Ä–∏–±—Ä–∞—Ç–∏ ReplyKeyboard
                from app.handlers.keyboards import main_menu_keyboard
                from app.storage.db import get_driver_by_tg_user_id
                
                is_admin = message.from_user.id in config.bot.admin_ids
                driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
                is_driver = driver is not None and driver.status == "approved"
                
                await message.answer(
                    "‚úÖ",
                    reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver, is_admin=is_admin)
                )
                return
            except:
                pass
        
        # Fallback - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
        from app.handlers.keyboards import main_menu_keyboard
        from app.storage.db import get_driver_by_tg_user_id
        
        is_admin = message.from_user.id in config.bot.admin_ids
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        is_driver = driver is not None and driver.status == "approved"
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        
        await message.answer(
            "üëå",
            reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver, is_admin=is_admin)
        )

    @router.message(SaveAddressStates.address)
    async def save_address_text(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É"""
        if not message.from_user or not message.text:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await message.delete()
        except:
            pass
        
        data = await state.get_data()
        address = message.text.strip()
        
        if len(address) < 5:
            error_msg = await message.answer("‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            import asyncio
            async def delete_after_delay():
                await asyncio.sleep(3)
                try:
                    await error_msg.delete()
                except:
                    pass
            asyncio.create_task(delete_after_delay())
            return
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        lat, lon = None, None
        if config.google_maps_api_key:
            logger.info(f"üîë API –∫–ª—é—á –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, –≥–µ–æ–∫–æ–¥—É—é: {address}")
            from app.utils.maps import geocode_address
            coords = await geocode_address(config.google_maps_api_key, address)
            if coords:
                lat, lon = coords
                logger.info(f"‚úÖ –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ: {lat}, {lon}")
            else:
                logger.warning(f"‚ö†Ô∏è –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—å –¥–ª—è: {address}")
        else:
            logger.warning("‚ö†Ô∏è Google Maps API –∫–ª—é—á –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        saved_addr = SavedAddress(
            id=None,
            user_id=message.from_user.id,
            name=data.get("name", "–ê–¥—Ä–µ—Å–∞"),
            emoji=data.get("emoji", "üìç"),
            address=address,
            lat=lat,
            lon=lon,
            created_at=datetime.now(timezone.utc)
        )
        
        await save_address(config.database_path, saved_addr)
        
        last_msg_id = data.get('last_message_id')
        await state.clear()
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —É—Å–ø—ñ—Ö —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å (—ñ–Ω–ª–∞–π–Ω!)
        addresses = await get_user_saved_addresses(config.database_path, message.from_user.id)
        
        buttons = []
        text = f"‚úÖ <b>–ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</b>\n\n"
        text += f"{saved_addr.emoji} <b>{saved_addr.name}</b>\n{address}\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += "üìç <b>–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏:</b>\n\n"
        
        for addr in addresses:
            text += f"{addr.emoji} <b>{addr.name}</b>\n   {addr.address[:45]}{'...' if len(addr.address) > 45 else ''}\n\n"
            buttons.append([InlineKeyboardButton(text=f"{addr.emoji} {addr.name}", callback_data=f"address:view:{addr.id}")])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
        if last_msg_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=last_msg_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
                )
                return
            except:
                pass
        
        # Fallback - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

    @router.callback_query(F.data.startswith("address:view:"))
    async def view_address(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 2)[2])
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üöñ –ü–æ–¥–∞—Ç–∏ —Å—é–¥–∏", callback_data=f"use_address:pickup:{addr_id}"),
                    InlineKeyboardButton(text="üéØ –á—Ö–∞—Ç–∏ —Å—é–¥–∏", callback_data=f"use_address:dest:{addr_id}")
                ],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"address:edit:{addr_id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"address:delete:{addr_id}")
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="address:list")
                ]
            ]
        )
        
        await call.message.edit_text(
            f"{address.emoji} <b>{address.name}</b>\n\n"
            f"üìç {address.address}\n\n"
            f"üí° –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("address:edit:"))
    async def edit_address(call: CallbackQuery, state: FSMContext) -> None:
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 2)[2])
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ ID –∞–¥—Ä–µ—Å–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        await state.update_data(editing_address_id=addr_id, editing_address_current=address)
        await state.set_state(SaveAddressStates.name)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="address:cancel")]
        ])
        
        await call.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: <b>{address.name}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç—É —Å–∞–º—É:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data.startswith("address:delete:"))
    async def delete_address(call: CallbackQuery) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 2)[2])
        success = await delete_saved_address(config.database_path, addr_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ê–¥—Ä–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
            addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
            
            if not addresses:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")]
                    ]
                )
                await call.message.edit_text(
                    "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.",
                    reply_markup=kb
                )
            else:
                buttons = []
                text = "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                for addr in addresses:
                    text += f"{addr.emoji} <b>{addr.name}</b>\n   {addr.address[:50]}{'...' if len(addr.address) > 50 else ''}\n\n"
                    buttons.append([InlineKeyboardButton(text=f"{addr.emoji} {addr.name}", callback_data=f"address:view:{addr.id}")])
                
                buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
                await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)

    @router.callback_query(F.data.startswith("use_address:"))
    async def use_saved_address(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        parts = call.data.split(":", 2)
        address_type = parts[1]  # pickup –∞–±–æ dest
        addr_id = int(parts[2])
        
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é
        from app.handlers.order import OrderStates
        
        if address_type == "pickup":
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —è–∫ —Ç–æ—á–∫—É –ø–æ–¥–∞—á—ñ
            await state.update_data(
                pickup=address.address,
                pickup_lat=address.lat,
                pickup_lon=address.lon
            )
            await state.set_state(OrderStates.destination)
            await call.message.answer(
                f"‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ: {address.emoji} {address.name}\n\n"
                "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"
            )
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —è–∫ –ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            await state.update_data(
                destination=address.address,
                dest_lat=address.lat,
                dest_lon=address.lon
            )
            
            # –Ø–∫—â–æ —î pickup - –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É –∞–≤—Ç–æ
            data = await state.get_data()
            if data.get("pickup"):
                # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É (—Ü—ñ–Ω–∏ –ø–æ–∫–∞–∂—É—Ç—å—Å—è –≤ order.py)
                from app.handlers.order import OrderStates
                await state.set_state(OrderStates.car_class)
                await call.message.answer(
                    f"‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {address.emoji} {address.name}\n\n"
                    "üöó <b>–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ</b>\n\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöó –û–±—Ä–∞—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ", callback_data="show_car_classes")]
                    ])
                )
            else:
                await state.set_state(OrderStates.pickup)
                await call.message.answer(
                    f"‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {address.emoji} {address.name}\n\n"
                    "üìç <b>–ó–≤—ñ–¥–∫–∏ –ø–æ–¥–∞—Ç–∏ —Ç–∞–∫—Å—ñ?</b>\n\n"
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"
                )

    return router
