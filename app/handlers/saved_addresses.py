"""–û–±—Ä–æ–±–Ω–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import (
    SavedAddress,
    save_address,
    get_user_saved_addresses,
    get_saved_address_by_id,
    delete_saved_address,
    update_saved_address,
)

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="saved_addresses")
    logger = logging.getLogger(__name__)

    class SaveAddressStates(StatesGroup):
        name = State()
        emoji = State()
        address = State()

    @router.message(F.text == "üìç –ú–æ—ó –∞–¥—Ä–µ—Å–∏")
    async def show_saved_addresses(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏"""
        if not message.from_user:
            return
        
        addresses = await get_user_saved_addresses(config.database_path, message.from_user.id)
        
        if not addresses:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")]
                ]
            )
            await message.answer(
                "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.\n\n"
                "–ó–±–µ—Ä–µ–∂—ñ—Ç—å —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –∞–¥—Ä–µ—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                reply_markup=kb
            )
            return
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∞–¥—Ä–µ—Å–∏
        buttons = []
        for addr in addresses:
            buttons.append([
                InlineKeyboardButton(
                    text=f"{addr.emoji} {addr.name}",
                    callback_data=f"address:view:{addr.id}"
                )
            ])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
        for addr in addresses:
            text += f"{addr.emoji} <b>{addr.name}</b>\n"
            text += f"   {addr.address[:50]}{'...' if len(addr.address) > 50 else ''}\n\n"
        
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "address:add")
    async def start_add_address(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
        await call.answer()
        await state.set_state(SaveAddressStates.name)
        await call.message.answer(
            "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –î–æ–¥–æ–º—É, –ù–∞ —Ä–æ–±–æ—Ç—É, –î–æ –±–∞—Ç—å–∫—ñ–≤):"
        )

    @router.message(SaveAddressStates.name)
    async def save_name(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–∑–≤—É –∞–¥—Ä–µ—Å–∏"""
        name = message.text.strip() if message.text else ""
        if len(name) < 2:
            await message.answer("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(name=name)
        await state.set_state(SaveAddressStates.emoji)
        
        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –µ–º–æ–¥–∑—ñ
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üè†", callback_data="emoji:üè†"),
                    InlineKeyboardButton(text="üíº", callback_data="emoji:üíº"),
                    InlineKeyboardButton(text="üè•", callback_data="emoji:üè•"),
                    InlineKeyboardButton(text="üè´", callback_data="emoji:üè´"),
                ],
                [
                    InlineKeyboardButton(text="üõí", callback_data="emoji:üõí"),
                    InlineKeyboardButton(text="üèãÔ∏è", callback_data="emoji:üèãÔ∏è"),
                    InlineKeyboardButton(text="‚òï", callback_data="emoji:‚òï"),
                    InlineKeyboardButton(text="üìç", callback_data="emoji:üìç"),
                ],
                [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="emoji:üìç")]
            ]
        )
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –µ–º–æ–¥–∑—ñ –¥–ª—è –∞–¥—Ä–µ—Å–∏:",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("emoji:"))
    async def save_emoji(call: CallbackQuery, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –µ–º–æ–¥–∑—ñ"""
        emoji = call.data.split(":", 1)[1]
        await state.update_data(emoji=emoji)
        await state.set_state(SaveAddressStates.address)
        
        await call.answer()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
                [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await call.message.answer(
            f"‚úÖ –ï–º–æ–¥–∑—ñ: {emoji}\n\n"
            "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
            reply_markup=kb
        )

    @router.message(SaveAddressStates.address, F.location)
    async def save_address_location(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó"""
        if not message.from_user or not message.location:
            return
        
        data = await state.get_data()
        loc = message.location
        
        # Reverse geocoding - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        address = f"üìç {loc.latitude:.6f}, {loc.longitude:.6f}"
        
        if config.google_maps_api_key:
            from app.utils.maps import reverse_geocode
            readable_address = await reverse_geocode(
                config.google_maps_api_key,
                loc.latitude,
                loc.longitude
            )
            if readable_address:
                address = readable_address
                logger.info(f"‚úÖ Reverse geocoded: {address}")
        
        saved_addr = SavedAddress(
            id=None,
            user_id=message.from_user.id,
            name=data.get("name", "–ê–¥—Ä–µ—Å–∞"),
            emoji=data.get("emoji", "üìç"),
            address=address,
            lat=loc.latitude,
            lon=loc.longitude,
            created_at=datetime.now(timezone.utc)
        )
        
        addr_id = await save_address(config.database_path, saved_addr)
        await state.clear()
        
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        from app.handlers.start import main_menu_keyboard
        user_data = await state.get_data()
        is_admin = message.from_user.id in config.bot.admin_ids
        
        await message.answer(
            f"‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"{saved_addr.emoji} <b>{saved_addr.name}</b>\n"
            f"{address}",
            reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
        )

    @router.message(SaveAddressStates.address)
    async def save_address_text(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É"""
        if not message.from_user or not message.text:
            return
        
        if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await state.clear()
            from app.handlers.start import main_menu_keyboard
            is_admin = message.from_user.id in config.bot.admin_ids
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
            )
            return
        
        data = await state.get_data()
        address = message.text.strip()
        
        if len(address) < 5:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –°–ø—Ä–æ–±–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏
        lat, lon = None, None
        if config.google_maps_api_key:
            from app.utils.maps import geocode_address
            coords = await geocode_address(config.google_maps_api_key, address)
            if coords:
                lat, lon = coords
        
        saved_addr = SavedAddress(
            id=None,
            user_id=message.from_user.id,
            name=data.get("name", "–ê–¥—Ä–µ—Å–∞"),
            emoji=data.get("emoji", "üìç"),
            address=address,
            lat=lat,
            lon=lon,
            created_at=datetime.now(timezone.utc)
        )
        
        await save_address(config.database_path, saved_addr)
        await state.clear()
        
        from app.handlers.start import main_menu_keyboard
        is_admin = message.from_user.id in config.bot.admin_ids
        
        await message.answer(
            f"‚úÖ –ê–¥—Ä–µ—Å—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"{saved_addr.emoji} <b>{saved_addr.name}</b>\n"
            f"{address}",
            reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin)
        )

    @router.callback_query(F.data.startswith("address:view:"))
    async def view_address(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 2)[2])
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üöñ –ü–æ–¥–∞—Ç–∏ —Å—é–¥–∏", callback_data=f"use_address:pickup:{addr_id}"),
                    InlineKeyboardButton(text="üéØ –á—Ö–∞—Ç–∏ —Å—é–¥–∏", callback_data=f"use_address:dest:{addr_id}")
                ],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"address:edit:{addr_id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"address:delete:{addr_id}")
                ]
            ]
        )
        
        await call.message.edit_text(
            f"{address.emoji} <b>{address.name}</b>\n\n"
            f"üìç {address.address}\n\n"
            f"üí° –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("address:delete:"))
    async def delete_address(call: CallbackQuery) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        addr_id = int(call.data.split(":", 2)[2])
        success = await delete_saved_address(config.database_path, addr_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ê–¥—Ä–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
            addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
            
            if not addresses:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")]
                    ]
                )
                await call.message.edit_text(
                    "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.",
                    reply_markup=kb
                )
            else:
                buttons = []
                text = "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                for addr in addresses:
                    text += f"{addr.emoji} <b>{addr.name}</b>\n   {addr.address[:50]}{'...' if len(addr.address) > 50 else ''}\n\n"
                    buttons.append([InlineKeyboardButton(text=f"{addr.emoji} {addr.name}", callback_data=f"address:view:{addr.id}")])
                
                buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
                await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)

    @router.callback_query(F.data.startswith("use_address:"))
    async def use_saved_address(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        parts = call.data.split(":", 2)
        address_type = parts[1]  # pickup –∞–±–æ dest
        addr_id = int(parts[2])
        
        address = await get_saved_address_by_id(config.database_path, addr_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é
        from app.handlers.order import OrderStates
        
        if address_type == "pickup":
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —è–∫ —Ç–æ—á–∫—É –ø–æ–¥–∞—á—ñ
            await state.update_data(
                pickup=address.address,
                pickup_lat=address.lat,
                pickup_lon=address.lon
            )
            await state.set_state(OrderStates.destination)
            await call.message.answer(
                f"‚úÖ –ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ: {address.emoji} {address.name}\n\n"
                "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"
            )
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —è–∫ –ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
            await state.update_data(
                destination=address.address,
                dest_lat=address.lat,
                dest_lon=address.lon
            )
            
            # –Ø–∫—â–æ —î pickup - –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
            data = await state.get_data()
            if data.get("pickup"):
                await state.set_state(OrderStates.comment)
                await call.message.answer(
                    f"‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {address.emoji} {address.name}\n\n"
                    "üí¨ <b>–î–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä</b> (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):\n\n"
                    "–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'"
                )
            else:
                await state.set_state(OrderStates.pickup)
                await call.message.answer(
                    f"‚úÖ –ü—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {address.emoji} {address.name}\n\n"
                    "üìç <b>–ó–≤—ñ–¥–∫–∏ –ø–æ–¥–∞—Ç–∏ —Ç–∞–∫—Å—ñ?</b>\n\n"
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"
                )

    return router
