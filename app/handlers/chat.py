"""–ß–∞—Ç –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–æ–º —Ç–∞ –≤–æ–¥—ñ—î–º"""
from __future__ import annotations

import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_order_by_id,
    get_driver_by_id,
    get_driver_by_tg_user_id,
)

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="chat")

    class ChatStates(StatesGroup):
        messaging = State()

    @router.callback_query(F.data.startswith("chat:start:"))
    async def start_chat(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ —á–∞—Ç"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":", 2)[2])
        
        order = await get_order_by_id(config.database_path, order_id)
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∫–ª—ñ—î–Ω—Ç –∞–±–æ –≤–æ–¥—ñ–π —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        is_client = order.user_id == call.from_user.id
        is_driver = False
        
        if order.driver_id:
            driver = await get_driver_by_id(config.database_path, order.driver_id)
            is_driver = driver and driver.tg_user_id == call.from_user.id
        
        if not is_client and not is_driver:
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        # –ß–∞—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if order.status not in ["accepted", "in_progress"]:
            await call.answer("‚ùå –ß–∞—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥ —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        await call.answer()
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —á–∞—Ç—É
        if is_client and order.driver_id:
            driver = await get_driver_by_id(config.database_path, order.driver_id)
            if driver:
                await state.update_data(
                    order_id=order_id,
                    chat_with_id=driver.tg_user_id,
                    chat_with_name=driver.full_name,
                    chat_role="driver"
                )
        else:
            await state.update_data(
                order_id=order_id,
                chat_with_id=order.user_id,
                chat_with_name=order.name,
                chat_role="client"
            )
        
        await state.set_state(ChatStates.messaging)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç", callback_data="chat:end")]
            ]
        )
        
        data = await state.get_data()
        await call.message.answer(
            f"üí¨ <b>–ß–∞—Ç –∑ {data['chat_with_name']}</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –ª–æ–∫–∞—Ü—ñ—è):",
            reply_markup=kb
        )

    @router.message(ChatStates.messaging)
    async def forward_message(message: Message, state: FSMContext) -> None:
        """–ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        if not message.from_user:
            return
        
        data = await state.get_data()
        chat_with_id = data.get("chat_with_id")
        chat_with_name = data.get("chat_with_name")
        chat_role = data.get("chat_role")
        
        if not chat_with_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∞—Ç—É")
            await state.clear()
            return
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ö—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫
        sender_name = "–ö–ª—ñ—î–Ω—Ç" if chat_role == "driver" else "–í–æ–¥—ñ–π"
        
        try:
            # –ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if message.text:
                await message.bot.send_message(
                    chat_with_id,
                    f"üí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {sender_name}:</b>\n\n{message.text}"
                )
            elif message.photo:
                await message.bot.send_photo(
                    chat_with_id,
                    message.photo[-1].file_id,
                    caption=f"üì∏ –§–æ—Ç–æ –≤—ñ–¥ {sender_name}" + (f"\n\n{message.caption}" if message.caption else "")
                )
            elif message.location:
                await message.bot.send_location(
                    chat_with_id,
                    message.location.latitude,
                    message.location.longitude
                )
                await message.bot.send_message(
                    chat_with_id,
                    f"üìç –õ–æ–∫–∞—Ü—ñ—è –≤—ñ–¥ {sender_name}"
                )
            elif message.voice:
                await message.bot.send_voice(
                    chat_with_id,
                    message.voice.file_id,
                    caption=f"üé§ –ì–æ–ª–æ—Å–æ–≤–µ –≤—ñ–¥ {sender_name}"
                )
            else:
                await message.answer("‚ùå –¶–µ–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è")
                return
            
            await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"Failed to forward message: {e}")
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    @router.callback_query(F.data == "chat:end")
    async def end_chat(call: CallbackQuery, state: FSMContext) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç"""
        await call.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        await state.clear()
        await call.message.edit_text("üí¨ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    return router
