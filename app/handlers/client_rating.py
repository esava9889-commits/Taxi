"""–†–µ–π—Ç–∏–Ω–≥ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–≤–æ–¥—ñ—ó –æ—Ü—ñ–Ω—é—é—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤)"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from app.config.config import AppConfig
from app.storage.db import (
    get_order_by_id,
    get_driver_by_tg_user_id,
    insert_client_rating,
    get_client_average_rating,
    ClientRating,
)

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="client_rating")

    @router.callback_query(F.data.startswith("rate:client:"))
    async def show_client_rating_options(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –æ–ø—Ü—ñ—ó –æ—Ü—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":", 2)[2])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –≤–æ–¥—ñ–π —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        await call.answer()
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 5 - –ß—É–¥–æ–≤–æ", callback_data=f"rate_client:{order.user_id}:5:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 4 - –î–æ–±—Ä–µ", callback_data=f"rate_client:{order.user_id}:4:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 3 - –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data=f"rate_client:{order.user_id}:3:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 2 - –ü–æ–≥–∞–Ω–æ", callback_data=f"rate_client:{order.user_id}:2:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 1 - –ñ–∞—Ö–ª–∏–≤–æ", callback_data=f"rate_client:{order.user_id}:1:{order_id}"),
                ]
            ]
        )
        
        await call.message.answer(
            "‚≠êÔ∏è <b>–û—Ü—ñ–Ω—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
            f"üë§ {order.name}\n\n"
            "–í—Ä–∞—Ö—É–π—Ç–µ:\n"
            "‚Ä¢ –í–≤—ñ—á–ª–∏–≤—ñ—Å—Ç—å —Ç–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫—É\n"
            "‚Ä¢ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å (—á–∏ –Ω–µ –∑–º—É—Å–∏–≤ —á–µ–∫–∞—Ç–∏)\n"
            "‚Ä¢ –ß–∏—Å—Ç–æ—Ç—É (—á–∏ –Ω–µ –∑–∞–±—Ä—É–¥–Ω–∏–≤ –∞–≤—Ç–æ)\n"
            "‚Ä¢ –ê–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("rate_client:"))
    async def rate_client(call: CallbackQuery) -> None:
        """–û—Ü—ñ–Ω–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user:
            return
        
        parts = call.data.split(":")
        client_id = int(parts[1])
        rating_value = int(parts[2])
        order_id = int(parts[3])
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫—É
        client_rating = ClientRating(
            id=None,
            order_id=order_id,
            client_id=client_id,
            driver_id=driver.id,
            rating=rating_value,
            created_at=datetime.now(timezone.utc)
        )
        
        await insert_client_rating(config.database_path, client_rating)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = await get_client_average_rating(config.database_path, client_id)
        
        stars = "‚≠êÔ∏è" * rating_value
        await call.answer(f"‚úÖ –û—Ü—ñ–Ω–∫–∞ {stars} –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", show_alert=True)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–æ–¥—ñ—è
        rating_text = {
            5: "–ß—É–¥–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç! üåü",
            4: "–•–æ—Ä–æ—à–∏–π –∫–ª—ñ—î–Ω—Ç ‚ú®",
            3: "–ù–æ—Ä–º–∞–ª—å–Ω–∏–π –∫–ª—ñ—î–Ω—Ç üëå",
            2: "–ü—Ä–æ–±–ª–µ–º–Ω–∏–π –∫–ª—ñ—î–Ω—Ç ‚ö†Ô∏è",
            1: "–ü–æ–≥–∞–Ω–∏–π –∫–ª—ñ—î–Ω—Ç ‚ùå"
        }
        
        await call.message.edit_text(
            f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!</b>\n\n"
            f"–í–∏ –æ—Ü—ñ–Ω–∏–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞: {stars}\n"
            f"{rating_text.get(rating_value, '')}\n\n"
            f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª—ñ—î–Ω—Ç–∞: {avg_rating:.1f} ‚≠êÔ∏è" if avg_rating else ""
        )
        
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ —è–∫—â–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∏–∑—å–∫–∏–π
        if avg_rating and avg_rating < 3.0:
            try:
                await call.bot.send_message(
                    client_id,
                    "‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b>\n\n"
                    f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —è–∫ –ø–∞—Å–∞–∂–∏—Ä–∞: {avg_rating:.1f} ‚≠êÔ∏è\n\n"
                    "–ù–∏–∑—å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ:\n"
                    "‚Ä¢ –í–æ–¥—ñ—ó –º–æ–∂—É—Ç—å –≤—ñ–¥—Ö–∏–ª—è—Ç–∏ –≤–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                    "‚Ä¢ –î–æ–≤—à–µ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–∞–∫—Å—ñ\n\n"
                    "üí° –ü–æ–∫—Ä–∞—â—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥:\n"
                    "‚Ä¢ –ë—É–¥—å—Ç–µ –≤–≤—ñ—á–ª–∏–≤—ñ –∑ –≤–æ–¥—ñ—è–º–∏\n"
                    "‚Ä¢ –ü—Ä–∏—Ö–æ–¥—å—Ç–µ –≤—á–∞—Å–Ω–æ\n"
                    "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É –≤ –∞–≤—Ç–æ"
                )
            except Exception as e:
                logger.error(f"Failed to notify client about low rating: {e}")

    return router
