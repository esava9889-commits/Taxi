from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router

logger = logging.getLogger(__name__)
from aiogram.types import CallbackQuery
from aiogram.filters import Command
from aiogram.types import Message

from app.config.config import AppConfig
from app.storage.db import (
    Rating,
    insert_rating,
    get_driver_average_rating,
    get_order_by_id,
)


def create_router(config: AppConfig) -> Router:
    router = Router(name="ratings")

    @router.callback_query(F.data.startswith("rate:skip:"))
    async def skip_rating(call: CallbackQuery) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è"""
        if not call.from_user:
            return
        
        await call.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ—ó–∑–¥–∫—É! üöñ", show_alert=False)
        
        # ‚≠ê –û–ß–ò–°–¢–ò–¢–ò –ß–ê–¢: –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        try:
            # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
            if call.message:
                current_msg_id = call.message.message_id
                deleted_count = 0
                
                for i in range(50):
                    try:
                        await call.bot.delete_message(
                            chat_id=call.from_user.id,
                            message_id=current_msg_id - i
                        )
                        deleted_count += 1
                    except:
                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ)
                
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {call.from_user.id} –ø—ñ—Å–ª—è –ø—Ä–æ–ø—É—Å–∫—É –æ—Ü—ñ–Ω–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É: {e}")
    
    @router.callback_query(F.data.startswith("rate:"))
    async def handle_rating(call: CallbackQuery) -> None:
        if not call.from_user:
            return
        
        parts = (call.data or "").split(":")
        if len(parts) < 5:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        # Format: rate:driver:<driver_tg_id>:<rating>:<order_id>
        target_type = parts[1]  # driver or client
        target_user_id = int(parts[2])
        rating_value = int(parts[3])
        order_id = int(parts[4])
        
        if not (1 <= rating_value <= 5):
            await call.answer("‚ùå –û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5", show_alert=True)
            return
        
        # Verify order exists
        order = await get_order_by_id(config.database_path, order_id)
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # Create rating
        rating = Rating(
            id=None,
            order_id=order_id,
            from_user_id=call.from_user.id,
            to_user_id=target_user_id,
            rating=rating_value,
            comment=None,
            created_at=datetime.now(timezone.utc)
        )
        
        await insert_rating(config.database_path, rating)
        
        stars = "‚≠ê" * rating_value
        await call.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É! {stars}", show_alert=True)
        
        # ‚≠ê –û–ß–ò–°–¢–ò–¢–ò –ß–ê–¢: –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –ø–µ—Ä—ñ–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            if call.message:
                current_msg_id = call.message.message_id
                deleted_count = 0
                
                # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–µ—Å—å –ø–µ—Ä—ñ–æ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
                for i in range(50):
                    try:
                        await call.bot.delete_message(
                            chat_id=call.from_user.id,
                            message_id=current_msg_id - i
                        )
                        deleted_count += 1
                    except:
                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
                
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {call.from_user.id} –ø—ñ—Å–ª—è –æ—Ü—ñ–Ω–∫–∏ {rating_value}‚≠ê")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É: {e}")
        
        # Notify rated user about their new average rating
        try:
            avg_rating = await get_driver_average_rating(config.database_path, target_user_id)
            if avg_rating:
                await call.bot.send_message(
                    target_user_id,
                    f"‚≠êÔ∏è –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É: {rating_value}/5\n"
                    f"–í–∞—à —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5"
                )
        except Exception:
            pass

    @router.message(Command("my_rating"))
    async def show_my_rating(message: Message) -> None:
        if not message.from_user:
            return
        
        avg_rating = await get_driver_average_rating(config.database_path, message.from_user.id)
        
        if avg_rating is None:
            await message.answer("‚≠êÔ∏è –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫.")
            return
        
        stars = "‚≠êÔ∏è" * int(round(avg_rating))
        await message.answer(
            f"‚≠êÔ∏è <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
            f"{stars}\n"
            f"–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: {avg_rating:.2f}/5"
        )

    return router
