"""Push-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ –≤–æ–¥—ñ—ó–≤"""
from __future__ import annotations

import logging
from typing import Optional

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)


async def notify_client_driver_accepted(
    bot: Bot,
    client_id: int,
    order_id: int,
    driver_name: str,
    car_info: str,
    car_plate: str,
    driver_phone: str,
    eta_minutes: Optional[int] = None
) -> None:
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –í–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    eta_text = f"\n‚è±Ô∏è –ü—Ä–∏–±—É–¥–µ —á–µ—Ä–µ–∑: ~{eta_minutes} —Ö–≤" if eta_minutes else ""
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìç –î–µ –≤–æ–¥—ñ–π?", callback_data=f"track_driver:{order_id}"),
                InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", callback_data=f"chat:start:{order_id}")
            ],
            [InlineKeyboardButton(text="üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏", url=f"tel:{driver_phone}")]
        ]
    )
    
    try:
        await bot.send_message(
            client_id,
            f"‚úÖ <b>–í–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
            f"üë§ –í–æ–¥—ñ–π: {driver_name}\n"
            f"üöó –ê–≤—Ç–æ: {car_info}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {car_plate}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{driver_phone}</code>{eta_text}\n\n"
            f"üöó <b>–í–æ–¥—ñ–π —ó–¥–µ –¥–æ –≤–∞—Å!</b>",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"Failed to notify client {client_id}: {e}")


async def notify_client_driver_arrived(
    bot: Bot,
    client_id: int,
    order_id: int,
    driver_name: str
) -> None:
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ"""
    try:
        await bot.send_message(
            client_id,
            f"üìç <b>–í–æ–¥—ñ–π –≤–∂–µ –±—ñ–ª—è –≤–∞—Å!</b>\n\n"
            f"üë§ {driver_name} —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å.\n"
            f"–í–∏—Ö–æ–¥—å—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞! üö∂"
        )
    except Exception as e:
        logger.error(f"Failed to notify client {client_id}: {e}")


async def notify_client_trip_started(
    bot: Bot,
    client_id: int,
    order_id: int,
    destination: str
) -> None:
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –ü–æ—ó–∑–¥–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å"""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜò SOS", callback_data="sos:confirm")]
        ]
    )
    
    try:
        await bot.send_message(
            client_id,
            f"üöó <b>–ü–æ—ó–∑–¥–∫–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å!</b>\n\n"
            f"üìç –á–¥–µ–º–æ: {destination}\n\n"
            f"–ü—Ä–∏—î–º–Ω–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ! ‚ú®",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"Failed to notify client {client_id}: {e}")


async def notify_client_trip_completed(
    bot: Bot,
    client_id: int,
    order_id: int,
    driver_tg_id: int,
    fare: float,
    distance_km: float,
    duration_min: int
) -> None:
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠êÔ∏è 5", callback_data=f"rate:driver:{driver_tg_id}:5:{order_id}"),
                InlineKeyboardButton(text="‚≠êÔ∏è 4", callback_data=f"rate:driver:{driver_tg_id}:4:{order_id}"),
            ],
            [
                InlineKeyboardButton(text="‚≠êÔ∏è 3", callback_data=f"rate:driver:{driver_tg_id}:3:{order_id}"),
                InlineKeyboardButton(text="‚≠êÔ∏è 2", callback_data=f"rate:driver:{driver_tg_id}:2:{order_id}"),
                InlineKeyboardButton(text="‚≠êÔ∏è 1", callback_data=f"rate:driver:{driver_tg_id}:1:{order_id}"),
            ]
        ]
    )
    
    try:
        await bot.send_message(
            client_id,
            f"‚úÖ <b>–ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare:.2f} –≥—Ä–Ω\n"
            f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
            f"‚è±Ô∏è –ß–∞—Å: {duration_min} —Ö–≤\n\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–æ–¥—ñ—è:",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"Failed to notify client {client_id}: {e}")


async def notify_driver_new_order(
    bot: Bot,
    driver_id: int,
    order_id: int,
    client_name: str,
    pickup_address: str,
    destination_address: str,
    distance_km: Optional[float] = None,
    estimated_fare: Optional[float] = None
) -> None:
    """–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–æ–¥—ñ—é –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º" if distance_km else ""
    fare_text = f"\nüí∞ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ~{estimated_fare:.0f} –≥—Ä–Ω" if estimated_fare else ""
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_order:{order_id}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_order:{order_id}")
            ]
        ]
    )
    
    try:
        await bot.send_message(
            driver_id,
            f"üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {client_name}\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {pickup_address}\n"
            f"üìç –ö—É–¥–∏: {destination_address}{distance_text}{fare_text}\n\n"
            f"‚è∞ –ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥—à–µ –∑–∞ —ñ–Ω—à–∏—Ö!",
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f"Failed to notify driver {driver_id}: {e}")
