"""SOS –∫–Ω–æ–ø–∫–∞ –¥–ª—è –±–µ–∑–ø–µ–∫–∏"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import get_user_active_order, get_driver_by_id

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="sos")

    @router.message(F.text == "üÜò SOS")
    async def sos_button(message: Message) -> None:
        """–ö–Ω–æ–ø–∫–∞ SOS"""
        if not message.from_user:
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_user_active_order(config.database_path, message.from_user.id)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö® –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ SOS", callback_data="sos:confirm"),
                    InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="sos:cancel")
                ]
            ]
        )
        
        await message.answer(
            "üÜò <b>SOS –¢—Ä–∏–≤–æ–≥–∞</b>\n\n"
            "–¶–µ –µ–∫—Å—Ç—Ä–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–ø–æ–º–æ–≥–∏!\n\n"
            "–ü—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ:\n"
            "‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
            "‚Ä¢ –ë—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –≤–∞—à–∞ –ª–æ–∫–∞—Ü—ñ—è\n"
            "‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—ó–∑–¥–∫—É\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –≤ –µ–∫—Å—Ç—Ä–µ–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö!",
            reply_markup=kb
        )

    @router.callback_query(F.data == "sos:confirm")
    async def sos_confirm(call: CallbackQuery) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ SOS"""
        if not call.from_user:
            return
        
        await call.answer()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_user_active_order(config.database_path, call.from_user.id)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
        admin_message = (
            "üö® <b>SOS –¢–†–ò–í–û–ì–ê!</b> üö®\n\n"
            f"–í—ñ–¥: {call.from_user.full_name or '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n"
            f"ID: <code>{call.from_user.id}</code>\n"
            f"Username: @{call.from_user.username or '–Ω–µ–º–∞—î'}\n"
            f"–ß–∞—Å: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n"
        )
        
        if order:
            admin_message += (
                f"üìã <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n"
                f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
                f"üìç –ö—É–¥–∏: {order.destination_address}\n\n"
            )
            
            if order.driver_id:
                driver = await get_driver_by_id(config.database_path, order.driver_id)
                if driver:
                    admin_message += (
                        f"üöó <b>–í–æ–¥—ñ–π:</b>\n"
                        f"–ü–Ü–ë: {driver.full_name}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"–ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})\n\n"
                    )
        else:
            admin_message += "‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
        
        admin_message += "‚ùóÔ∏è –¢–ï–†–ú–Ü–ù–û–í–û –ó–í–ï–†–ù–Ü–¢–¨–°–Ø –î–û –ö–û–†–ò–°–¢–£–í–ê–ß–ê!"
        
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É
        for admin_id in config.bot.admin_ids:
            try:
                await call.bot.send_message(admin_id, admin_message)
                logger.critical(f"SOS ALERT from user {call.from_user.id}")
            except Exception as e:
                logger.error(f"Failed to send SOS to admin {admin_id}: {e}")
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await call.message.edit_text(
            "‚úÖ <b>SOS —Å–∏–≥–Ω–∞–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!</b>\n\n"
            "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
            "üìû –Ø–∫—â–æ –Ω–µ–±–µ–∑–ø–µ–∫–∞ - –¥–∑–≤–æ–Ω—ñ—Ç—å 102!"
        )

    @router.callback_query(F.data == "sos:cancel")
    async def sos_cancel(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ SOS"""
        await call.answer()
        await call.message.edit_text("‚ùå SOS —Å–∫–∞—Å–æ–≤–∞–Ω–æ")

    return router
