from __future__ import annotations

import re
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig
from app.storage.db import User, upsert_user, get_user_by_id


ORDER_TEXT = "–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ"
REGISTER_TEXT = "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"
DRIVER_TEXT = "–°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º"
HELP_TEXT = "–î–æ–ø–æ–º–æ–≥–∞"
CANCEL_TEXT = "–°–∫–∞—Å—É–≤–∞—Ç–∏"


def main_menu_keyboard(is_registered: bool = False) -> ReplyKeyboardMarkup:
    if is_registered:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=ORDER_TEXT)],
                [KeyboardButton(text=DRIVER_TEXT), KeyboardButton(text=HELP_TEXT)],
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
        )
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=ORDER_TEXT), KeyboardButton(text=REGISTER_TEXT)],
            [KeyboardButton(text=DRIVER_TEXT), KeyboardButton(text=HELP_TEXT)],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
    )


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def contact_or_cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text=CANCEL_TEXT)],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä",
    )


def is_valid_phone(text: str) -> bool:
    return bool(re.fullmatch(r"[+]?[\d\s\-()]{7,18}", text.strip()))


class ClientRegStates(StatesGroup):
    phone = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="start")

    @router.message(CommandStart())
    async def on_start(message: Message, state: FSMContext) -> None:
        await state.clear()
        
        if not message.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        user = await get_user_by_id(config.database_path, message.from_user.id)
        
        if user:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            await message.answer(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.full_name}! üëã\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=main_menu_keyboard(is_registered=True)
            )
        else:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
            new_user = User(
                user_id=message.from_user.id,
                full_name=message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                phone="",  # –ë—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                role="client",
                created_at=datetime.now(timezone.utc),
            )
            await upsert_user(config.database_path, new_user)
            
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:complete")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="help:show")],
                ]
            )
            
            await message.answer(
                f"–í—ñ—Ç–∞—î–º–æ —É —Ç–∞–∫—Å—ñ-–±–æ—Ç—ñ, {message.from_user.full_name}! üöñ\n\n"
                "–ú–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–∏–ª–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å.\n"
                "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ç–∞ –Ω–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                reply_markup=kb
            )

    @router.callback_query(F.data == "register:complete")
    async def complete_registration_inline(call, state: FSMContext) -> None:
        await call.answer()
        await state.set_state(ClientRegStates.phone)
        await call.message.answer(
            "üì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=contact_or_cancel_keyboard(),
        )
    
    @router.callback_query(F.data == "help:show")
    async def show_help_inline(call) -> None:
        await call.answer()
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
            "üöñ <b>–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ</b> ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É\n"
            "üì± <b>–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é</b> ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            "üöó <b>–°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º</b> ‚Äî –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è\n\n"
            "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é."
        )
        await call.message.answer(help_text, reply_markup=main_menu_keyboard())
    
    @router.message(F.text == HELP_TEXT)
    async def on_help(message: Message) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone
        
        help_text = (
            "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
            "üöñ <b>–ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ</b> ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É\n"
            "üì± <b>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è</b> ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            "üöó <b>–°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º</b> ‚Äî –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è\n\n"
        )
        
        if not is_registered:
            help_text += "‚ö†Ô∏è –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é."
        
        await message.answer(help_text, reply_markup=main_menu_keyboard(is_registered))

    @router.message(F.text == REGISTER_TEXT)
    async def start_client_registration(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if user and user.phone:
            await message.answer(
                "‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\n"
                f"–Ü–º'—è: {user.full_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}",
                reply_markup=main_menu_keyboard(is_registered=True)
            )
            return
        
        await state.set_state(ClientRegStates.phone)
        await message.answer(
            "üì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=contact_or_cancel_keyboard(),
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone
        
        await state.clear()
        await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(is_registered))

    @router.message(ClientRegStates.phone, F.contact)
    async def take_phone_from_contact(message: Message, state: FSMContext) -> None:
        contact = message.contact
        phone = contact.phone_number
        full_name = message.from_user.full_name if message.from_user else ""
        user = User(
            user_id=message.from_user.id if message.from_user else 0,
            full_name=full_name,
            phone=phone,
            role="client",
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        await state.clear()
        await message.answer(
            "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=main_menu_keyboard()
        )

    @router.message(ClientRegStates.phone)
    async def take_phone_text(message: Message, state: FSMContext) -> None:
        phone = message.text.strip()
        if not is_valid_phone(phone):
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä.: +380 67 123 45 67")
            return
        full_name = message.from_user.full_name if message.from_user else ""
        user = User(
            user_id=message.from_user.id if message.from_user else 0,
            full_name=full_name,
            phone=phone,
            role="client",
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        await state.clear()
        await message.answer(
            "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ üöñ", 
            reply_markup=main_menu_keyboard(is_registered=True)
        )

    return router
