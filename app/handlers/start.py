from __future__ import annotations

import logging
import re
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig, AVAILABLE_CITIES
from app.storage.db import User, upsert_user, get_user_by_id

logger = logging.getLogger(__name__)


class ClientRegStates(StatesGroup):
    phone = State()
    city = State()


def main_menu_keyboard(is_registered: bool = False, is_driver: bool = False) -> ReplyKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if is_driver:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")],
                [KeyboardButton(text="üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫")],
                [KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")],
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
        )
    
    if is_registered:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ")],
                [KeyboardButton(text="üìú –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"), KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")],
                [KeyboardButton(text="üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")],
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
        )
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å")],
            [KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é",
    )


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


def contact_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
    )


def city_selection_keyboard() -> InlineKeyboardMarkup:
    """–Ü–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
    buttons = []
    for city in AVAILABLE_CITIES:
        buttons.append([InlineKeyboardButton(text=f"üìç {city}", callback_data=f"city:{city}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def is_valid_phone(text: str) -> bool:
    return bool(re.fullmatch(r"[+]?[\d\s\-()]{7,18}", text.strip()))


def create_router(config: AppConfig) -> Router:
    router = Router(name="start")

    @router.message(CommandStart())
    async def on_start(message: Message, state: FSMContext) -> None:
        await state.clear()
        
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –≤–æ–¥—ñ–π
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        is_driver = driver is not None and driver.status == "approved"
        
        if user and user.phone and user.city:
            # –ü–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            await message.answer(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.full_name}! üëã\n\n"
                f"üìç –ú—ñ—Å—Ç–æ: {user.city}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver)
            )
        elif user:
            # –ù–µ–ø–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help:show")],
                ]
            )
            await message.answer(
                f"–í—ñ—Ç–∞—î–º–æ, {user.full_name}! üëã\n\n"
                "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:\n"
                "‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ\n"
                "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
                "–¶–µ –∑–∞–π–º–µ –º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏! ‚è±",
                reply_markup=kb
            )
        else:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            new_user = User(
                user_id=message.from_user.id,
                full_name=message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                phone="",
                role="client",
                created_at=datetime.now(timezone.utc),
                city=None,
            )
            await upsert_user(config.database_path, new_user)
            
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?", callback_data="help:show")],
                ]
            )
            
            await message.answer(
                f"–í—ñ—Ç–∞—î–º–æ –≤ —Ç–∞–∫—Å—ñ-–±–æ—Ç—ñ! üöñ\n\n"
                f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}!\n\n"
                "üöï –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ\n"
                "üí∞ –ü—Ä–æ–∑–æ—Ä—ñ —Ü—ñ–Ω–∏\n"
                "‚≠êÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –≤–æ–¥—ñ—ó\n\n"
                "–ü–æ—á–Ω—ñ—Ç—å –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - —Ü–µ –∑–∞–π–º–µ 1 —Ö–≤–∏–ª–∏–Ω—É!",
                reply_markup=kb
            )

    @router.callback_query(F.data == "register:start")
    @router.message(F.text == "üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å")
    async def start_registration(event, state: FSMContext) -> None:
        # –û–±—Ä–æ–±–∫–∞ —è–∫ callback, —Ç–∞–∫ —ñ message
        user_id = event.from_user.id if event.from_user else None
        if not user_id:
            return
        
        user = await get_user_by_id(config.database_path, user_id)
        if user and user.phone and user.city:
            text = f"‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\nüìç –ú—ñ—Å—Ç–æ: {user.city}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}"
            if isinstance(event, CallbackQuery):
                await event.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
                await event.message.answer(text, reply_markup=main_menu_keyboard(is_registered=True))
            else:
                await event.answer(text, reply_markup=main_menu_keyboard(is_registered=True))
            return
        
        if isinstance(event, CallbackQuery):
            await event.answer()
        
        # –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
        text = "üìç <b>–ö—Ä–æ–∫ 1/2: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞–∫—Å—ñ:"
        kb = city_selection_keyboard()
        
        await state.set_state(ClientRegStates.city)
        
        if isinstance(event, CallbackQuery):
            await event.message.answer(text, reply_markup=kb)
        else:
            await event.answer(text, reply_markup=kb)

    @router.callback_query(F.data.startswith("city:"), ClientRegStates.city)
    async def select_city(call: CallbackQuery, state: FSMContext) -> None:
        city = call.data.split(":", 1)[1]
        await state.update_data(city=city)
        await call.answer(f"–û–±—Ä–∞–Ω–æ: {city}")
        
        await state.set_state(ClientRegStates.phone)
        await call.message.answer(
            f"‚úÖ –ú—ñ—Å—Ç–æ: {city}\n\n"
            "üì± <b>–ö—Ä–æ–∫ 2/2: –ù–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.",
            reply_markup=contact_keyboard()
        )

    @router.message(ClientRegStates.phone, F.contact)
    async def save_phone_contact(message: Message, state: FSMContext) -> None:
        if not message.from_user or not message.contact:
            return
        
        data = await state.get_data()
        city = data.get("city")
        phone = message.contact.phone_number
        
        user = User(
            user_id=message.from_user.id,
            full_name=message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
            phone=phone,
            role="client",
            city=city,
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë§ {user.full_name}\n"
            f"üìç {city}\n"
            f"üì± {phone}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ! üöñ",
            reply_markup=main_menu_keyboard(is_registered=True)
        )
        logger.info(f"User {message.from_user.id} registered in {city}")

    @router.message(ClientRegStates.phone)
    async def save_phone_text(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        phone = message.text.strip() if message.text else ""
        if not is_valid_phone(phone):
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É.\n\n–ü—Ä–∏–∫–ª–∞–¥: +380 67 123 45 67")
            return
        
        data = await state.get_data()
        city = data.get("city")
        
        user = User(
            user_id=message.from_user.id,
            full_name=message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
            phone=phone,
            role="client",
            city=city,
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üë§ {user.full_name}\n"
            f"üìç {city}\n"
            f"üì± {phone}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ! üöñ",
            reply_markup=main_menu_keyboard(is_registered=True)
        )
        logger.info(f"User {message.from_user.id} registered in {city}")

    @router.callback_query(F.data == "help:show")
    @router.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    async def show_help(event) -> None:
        help_text = (
            "‚ÑπÔ∏è <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?</b>\n\n"
            "<b>–î–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n"
            "1Ô∏è‚É£ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å (–≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
            "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ\n"
            "3Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n"
            "4Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "5Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –≤–æ–¥—ñ—è!\n\n"
            "<b>–î–ª—è –≤–æ–¥—ñ—ó–≤:</b>\n"
            "‚Ä¢ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤\n"
            "‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –ø—Ä–∏–π–º–µ - –æ—Ç—Ä–∏–º—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
            "üí∞ <b>–¢–∞—Ä–∏—Ñ–∏:</b>\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ + –≤—ñ–¥—Å—Ç–∞–Ω—å + —á–∞—Å\n"
            "‚Ä¢ –ö–æ–º—ñ—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É: 2%\n\n"
            "üìû <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> –ù–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        
        if isinstance(event, CallbackQuery):
            await event.answer()
            await event.message.answer(help_text)
        else:
            await event.answer(help_text)

    @router.message(F.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
    async def show_profile(message: Message) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.")
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="profile:edit:city")],
                [InlineKeyboardButton(text="üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:edit:phone")],
            ]
        )
        
        await message.answer(
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"–Ü–º'—è: {user.full_name}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {user.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime('%d.%m.%Y')}",
            reply_markup=kb
        )

    @router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone and user.city
        
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        is_driver = driver is not None and driver.status == "approved"
        
        await state.clear()
        await message.answer(
            "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=is_registered, is_driver=is_driver)
        )

    return router
