from __future__ import annotations

import logging
import re
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig
from app.storage.db import get_user_by_id, User, upsert_user
from app.handlers.keyboards import main_menu_keyboard

logger = logging.getLogger(__name__)


class ProfileEditStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    edit_city = State()
    edit_phone = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="start")

    @router.message(CommandStart())
    async def on_start(message: Message, state: FSMContext) -> None:
        await state.clear()
        
        if not message.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –ê–î–ú–Ü–ù (–Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
        is_admin = message.from_user.id in config.bot.admin_ids
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –í–û–î–Ü–ô –∞–±–æ —î –∑–∞—è–≤–∫–∞ –≤–æ–¥—ñ—è
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        is_driver = driver is not None and driver.status == "approved"
        has_driver_application = driver is not None  # pending/rejected/approved ‚Üí –∑–∞—è–≤–∫–∞ —ñ—Å–Ω—É—î
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –ö–õ–Ü–Ñ–ù–¢ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ù–ï –≤–æ–¥—ñ–π —ñ –ù–ï –º–∞—î –∑–∞—è–≤–∫–∏, –æ–∫—Ä—ñ–º –∞–¥–º—ñ–Ω–∞)
        user = None
        if (not is_driver and not has_driver_application) or is_admin:
            user = await get_user_by_id(config.database_path, message.from_user.id)
        
        # –ê–î–ú–Ü–ù - –Ω–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        if is_admin:
            text = (
                f"üëã <b>–í—ñ—Ç–∞—é, –ê–¥–º—ñ–Ω {message.from_user.first_name}!</b>\n\n"
                "üîß –í–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ."
            )
            
            await message.answer(
                text,
                reply_markup=main_menu_keyboard(
                    is_registered=True, 
                    is_driver=is_driver, 
                    is_admin=True,
                    has_driver_application=has_driver_application
                )
            )
            return
        
        # –í–û–î–Ü–ô - –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–æ–¥—ñ—è
        if is_driver:
            text = (
                f"üëã <b>–í—ñ—Ç–∞—é, {driver.full_name}!</b>\n\n"
                f"üöó –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ <b>–≤–æ–¥—ñ–π</b>\n"
                f"üìç –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
            )
            
            await message.answer(
                text,
                reply_markup=main_menu_keyboard(
                    is_registered=False, 
                    is_driver=True, 
                    is_admin=False,
                    has_driver_application=False  # –í–æ–¥—ñ–π –≤–∂–µ approved
                )
            )
            return
        
        # –ö–õ–Ü–Ñ–ù–¢ - –∑–≤–∏—á–∞–π–Ω–∏–π flow
        if user and user.phone and user.city:
            # –ü–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
            greeting = "–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, "
            if is_admin:
                greeting = "–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä "
            
            await message.answer(
                f"{greeting}{user.full_name}! üëã\n\n"
                f"üìç –ú—ñ—Å—Ç–æ: {user.city}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=main_menu_keyboard(
                    is_registered=True, 
                    is_driver=is_driver, 
                    is_admin=is_admin,
                    has_driver_application=has_driver_application
                )
            )
        elif user:
            # –ù–µ–ø–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help:show")],
                ]
            )
            await message.answer(
                f"–í—ñ—Ç–∞—î–º–æ, {user.full_name}! üëã\n\n"
                "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:\n"
                "‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ\n"
                "‚Ä¢ –î–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
                "–¶–µ –∑–∞–π–º–µ –º–µ–Ω—à–µ —Ö–≤–∏–ª–∏–Ω–∏! ‚è±",
                reply_markup=kb
            )
        else:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            new_user = User(
                user_id=message.from_user.id,
                full_name=message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                phone="",
                role="client",
                created_at=datetime.now(timezone.utc),
                city=None,
            )
            await upsert_user(config.database_path, new_user)
            
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", callback_data="register:start")],
                    [InlineKeyboardButton(text="‚ÑπÔ∏è –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?", callback_data="help:show")],
                ]
            )
            
            await message.answer(
                f"–í—ñ—Ç–∞—î–º–æ –≤ —Ç–∞–∫—Å—ñ-–±–æ—Ç—ñ! üöñ\n\n"
                f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}!\n\n"
                "üöï –®–≤–∏–¥–∫–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ\n"
                "üí∞ –ü—Ä–æ–∑–æ—Ä—ñ —Ü—ñ–Ω–∏\n"
                "‚≠êÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ –≤–æ–¥—ñ—ó\n\n"
                "–ü–æ—á–Ω—ñ—Ç—å –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - —Ü–µ –∑–∞–π–º–µ 1 —Ö–≤–∏–ª–∏–Ω—É!",
                reply_markup=kb
            )

    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤ –æ–∫—Ä–µ–º–æ–º—É –º–æ–¥—É–ª—ñ registration.py
    # –¢—É—Ç –∑–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é

    @router.callback_query(F.data == "help:show")
    @router.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    async def show_help(event) -> None:
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await event.delete()
        except:
            pass
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É –∫–æ–º—ñ—Å—ñ—é –∑ –ë–î
        from app.storage.db import get_latest_tariff
        tariff = await get_latest_tariff(config.database_path)
        commission_percent = tariff.commission_percent * 100 if tariff else 2.0
        
        help_text = (
            "‚ÑπÔ∏è <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?</b>\n\n"
            "<b>–î–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n"
            "1Ô∏è‚É£ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å (–≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
            "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üöñ –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ\n"
            "3Ô∏è‚É£ –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n"
            "4Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "5Ô∏è‚É£ –û—á—ñ–∫—É–π—Ç–µ –≤–æ–¥—ñ—è!\n\n"
            "<b>–î–ª—è –≤–æ–¥—ñ—ó–≤:</b>\n"
            "‚Ä¢ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º\n"
            "‚Ä¢ –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç—Ä–∏–º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤\n"
            "‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –ø—Ä–∏–π–º–µ - –æ—Ç—Ä–∏–º—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
            "üí∞ <b>–¢–∞—Ä–∏—Ñ–∏:</b>\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ + –≤—ñ–¥—Å—Ç–∞–Ω—å + —á–∞—Å\n"
            f"‚Ä¢ –ö–æ–º—ñ—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É: {commission_percent:.1f}%\n\n"
        )
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–¥–º—ñ–Ω–∞, —è–∫—â–æ —î
        if config.admin_username:
            help_text += f"üìû <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> @{config.admin_username}"
        else:
            help_text += "üìû <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:</b> –ù–∞–ø–∏—à—ñ—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        
        if isinstance(event, CallbackQuery):
            await event.answer()
            await event.message.answer(help_text)
        else:
            await event.answer(help_text)

    @router.message(F.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
    async def show_profile(message: Message) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import get_user_active_order
        active_order = await get_user_active_order(config.database_path, message.from_user.id)
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        buttons = []
        
        if active_order:
            # –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            if active_order.status == "pending":
                # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–µ - –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏
                buttons.append([
                    InlineKeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"order:status:{active_order.id}"),
                    InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"order:cancel_confirm:{active_order.id}")
                ])
            elif active_order.status in ("accepted", "in_progress"):
                # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ –∞–±–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è - –º–æ–∂–Ω–∞ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –≤–æ–¥—ñ—è
                buttons.append([
                    InlineKeyboardButton(text="üöó –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –≤–æ–¥—ñ—è", callback_data=f"order:track:{active_order.id}"),
                    InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –≤–æ–¥—ñ—î–º", callback_data=f"order:contact:{active_order.id}")
                ])
                buttons.append([InlineKeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"order:status:{active_order.id}")])
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
        buttons.append([
            InlineKeyboardButton(text="üìç –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏", callback_data="profile:saved_addresses"),
            InlineKeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="profile:history")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="profile:edit:city"),
            InlineKeyboardButton(text="üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:edit:phone")
        ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –¢–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"–Ü–º'—è: {user.full_name}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {user.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime('%d.%m.%Y')}"
        )
        
        if active_order:
            status_emoji = {
                "pending": "‚è≥",
                "accepted": "‚úÖ",
                "in_progress": "üöó"
            }.get(active_order.status, "‚ùì")
            
            status_text = {
                "pending": "–û—á—ñ–∫—É—î –≤–æ–¥—ñ—è",
                "accepted": "–í–æ–¥—ñ—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ",
                "in_progress": "–í –¥–æ—Ä–æ–∑—ñ"
            }.get(active_order.status, "–ù–µ–≤—ñ–¥–æ–º–æ")
            
            profile_text += f"\n\n{status_emoji} <b>–ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{active_order.id}</b>\n"
            profile_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            profile_text += f"üìç –ó–≤—ñ–¥–∫–∏: {active_order.pickup_address}\n"
            profile_text += f"üìç –ö—É–¥–∏: {active_order.destination_address}"
        
        await message.answer(profile_text, reply_markup=kb)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ—ñ–ª—é
    @router.callback_query(F.data.startswith("order:status:"))
    async def show_order_status(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        from app.storage.db import get_order_by_id, get_driver_by_id
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        status_emoji = {
            "pending": "‚è≥",
            "accepted": "‚úÖ",
            "in_progress": "üöó",
            "completed": "‚úÖ",
            "cancelled": "‚ùå"
        }.get(order.status, "‚ùì")
        
        status_text = {
            "pending": "–û—á—ñ–∫—É—î –≤–æ–¥—ñ—è",
            "accepted": "–í–æ–¥—ñ—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ",
            "in_progress": "–í –¥–æ—Ä–æ–∑—ñ",
            "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            "cancelled": "–°–∫–∞—Å–æ–≤–∞–Ω–æ"
        }.get(order.status, "–ù–µ–≤—ñ–¥–æ–º–æ")
        
        text = (
            f"{status_emoji} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
            f"üìç –ö—É–¥–∏: {order.destination_address}\n"
            f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {order.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        if order.distance_m:
            text += f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {order.distance_m / 1000:.1f} –∫–º"
        
        if order.fare_amount:
            text += f"\nüí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {order.fare_amount:.2f} –≥—Ä–Ω"
        
        if order.driver_id:
            driver = await get_driver_by_id(config.database_path, order.driver_id)
            if driver:
                text += f"\n\nüöó <b>–í–æ–¥—ñ–π:</b>\n"
                text += f"üë§ {driver.full_name}\n"
                text += f"üöô {driver.car_make} {driver.car_model}\n"
                text += f"üî¢ {driver.car_plate}\n"
                text += f"üì± {driver.phone}"
        
        if order.comment:
            text += f"\n\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}"
        
        await call.answer()
        await call.message.answer(text)
    
    @router.callback_query(F.data.startswith("order:cancel_confirm:"))
    async def confirm_order_cancellation(call: CallbackQuery) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"order:cancel_yes:{order_id}"),
                    InlineKeyboardButton(text="‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏", callback_data="order:cancel_no")
                ]
            ]
        )
        
        await call.answer()
        await call.message.answer(
            "‚ùì <b>–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?</b>\n\n"
            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
            reply_markup=kb
        )
    
    @router.callback_query(F.data.startswith("order:cancel_yes:"))
    async def cancel_order_confirmed(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        from app.storage.db import cancel_order_by_client, get_order_by_id
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if order.status != "pending":
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏", show_alert=True)
            return
        
        success = await cancel_order_by_client(config.database_path, order_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=True)
            await call.message.answer("‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥—å-–∫–æ–ª–∏.")
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤
            if order.group_message_id and config.driver_group_chat_id:
                try:
                    await call.bot.edit_message_text(
                        chat_id=config.driver_group_chat_id,
                        message_id=order.group_message_id,
                        text=f"‚ùå <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id} –°–ö–ê–°–û–í–ê–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú</b>\n\n"
                             f"üìç –ú–∞—Ä—à—Ä—É—Ç: {order.pickup_address} ‚Üí {order.destination_address}"
                    )
                except Exception as e:
                    logger.error(f"Failed to update group message: {e}")
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
    
    @router.callback_query(F.data == "order:cancel_no")
    async def cancel_order_declined(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"""
        await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º")
        await call.message.delete()
    
    @router.callback_query(F.data.startswith("order:track:"))
    async def track_driver(call: CallbackQuery) -> None:
        """–í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –≤–æ–¥—ñ—è"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        from app.storage.db import get_order_by_id, get_driver_by_id
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if not order.driver_id:
            await call.answer("‚ùå –í–æ–¥—ñ—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        
        if not driver:
            await call.answer("‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–æ–¥—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        text = (
            f"üöó <b>–í–∞—à –≤–æ–¥—ñ–π:</b>\n\n"
            f"üë§ {driver.full_name}\n"
            f"üöô {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n\n"
            f"üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>\n"
            f"–ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
            f"–ö—É–¥–∏: {order.destination_address}"
        )
        
        if order.distance_m:
            text += f"\n\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {order.distance_m / 1000:.1f} –∫–º"
        
        if order.status == "in_progress":
            text += "\n\nüöó <b>–°—Ç–∞—Ç—É—Å: –í –¥–æ—Ä–æ–∑—ñ</b>"
        elif order.status == "accepted":
            text += "\n\n‚úÖ <b>–°—Ç–∞—Ç—É—Å: –í–æ–¥—ñ–π —ó–¥–µ –¥–æ –≤–∞—Å</b>"
        
        await call.answer()
        await call.message.answer(text)
    
    @router.callback_query(F.data.startswith("order:contact:"))
    async def contact_driver(call: CallbackQuery) -> None:
        """–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –≤–æ–¥—ñ—î–º"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        from app.storage.db import get_order_by_id, get_driver_by_id
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if not order.driver_id:
            await call.answer("‚ùå –í–æ–¥—ñ—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        
        if not driver:
            await call.answer("‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–æ–¥—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        await call.answer()
        await call.message.answer(
            f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç –≤–æ–¥—ñ—è:</b>\n\n"
            f"üë§ {driver.full_name}\n"
            f"üì± {driver.phone}\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—î–≤—ñ –∑–∞ —Ü–∏–º –Ω–æ–º–µ—Ä–æ–º."
        )
    
    @router.callback_query(F.data == "profile:history")
    async def show_order_history(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å"""
        if not call.from_user:
            return
        
        from app.storage.db import get_user_order_history
        orders = await get_user_order_history(config.database_path, call.from_user.id, limit=10)
        
        if not orders:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="profile:back")]
            ])
            await call.answer()
            await call.message.edit_text("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.", reply_markup=kb)
            return
        
        text = "üìú <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        
        for o in orders:
            status_emoji = {
                "pending": "‚è≥ –û—á—ñ–∫—É—î",
                "offered": "üì§ –ó–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ",
                "accepted": "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ",
                "in_progress": "üöó –í –¥–æ—Ä–æ–∑—ñ",
                "completed": "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                "cancelled": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
            }.get(o.status, "‚ùì")
            
            text += (
                f"<b>#{o.id}</b> - {status_emoji}\n"
                f"üìç {o.pickup_address[:30]}...\n"
                f"   ‚Üí {o.destination_address[:30]}...\n"
            )
            if o.fare_amount:
                text += f"üí∞ {o.fare_amount:.0f} –≥—Ä–Ω\n"
            text += "\n"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="profile:back")]
        ])
        
        await call.answer()
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data == "profile:back")
    async def back_to_profile(call: CallbackQuery) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é"""
        if not call.from_user:
            return
        
        # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
        user = await get_user_by_id(config.database_path, call.from_user.id)
        if not user:
            await call.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        from app.storage.db import get_user_active_order
        active_order = await get_user_active_order(config.database_path, call.from_user.id)
        
        buttons = []
        
        if active_order and active_order.status in ("accepted", "in_progress"):
            buttons.append([
                InlineKeyboardButton(text="üöó –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –≤–æ–¥—ñ—è", callback_data=f"order:track:{active_order.id}"),
                InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –≤–æ–¥—ñ—î–º", callback_data=f"order:contact:{active_order.id}")
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton(text="üìç –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏", callback_data="profile:saved_addresses"),
                InlineKeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="profile:history")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="profile:edit:city"),
                InlineKeyboardButton(text="üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:edit:phone")
            ]
        ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"–Ü–º'—è: {user.full_name}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {user.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.created_at.strftime('%d.%m.%Y')}"
        )
        
        await call.answer()
        try:
            await call.message.edit_text(profile_text, reply_markup=kb)
        except:
            await call.message.answer(profile_text, reply_markup=kb)
    
    @router.callback_query(F.data == "profile:saved_addresses")
    async def show_saved_addresses(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏"""
        if not call.from_user:
            return
        
        from app.storage.db import get_user_saved_addresses
        addresses = await get_user_saved_addresses(config.database_path, call.from_user.id)
        
        if not addresses:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="profile:back")]
                ]
            )
            await call.answer()
            try:
                await call.message.edit_text(
                    "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.\n"
                    "–î–æ–¥–∞–π—Ç–µ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                    reply_markup=kb
                )
            except:
                await call.message.answer(
                    "üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∞–¥—Ä–µ—Å.\n"
                    "–î–æ–¥–∞–π—Ç–µ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                    reply_markup=kb
                )
            return
        
        buttons = []
        for addr in addresses:
            buttons.append([InlineKeyboardButton(
                text=f"{addr.emoji} {addr.name}",
                callback_data=f"address:view:{addr.id}"
            )])
        
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥—Ä–µ—Å—É", callback_data="address:add")])
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="profile:back")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await call.answer()
        try:
            await call.message.edit_text(
                f"üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ ({len(addresses)}/10)</b>\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É:",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                f"üìç <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ ({len(addresses)}/10)</b>\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É:",
                reply_markup=kb
            )
    
    @router.callback_query(F.data.startswith("address:view:"))
    async def view_saved_address(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—É –∞–¥—Ä–µ—Å—É"""
        if not call.from_user:
            return
        
        address_id = int(call.data.split(":")[-1])
        
        from app.storage.db import get_saved_address_by_id
        address = await get_saved_address_by_id(config.database_path, address_id, call.from_user.id)
        
        if not address:
            await call.answer("‚ùå –ê–¥—Ä–µ—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìç –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–≤—ñ–¥–∫–∏", callback_data=f"address:use:pickup:{address_id}"),
                    InlineKeyboardButton(text="üìç –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫—É–¥–∏", callback_data=f"address:use:dest:{address_id}")
                ],
                [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"address:edit:{address_id}")],
                [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"address:delete_confirm:{address_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile:saved_addresses")]
            ]
        )
        
        await call.answer()
        await call.message.answer(
            f"{address.emoji} <b>{address.name}</b>\n\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: {address.address}\n"
            f"üìÖ –î–æ–¥–∞–Ω–æ: {address.created_at.strftime('%d.%m.%Y')}",
            reply_markup=kb
        )
    
    @router.callback_query(F.data.startswith("address:delete_confirm:"))
    async def confirm_delete_address(call: CallbackQuery) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
        if not call.from_user:
            return
        
        address_id = int(call.data.split(":")[-1])
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"address:delete_yes:{address_id}"),
                    InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"address:view:{address_id}")
                ]
            ]
        )
        
        await call.answer()
        await call.message.answer(
            "‚ùì <b>–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥—Ä–µ—Å—É?</b>\n\n"
            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∞–¥—Ä–µ—Å—É?",
            reply_markup=kb
        )
    
    @router.callback_query(F.data.startswith("address:delete_yes:"))
    async def delete_address_confirmed(call: CallbackQuery) -> None:
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ"""
        if not call.from_user:
            return
        
        address_id = int(call.data.split(":")[-1])
        
        from app.storage.db import delete_saved_address
        success = await delete_saved_address(config.database_path, address_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ê–¥—Ä–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
            # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å –∑–Ω–æ–≤—É
            await show_saved_addresses(call)
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", show_alert=True)
    
    async def show_profile_history(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å"""
        if not call.from_user:
            return
        
        from app.storage.db import get_user_order_history
        orders = await get_user_order_history(config.database_path, call.from_user.id, limit=10)
        
        if not orders:
            await call.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å", show_alert=True)
            return
        
        text = "üìú <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å</b>\n\n"
        
        for order in orders:
            status_emoji = {
                "pending": "‚è≥",
                "accepted": "‚úÖ",
                "in_progress": "üöó",
                "completed": "‚úÖ",
                "cancelled": "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += f"{status_emoji} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}</b>\n"
            text += f"üìç {order.pickup_address} ‚Üí {order.destination_address}\n"
            text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if order.fare_amount:
                text += f"üí∞ {order.fare_amount:.2f} –≥—Ä–Ω\n"
            
            text += "\n"
        
        await call.answer()
        await call.message.answer(text)
    
    @router.callback_query(F.data == "open_driver_panel")
    async def open_driver_panel(call: CallbackQuery) -> None:
        """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        await call.answer("üöó –í—ñ–¥–∫—Ä–∏–≤–∞—é –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è...")
        
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        
        if not driver or driver.status != "approved":
            await call.answer("‚ùå –í–∏ –Ω–µ —î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–º –≤–æ–¥—ñ—î–º.", show_alert=True)
            return
        
        from app.storage.db import get_driver_earnings_today, get_driver_unpaid_commission
        
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, call.from_user.id)
        net_earnings = earnings - commission_owed
        
        online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"üë§ {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π: {net_earnings:.2f} –≥—Ä–Ω\n\n"
            f"–°—Ç–∞—Ç—É—Å: {online_status}\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
            "–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º, —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!"
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
        is_admin = call.from_user.id in config.bot.admin_ids
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ" –∞–±–æ "–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞"
        try:
            await call.message.delete()
        except:
            pass
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await call.message.answer(
            text,
            reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_admin),
            parse_mode="HTML"
        )

    # –í–ò–î–ê–õ–ï–ù–û –û–ë–†–û–ë–ù–ò–ö "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è" - –≤—ñ–Ω —Ç–µ–ø–µ—Ä —Ç—ñ–ª—å–∫–∏ –≤ driver_panel.py!
    # –¶–µ –≤–∏–ø—Ä–∞–≤–ª—è—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    
    # –ö–æ–º–∞–Ω–¥–∞ /driver –∑–∞–ª–∏—à–µ–Ω–∞ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    @router.message(Command("driver"))
    async def quick_driver_command(message: Message) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /driver - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É"""
        if not message.from_user:
            return
        
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        
        if not driver:
            await message.answer("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
            return
        
        if driver.status != "approved":
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ.")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É
        is_admin = message.from_user.id in config.bot.admin_ids
        await message.answer(
            "üöó –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>'üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è'</b> –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É",
            reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_admin)
        )
    
    @router.callback_query(F.data == "driver_to_client:confirm")
    async def confirm_driver_to_client(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –≤–æ–¥—ñ—è —Ç–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user:
            return
        
        await call.answer()
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç –≤–æ–¥—ñ—è –∑ –ë–î
        from app.storage.db import delete_driver_account
        success = await delete_driver_account(config.database_path, call.from_user.id)
        
        if not success:
            await call.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –≤–æ–¥—ñ—è.\n\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
        try:
            await call.message.delete()
        except:
            pass
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ FSM state
        await state.clear()
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç (–≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
        try:
            for i in range(50):
                try:
                    await call.bot.delete_message(
                        chat_id=call.from_user.id,
                        message_id=call.message.message_id - i
                    )
                except:
                    pass
        except:
            pass
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–µ –º–µ–Ω—é (—è–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        from app.handlers.keyboards import main_menu_keyboard
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –±–∞–∑–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        user = await get_user_by_id(config.database_path, call.from_user.id)
        
        if not user or not user.phone or not user.city:
            # –ù–µ–º–∞—î –±–∞–∑–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å", callback_data="register:start")]
                ]
            )
            
            await call.bot.send_message(
                chat_id=call.from_user.id,
                text=(
                    "üëã <b>–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ —Ç–∞–∫—Å—ñ!</b>\n\n"
                    "‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç –≤–æ–¥—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º —è–∫ –∫–ª—ñ—î–Ω—Ç.\n\n"
                    "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:"
                ),
                reply_markup=kb
            )
        else:
            # –Ñ –±–∞–∑–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –ø–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞
            await call.bot.send_message(
                chat_id=call.from_user.id,
                text=(
                    "‚úÖ <b>–ê–∫–∞—É–Ω—Ç –≤–æ–¥—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!</b>\n\n"
                    f"üë§ –Ü–º'—è: {user.full_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {user.city}\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º —è–∫ –∫–ª—ñ—î–Ω—Ç.\n\n"
                    "üöñ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–∫—Å—ñ!"
                ),
                reply_markup=main_menu_keyboard(is_registered=True, is_driver=False, is_admin=False)
            )
    
    @router.callback_query(F.data == "driver_to_client:cancel")
    async def cancel_driver_to_client(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user:
            return
        
        await call.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ", show_alert=False)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
        try:
            await call.message.delete()
        except:
            await call.message.edit_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
    @router.message(Command("client"))
    @router.message(F.text == "üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞")
    async def quick_client_panel(message: Message) -> None:
        """–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –∫–ª—ñ—î–Ω—Ç–∞"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await message.delete()
        except:
            pass
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–æ–¥—ñ–π
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        
        # –Ø–ö–©–û –¶–ï –í–û–î–Ü–ô - –ü–û–ö–ê–ó–ê–¢–ò –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø
        if driver and driver.status == "approved":
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="driver_to_client:confirm")],
                    [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="driver_to_client:cancel")]
                ]
            )
            
            await message.answer(
                "‚ö†Ô∏è <b>–£–í–ê–ì–ê!</b>\n\n"
                "–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π.\n\n"
                "–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ <b>–∫–∞–±—ñ–Ω–µ—Ç—É –∫–ª—ñ—î–Ω—Ç–∞</b>,\n"
                "–≤–∞—à <b>–∞–∫–∞—É–Ω—Ç –≤–æ–¥—ñ—è –±—É–¥–µ –í–ò–î–ê–õ–ï–ù–û</b> –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.\n\n"
                "–¶–µ –æ–∑–Ω–∞—á–∞—î:\n"
                "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –≤–æ–¥—ñ—è\n"
                "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ—ó–∑–¥–æ–∫\n"
                "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–∫—É\n"
                "‚Ä¢ –ù–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏\n\n"
                "‚ö†Ô∏è <b>–¶—è –¥—ñ—è –ù–ï–ó–í–û–†–û–¢–ù–ê!</b>\n\n"
                "–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?\n\n"
                "<i>–ó –ø–æ–≤–∞–≥–æ—é, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –±–æ—Ç–∞</i> ü§ù",
                reply_markup=kb
            )
            return
        
        # –Ø–ö–©–û –ù–ï –í–û–î–Ü–ô - –ü–û–ö–ê–ó–ê–¢–ò –ö–ê–ë–Ü–ù–ï–¢ –ö–õ–Ü–Ñ–ù–¢–ê –Ø–ö –ó–ê–†–ê–ó
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user or not user.phone or not user.city:
            await message.answer("‚ùå –ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–±—ñ–Ω–µ—Ç—É –∫–ª—ñ—î–Ω—Ç–∞.\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–¥–º—ñ–Ω
        is_admin = message.from_user.id in config.bot.admin_ids
        is_driver = False
        
        await message.answer(
            f"üë§ <b>–ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
            f"–í—ñ—Ç–∞—î–º–æ, {user.full_name}!\n\n"
            f"üìç –ú—ñ—Å—Ç–æ: {user.city}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver, is_admin=is_admin)
        )
    
    @router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        is_registered = user is not None and user.phone and user.city
        
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        is_driver = driver is not None and driver.status == "approved"
        
        await state.clear()
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
        is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
        
        await message.answer(
            "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=is_registered, is_driver=is_driver, is_admin=is_admin)
        )

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é
    @router.callback_query(F.data == "profile:edit:city")
    async def edit_city_start(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∞"""
        if not call.from_user:
            return
        
        from app.config.config import AVAILABLE_CITIES
        
        buttons = []
        for city in AVAILABLE_CITIES:
            buttons.append([InlineKeyboardButton(text=city, callback_data=f"city:select:{city}")])
        
        buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="profile:back")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await state.set_state(ProfileEditStates.edit_city)
        await call.answer()
        try:
            await call.message.edit_text(
                "üèô <b>–û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:</b>\n\n"
                "–ú—ñ—Å—Ç–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –¥–ª—è –ø–æ—à—É–∫—É –≤–æ–¥—ñ—ó–≤ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                "üèô <b>–û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:</b>\n\n"
                "–ú—ñ—Å—Ç–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –¥–ª—è –ø–æ—à—É–∫—É –≤–æ–¥—ñ—ó–≤ —É –≤–∞—à–æ–º—É —Ä–µ–≥—ñ–æ–Ω—ñ.",
                reply_markup=kb
            )
    
    @router.callback_query(F.data.startswith("city:select:"), ProfileEditStates.edit_city)
    async def save_new_city(call: CallbackQuery, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–µ –º—ñ—Å—Ç–æ"""
        if not call.from_user:
            return
        
        city = call.data.split("city:select:")[-1]
        
        user = await get_user_by_id(config.database_path, call.from_user.id)
        if not user:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            await state.clear()
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ
        updated_user = User(
            user_id=user.user_id,
            full_name=user.full_name,
            phone=user.phone,
            role=user.role,
            city=city,
            language=user.language,
            created_at=user.created_at
        )
        
        await upsert_user(config.database_path, updated_user)
        await state.clear()
        
        await call.answer(f"‚úÖ –ú—ñ—Å—Ç–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {city}")
        
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é
        await back_to_profile(call)
    
    @router.callback_query(F.data == "profile:edit:phone")
    async def edit_phone_start(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        if not call.from_user:
            return
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="profile:back")]
        ])
        
        await state.set_state(ProfileEditStates.edit_phone)
        await call.answer()
        try:
            await call.message.edit_text(
                "üì± <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567",
                reply_markup=kb
            )
        except:
            await call.message.answer(
                "üì± <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567",
                reply_markup=kb
            )
    
    @router.message(ProfileEditStates.edit_phone)
    async def save_new_phone(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω"""
        if not message.from_user or not message.text:
            return
        
        phone = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if not re.match(r'^\+380\d{9}$', phone):
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="profile:back")]
            ])
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: +380XXXXXXXXX\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                reply_markup=kb
            )
            return
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if not user:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
            await state.clear()
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        updated_user = User(
            user_id=user.user_id,
            full_name=user.full_name,
            phone=phone,
            role=user.role,
            city=user.city,
            language=user.language,
            created_at=user.created_at
        )
        
        await upsert_user(config.database_path, updated_user)
        await state.clear()
        
        await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {phone}")
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
        from app.storage.db import get_user_active_order
        active_order = await get_user_active_order(config.database_path, message.from_user.id)
        
        buttons = []
        if active_order and active_order.status in ("accepted", "in_progress"):
            buttons.append([
                InlineKeyboardButton(text="üöó –í—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –≤–æ–¥—ñ—è", callback_data=f"order:track:{active_order.id}"),
                InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –≤–æ–¥—ñ—î–º", callback_data=f"order:contact:{active_order.id}")
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton(text="üìç –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏", callback_data="profile:saved_addresses"),
                InlineKeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="profile:history")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="profile:edit:city"),
                InlineKeyboardButton(text="üì± –ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="profile:edit:phone")
            ]
        ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
            f"–Ü–º'—è: {updated_user.full_name}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {updated_user.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {updated_user.phone}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {updated_user.created_at.strftime('%d.%m.%Y')}"
        )
        
        await message.answer(profile_text, reply_markup=kb)
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –æ–ø–ª–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏
    @router.callback_query(F.data.startswith("pay:"))
    async def show_payment_info(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –æ–ø–ª–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[-1])
        
        from app.storage.db import get_order_by_id, get_driver_by_id
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if not order.driver_id:
            await call.answer("‚ùå –í–æ–¥—ñ—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        
        if not driver:
            await call.answer("‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–æ–¥—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        payment_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ—ó–∑–¥–∫–∏ #{order.id}</b>\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {order.fare_amount:.0f} –≥—Ä–Ω\n\n"
        )
        
        if order.payment_method == "card":
            if driver.card_number:
                payment_text += (
                    f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞ –≤–æ–¥—ñ—è:</b>\n"
                    f"<code>{driver.card_number}</code>\n\n"
                    f"üë§ {driver.full_name}\n\n"
                    f"‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏"
                )
            else:
                payment_text += (
                    f"‚ö†Ô∏è <b>–í–æ–¥—ñ–π –Ω–µ –≤–∫–∞–∑–∞–≤ –∫–∞—Ä—Ç–∫—É</b>\n\n"
                    f"–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –≤–æ–¥—ñ—î–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤:\n"
                    f"üì± {driver.phone}"
                )
        else:
            payment_text += (
                f"üíµ <b>–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é</b>\n\n"
                f"–†–æ–∑—Ä–∞—Ö—É–π—Ç–µ—Å—å –∑ –≤–æ–¥—ñ—î–º –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏."
            )
        
        await call.answer()
        await call.message.answer(payment_text)
    
    return router
