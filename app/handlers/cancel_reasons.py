"""–û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–∏—á–∏–Ω —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
from __future__ import annotations

import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from app.config.config import AppConfig
from app.storage.db import (
    get_order_by_id,
    cancel_order_by_client,
)

logger = logging.getLogger(__name__)


CANCEL_REASONS = {
    "wait_long": "‚è∞ –í–æ–¥—ñ–π –¥–æ–≤–≥–æ —ó–¥–µ",
    "wrong_address": "üìç –ü–æ–º–∏–ª–∫–∞ –≤ –∞–¥—Ä–µ—Å—ñ",
    "changed_mind": "ü§∑ –ü–µ—Ä–µ–¥—É–º–∞–≤",
    "found_other": "üöï –ó–Ω–∞–π—à–æ–≤ —ñ–Ω—à–µ —Ç–∞–∫—Å—ñ",
    "high_price": "üí∏ –ó–∞–Ω–∞–¥—Ç–æ –¥–æ—Ä–æ–≥–æ",
    "other": "‚ùì –Ü–Ω—à–µ"
}


def create_router(config: AppConfig) -> Router:
    router = Router(name="cancel_reasons")

    @router.callback_query(F.data.startswith("cancel_with_reason:"))
    async def ask_cancel_reason(call: CallbackQuery) -> None:
        """–ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–ª—ñ—î–Ω—Ç—É
        order = await get_order_by_id(config.database_path, order_id)
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        if order.status != "pending":
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω–∏
        buttons = []
        for reason_code, reason_text in CANCEL_REASONS.items():
            buttons.append([
                InlineKeyboardButton(
                    text=reason_text,
                    callback_data=f"confirm_cancel:{order_id}:{reason_code}"
                )
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await call.answer()
        await call.message.answer(
            "‚ùå <b>–ß–æ–º—É –≤–∏ —Å–∫–∞—Å–æ–≤—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?</b>\n\n"
            "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å!",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("confirm_cancel:"))
    async def confirm_cancel_with_reason(call: CallbackQuery) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑ –ø—Ä–∏—á–∏–Ω–æ—é"""
        if not call.from_user:
            return
        
        parts = call.data.split(":", 2)
        order_id = int(parts[1])
        reason_code = parts[2]
        reason_text = CANCEL_REASONS.get(reason_code, "–Ü–Ω—à–µ")
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success = await cancel_order_by_client(config.database_path, order_id, call.from_user.id)
        
        if success:
            await call.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏
            logger.info(f"Order #{order_id} cancelled by client {call.from_user.id}. Reason: {reason_text}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await call.message.edit_text(
                f"‚ùå <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}\n\n"
                "–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫!"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤
            order = await get_order_by_id(config.database_path, order_id)
            if config.driver_group_chat_id and order and order.group_message_id:
                try:
                    await call.bot.edit_message_text(
                        f"‚ùå <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id} –°–ö–ê–°–û–í–ê–ù–û –ö–õ–Ü–Ñ–ù–¢–û–ú</b>\n\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: {reason_text}",
                        chat_id=config.driver_group_chat_id,
                        message_id=order.group_message_id
                    )
                except Exception as e:
                    logger.error(f"Failed to update group message: {e}")
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

    return router
