"""–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞"""
from __future__ import annotations

import hashlib
import logging
from datetime import datetime, timezone
from typing import Optional

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.config.config import AppConfig
from app.storage.db import (
    get_user_by_id,
    get_user_referral_stats,
    create_referral_code,
    get_referral_code,
    apply_referral_code,
)

logger = logging.getLogger(__name__)


def generate_referral_code(user_id: int) -> str:
    """–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥"""
    hash_str = hashlib.md5(f"taxi_{user_id}_{datetime.now().timestamp()}".encode()).hexdigest()
    return f"TAXI{hash_str[:6].upper()}"


def create_router(config: AppConfig) -> Router:
    router = Router(name="referral")

    @router.message(F.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞")
    @router.callback_query(F.data == "referral:show")
    async def show_referral_program(event) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É"""
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ø–æ–¥—ñ—ó (message –∞–±–æ callback)
        if isinstance(event, Message):
            message = event
            user_id = event.from_user.id if event.from_user else 0
        else:  # CallbackQuery
            message = event.message
            user_id = event.from_user.id if event.from_user else 0
            await event.answer()
        
        if not user_id:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        user = await get_user_by_id(config.database_path, user_id)
        if not user:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å!")
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
        ref_code = await get_referral_code(config.database_path, user_id)
        if not ref_code:
            ref_code = generate_referral_code(user_id)
            await create_referral_code(config.database_path, user_id, ref_code)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await get_user_referral_stats(config.database_path, user_id)
        referred_count = stats.get('referred_count', 0)
        total_bonus = stats.get('total_bonus', 0)
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        bot_username = (await message.bot.me()).username
        referral_link = f"https://t.me/{bot_username}?start={ref_code}"
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", switch_inline_query=f"–ó–∞–º–æ–≤–ª—è–π —Ç–∞–∫—Å—ñ –∑—ñ –∑–Ω–∏–∂–∫–æ—é! {referral_link}")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="referral:show")]
            ]
        )
        
        text = (
            "üéÅ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞</b>\n\n"
            f"–í–∞—à –∫–æ–¥: <code>{ref_code}</code>\n"
            f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {referral_link}\n\n"
            "üí∞ <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?</b>\n"
            "1Ô∏è‚É£ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–≥–æ–º\n"
            "2Ô∏è‚É£ –î—Ä—É–≥ —Ä–µ—î—Å—Ç—Ä—É—î—Ç—å—Å—è —ñ —Ä–æ–±–∏—Ç—å –ø–µ—Ä—à—É –ø–æ—ó–∑–¥–∫—É\n"
            "3Ô∏è‚É£ –í—ñ–Ω –æ—Ç—Ä–∏–º—É—î <b>-50 –≥—Ä–Ω</b> –Ω–∞ –ø–µ—Ä—à—É –ø–æ—ó–∑–¥–∫—É\n"
            "4Ô∏è‚É£ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ <b>-30 –≥—Ä–Ω</b> –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–æ—ó–∑–¥–∫—É\n\n"
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {referred_count}\n"
            f"üíµ –û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonus:.0f} –≥—Ä–Ω\n\n"
            "üéâ <i>–ù–µ–º–∞—î –ª—ñ–º—ñ—Ç—É –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω—å!</i>"
        )
        
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

    @router.message(F.text.startswith("/start "))
    async def handle_referral_start(message: Message) -> None:
        """–û–±—Ä–æ–±–∏—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
        if not message.from_user or not message.text:
            return
        
        ref_code = message.text.split(" ", 1)[1].strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
        if ref_code.startswith("TAXI"):
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π
            user = await get_user_by_id(config.database_path, message.from_user.id)
            if user:
                await message.answer(
                    "‚ÑπÔ∏è –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n"
                    "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä—à—ñ–π —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
                )
                return
            
            # –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
            success = await apply_referral_code(config.database_path, message.from_user.id, ref_code)
            
            if success:
                await message.answer(
                    "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                    "–í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é!\n"
                    "üí∞ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ <b>-50 –≥—Ä–Ω</b> –Ω–∞ –ø–µ—Ä—à—É –ø–æ—ó–∑–¥–∫—É!\n\n"
                    "–ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å üëá"
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥ –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π.\n"
                    "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–≤–∏—á–∞–π–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º."
                )

    return router
