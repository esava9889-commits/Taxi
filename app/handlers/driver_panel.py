"""–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è - –ù–û–í–ê –í–ï–†–°–Ü–Ø"""
from __future__ import annotations

import logging
from datetime import datetime, timezone, timedelta

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_driver_by_tg_user_id,
    get_driver_by_id,
    get_order_by_id,
    accept_order,
    start_order,
    complete_order,
    get_driver_earnings_today,
    get_driver_unpaid_commission,
    get_driver_order_history,
    mark_commission_paid,
    Payment,
    insert_payment,
    get_latest_tariff,
    update_driver_location,
    set_driver_online_status,
    get_online_drivers_count,
    get_driver_tips_total,
)
from app.utils.maps import generate_static_map_url, get_distance_and_duration

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver_panel")

    @router.message(F.text == "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
    async def driver_menu(message: Message) -> None:
        """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π –∞–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º' –¥–ª—è –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏."
            )
            return
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net_earnings = earnings - commission_owed
        
        # –ß–∞–π–æ–≤—ñ
        tips_total = 0.0
        try:
            tips_total = await get_driver_tips_total(config.database_path, message.from_user.id)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∞–π–æ–≤–∏—Ö: {e}")
        
        # –°—Ç–∞—Ç—É—Å
        online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        location_status = "üìç –ê–∫—Ç–∏–≤–Ω–∞" if driver.last_lat and driver.last_lon else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # –û–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó
        online_count = 0
        try:
            online_count = await get_online_drivers_count(config.database_path, driver.city)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É: {e}")
        
        # –¢–µ–∫—Å—Ç –ø–∞–Ω–µ–ª—ñ
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {online_status}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: {location_status}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online_count}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n"
            f"üíù –ß–∞–π–æ–≤—ñ (–≤—Å—å–æ–≥–æ): {tips_total:.2f} –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
            "–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º, —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!\n\n"
            "üí° <i>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏ –±–∞—á–∏—Ç–∏ –¥–µ –≤–∏</i>"
        )
        
        # INLINE –∫–Ω–æ–ø–∫–∏ (–ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º)
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="driver:toggle_online"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="driver:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="driver:refresh")]
            ]
        )
        
        # REPLY –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ (–≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É)
        reply_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                [KeyboardButton(text="üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")],
                [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
            ],
            resize_keyboard=True
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        await message.answer(text, reply_markup=inline_kb)
        await message.answer("üëá <b>–ú–µ–Ω—é:</b>", reply_markup=reply_kb)

    @router.callback_query(F.data == "driver:toggle_online")
    async def toggle_online(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"""
        if not call.from_user or not call.message:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å
        new_status = not driver.online
        await set_driver_online_status(config.database_path, driver.id, new_status)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if new_status:
            online_count = await get_online_drivers_count(config.database_path, driver.city)
            await call.answer(f"‚úÖ –í–∏ –æ–Ω–ª–∞–π–Ω! –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online_count}", show_alert=True)
        else:
            await call.answer("üî¥ –í–∏ –æ—Ñ–ª–∞–π–Ω", show_alert=True)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, call.from_user.id)
        net_earnings = earnings - commission_owed
        
        tips_total = 0.0
        try:
            tips_total = await get_driver_tips_total(config.database_path, call.from_user.id)
        except:
            pass
        
        online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        location_status = "üìç –ê–∫—Ç–∏–≤–Ω–∞" if driver.last_lat and driver.last_lon else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        online_count = 0
        try:
            online_count = await get_online_drivers_count(config.database_path, driver.city)
        except:
            pass
        
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {online_status}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: {location_status}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online_count}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n"
            f"üíù –ß–∞–π–æ–≤—ñ (–≤—Å—å–æ–≥–æ): {tips_total:.2f} –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
            "–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º, —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!\n\n"
            "üí° <i>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏ –±–∞—á–∏—Ç–∏ –¥–µ –≤–∏</i>"
        )
        
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="driver:toggle_online"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="driver:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="driver:refresh")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=inline_kb)

    @router.callback_query(F.data == "driver:refresh")
    async def refresh_panel(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å"""
        if not call.from_user or not call.message:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, call.from_user.id)
        net_earnings = earnings - commission_owed
        
        tips_total = 0.0
        try:
            tips_total = await get_driver_tips_total(config.database_path, call.from_user.id)
        except:
            pass
        
        online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        location_status = "üìç –ê–∫—Ç–∏–≤–Ω–∞" if driver.last_lat and driver.last_lon else "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        online_count = 0
        try:
            online_count = await get_online_drivers_count(config.database_path, driver.city)
        except:
            pass
        
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {online_status}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: {location_status}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online_count}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n"
            f"üíù –ß–∞–π–æ–≤—ñ (–≤—Å—å–æ–≥–æ): {tips_total:.2f} –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
            "–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º, —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!\n\n"
            "üí° <i>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏ –±–∞—á–∏—Ç–∏ –¥–µ –≤–∏</i>"
        )
        
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="driver:toggle_online"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="driver:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="driver:refresh")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=inline_kb)
        await call.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ!")

    @router.callback_query(F.data == "driver:stats")
    async def show_stats(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not call.from_user:
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="stats:today")],
                [InlineKeyboardButton(text="üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="stats:week")],
                [InlineKeyboardButton(text="üìÖ –ú—ñ—Å—è—Ü—å", callback_data="stats:month")],
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="driver:refresh")]
            ]
        )
        
        await call.message.edit_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:",
            reply_markup=kb
        )
        await call.answer()

    @router.callback_query(F.data.startswith("stats:"))
    async def show_period_stats(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥"""
        if not call.from_user or not call.message:
            return
        
        period = call.data.split(":")[1]
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä—ñ–æ–¥
        now = datetime.now(timezone.utc)
        if period == "today":
            start = now.replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "—Å—å–æ–≥–æ–¥–Ω—ñ"
        elif period == "week":
            start = now - timedelta(days=7)
            period_name = "–∑–∞ —Ç–∏–∂–¥–µ–Ω—å"
        elif period == "month":
            start = now - timedelta(days=30)
            period_name = "–∑–∞ –º—ñ—Å—è—Ü—å"
        else:
            start = now
            period_name = "–≤—Å—å–æ–≥–æ —á–∞—Å—É"
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=1000)
        period_orders = [o for o in orders if o.created_at >= start and o.status == 'completed']
        
        total_earnings = sum(o.fare_amount or 0 for o in period_orders)
        total_trips = len(period_orders)
        avg_fare = total_earnings / total_trips if total_trips > 0 else 0
        
        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}</b>\n\n"
            f"üöó –ü–æ—ó–∑–¥–æ–∫: {total_trips}\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {total_earnings:.2f} –≥—Ä–Ω\n"
            f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_fare:.2f} –≥—Ä–Ω\n"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="driver:stats")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=kb)
        await call.answer()

    # –†–µ—à—Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ (–∑–∞—Ä–æ–±—ñ—Ç–æ–∫, –∫–æ–º—ñ—Å—ñ—è, –ª–æ–∫–∞—Ü—ñ—è —ñ —Ç.–¥.) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª—É
    # –î–æ–¥–∞—é —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ:

    @router.message(F.location)
    async def update_location(message: Message) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é"""
        if not message.from_user or not message.location:
            return
        
        await update_driver_location(
            config.database_path,
            message.from_user.id,
            message.location.latitude,
            message.location.longitude
        )
        
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    @router.message(F.text == "üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫")
    async def show_earnings(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        earnings_today, commission_today = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net_today = earnings_today - commission_today
        
        # –ó–∞ —Ç–∏–∂–¥–µ–Ω—å
        orders = await get_driver_order_history(config.database_path, message.from_user.id, limit=1000)
        week_ago = datetime.now(timezone.utc) - timedelta(days=7)
        week_orders = [o for o in orders if o.created_at >= week_ago and o.status == 'completed']
        earnings_week = sum(o.fare_amount or 0 for o in week_orders)
        
        # –ó–∞ –º—ñ—Å—è—Ü—å
        month_ago = datetime.now(timezone.utc) - timedelta(days=30)
        month_orders = [o for o in orders if o.created_at >= month_ago and o.status == 'completed']
        earnings_month = sum(o.fare_amount or 0 for o in month_orders)
        
        text = (
            f"üí∞ <b>–í–∞—à –∑–∞—Ä–æ–±—ñ—Ç–æ–∫</b>\n\n"
            f"üìÖ <b>–°—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
            f"–ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings_today:.2f} –≥—Ä–Ω\n"
            f"–ö–æ–º—ñ—Å—ñ—è: -{commission_today:.2f} –≥—Ä–Ω\n"
            f"–ß–∏—Å—Ç–∏–π: {net_today:.2f} –≥—Ä–Ω\n\n"
            f"üìÖ <b>–ó–∞ —Ç–∏–∂–¥–µ–Ω—å:</b> {earnings_week:.2f} –≥—Ä–Ω\n"
            f"üìÖ <b>–ó–∞ –º—ñ—Å—è—Ü—å:</b> {earnings_month:.2f} –≥—Ä–Ω\n"
        )
        
        await message.answer(text)

    @router.message(F.text == "üí≥ –ö–æ–º—ñ—Å—ñ—è")
    async def show_commission(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—é"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, message.from_user.id)
        
        if unpaid > 0:
            # QR –∫–æ–¥
            try:
                from app.utils.qr_generator import generate_payment_qr
                from aiogram.types import BufferedInputFile
                
                qr = generate_payment_qr(config.payment_card or "4149499901234567", unpaid, f"–ö–æ–º—ñ—Å—ñ—è –≤–æ–¥—ñ—è")
                photo = BufferedInputFile(qr.read(), filename="commission_qr.png")
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤", callback_data="mark_commission_paid")]
                    ]
                )
                
                await message.answer_photo(
                    photo=photo,
                    caption=(
                        f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏</b>\n\n"
                        f"üí∏ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n\n"
                        f"üì± –í—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç–∏\n"
                        f"–∞–±–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n"
                        f"<code>{config.payment_card or '4149499901234567'}</code>\n\n"
                        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤'"
                    ),
                    reply_markup=kb
                )
            except Exception as e:
                logger.error(f"QR error: {e}")
                await message.answer(
                    f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏:</b> {unpaid:.2f} –≥—Ä–Ω\n\n"
                    f"–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n<code>{config.payment_card or '4149499901234567'}</code>"
                )
        else:
            await message.answer("‚úÖ –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á–µ–Ω–∞!")

    @router.callback_query(F.data == "mark_commission_paid")
    async def mark_paid(call: CallbackQuery) -> None:
        """–í—ñ–¥–º—ñ—Ç–∏—Ç–∏ –∫–æ–º—ñ—Å—ñ—é —Å–ø–ª–∞—á–µ–Ω–æ—é"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, call.from_user.id)
        
        if unpaid > 0:
            payment = Payment(
                id=None,
                driver_id=driver.id,
                amount=unpaid,
                payment_type="commission",
                created_at=datetime.now(timezone.utc)
            )
            await insert_payment(config.database_path, payment)
            await mark_commission_paid(config.database_path, call.from_user.id)
            
            await call.answer("‚úÖ –ö–æ–º—ñ—Å—ñ—é –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ —Å–ø–ª–∞—á–µ–Ω—É!", show_alert=True)
            if call.message:
                await call.message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
        else:
            await call.answer("–ö–æ–º—ñ—Å—ñ—è –≤–∂–µ —Å–ø–ª–∞—á–µ–Ω–∞", show_alert=True)

    @router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫")
    async def show_history(message: Message) -> None:
        """–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        orders = await get_driver_order_history(config.database_path, message.from_user.id, limit=10)
        
        if not orders:
            await message.answer("üìú –ü–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫")
            return
        
        text = "üìú <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ—ó–∑–¥–æ–∫:</b>\n\n"
        
        for i, order in enumerate(orders, 1):
            status_emoji = {
                'completed': '‚úÖ',
                'cancelled_by_client': '‚ùå',
                'cancelled_by_driver': '‚ùå'
            }.get(order.status, '‚è≥')
            
            text += (
                f"{i}. {status_emoji} {order.pickup_address[:30]}... ‚Üí {order.destination_address[:30]}...\n"
                f"   üí∞ {order.fare_amount or 0:.0f} –≥—Ä–Ω | "
                f"{order.created_at.strftime('%d.%m %H:%M')}\n\n"
            )
        
        await message.answer(text)

    @router.message(F.text == "üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    async def show_analytics_menu(message: Message) -> None:
        """–ú–µ–Ω—é —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è∞ –ö—Ä–∞—â—ñ –≥–æ–¥–∏–Ω–∏", callback_data="analytics:best_hours")],
                [InlineKeyboardButton(text="üó∫Ô∏è –¢–æ–ø-–º–∞—Ä—à—Ä—É—Ç–∏", callback_data="analytics:top_routes")],
                [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–æ–±—ñ—Ç–∫—É", callback_data="analytics:forecast")]
            ]
        )
        
        await message.answer("üìä <b>–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å:", reply_markup=kb)

    return router

