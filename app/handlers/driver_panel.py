from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_driver_by_tg_user_id,
    get_driver_by_id,
    get_order_by_id,
    accept_order,
    start_order,
    complete_order,
    get_driver_earnings_today,
    get_driver_unpaid_commission,
    get_driver_order_history,
    mark_commission_paid,
    Payment,
    insert_payment,
    get_latest_tariff,
    update_driver_location,
)
from app.utils.maps import generate_static_map_url, get_distance_and_duration

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver_panel")

    @router.message(F.text == "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
    async def driver_menu(message: Message) -> None:
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π –∞–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º' –¥–ª—è –ø–æ–¥–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏."
            )
            return
        
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net_earnings = earnings - commission_owed
        
        online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {online_status}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
            "–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º, —â–æ–± –π–æ–≥–æ –æ—Ç—Ä–∏–º–∞—Ç–∏!"
        )
        
        await message.answer(text)

    @router.message(F.text == "üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫")
    async def show_earnings(message: Message) -> None:
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        earnings, commission_owed = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net_earnings = earnings - commission_owed
        unpaid_commission = await get_driver_unpaid_commission(config.database_path, message.from_user.id)
        
        text = (
            "üí∞ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–æ–±—ñ—Ç–∫—É</b>\n\n"
            f"üíµ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è —Å—å–æ–≥–æ–¥–Ω—ñ: {commission_owed:.2f} –≥—Ä–Ω\n"
            f"üíö –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n\n"
            f"‚ö†Ô∏è –í—Å—å–æ–≥–æ –Ω–µ—Å–ø–ª–∞—á–µ–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó: {unpaid_commission:.2f} –≥—Ä–Ω\n\n"
            f"<i>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –°–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é —â–æ–¥–Ω—è –¥–æ 20:00</i>"
        )
        
        await message.answer(text)

    @router.message(F.text == "üí≥ –ö–æ–º—ñ—Å—ñ—è")
    async def show_commission(message: Message) -> None:
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        unpaid_commission = await get_driver_unpaid_commission(config.database_path, message.from_user.id)
        
        text = (
            "üí≥ <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é</b>\n\n"
            f"‚ö†Ô∏è –î–æ —Å–ø–ª–∞—Ç–∏: {unpaid_commission:.2f} –≥—Ä–Ω\n\n"
            f"üìå <b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É:</b>\n"
            f"<code>{config.payment_card}</code>\n\n"
            f"<i>–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ</i>"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤ –∫–æ–º—ñ—Å—ñ—é", callback_data="commission:paid")]
            ]
        )
        
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "commission:paid")
    async def mark_commission_as_paid(call: CallbackQuery) -> None:
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.status != "approved":
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        await mark_commission_paid(config.database_path, call.from_user.id)
        await call.answer("‚úÖ –î—è–∫—É—î–º–æ! –ö–æ–º—ñ—Å—ñ—é –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ —Å–ø–ª–∞—á–µ–Ω—É.", show_alert=True)
        
        if call.message:
            await call.message.edit_text(
                "‚úÖ <b>–ö–æ–º—ñ—Å—ñ—é —Å–ø–ª–∞—á–µ–Ω–æ</b>\n\n"
                "–î—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!"
            )

    @router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫")
    async def show_driver_history(message: Message) -> None:
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        orders = await get_driver_order_history(config.database_path, message.from_user.id, limit=10)
        
        if not orders:
            await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        
        text = "üìú <b>–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
        for o in orders:
            status_emoji = {
                "pending": "‚è≥",
                "offered": "üì§",
                "accepted": "‚úÖ",
                "in_progress": "üöó",
                "completed": "‚úîÔ∏è",
                "cancelled": "‚ùå"
            }.get(o.status, "‚ùì")
            
            text += (
                f"{status_emoji} <b>‚Ññ{o.id}</b> ({o.status})\n"
                f"üìç {o.pickup_address[:25]}...\n"
                f"   ‚Üí {o.destination_address[:25]}...\n"
            )
            if o.fare_amount:
                text += f"üí∞ {o.fare_amount:.2f} –≥—Ä–Ω\n"
            text += f"üìÖ {o.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await message.answer(text)

    # –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏
    @router.callback_query(F.data.startswith("accept_order:"))
    async def accept_order_from_group(call: CallbackQuery) -> None:
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.status != "approved":
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        order_id = int(call.data.split(":", 1)[1])
        
        order = await get_order_by_id(config.database_path, order_id)
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if order.status != "pending":
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ —ñ–Ω—à–∏–º –≤–æ–¥—ñ—î–º", show_alert=True)
            return
        
        # –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success = await accept_order(config.database_path, order_id, driver.id)
        
        if success:
            await call.answer("‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!", show_alert=True)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
            try:
                tracking_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üìç –î–µ –≤–æ–¥—ñ–π?", callback_data=f"track_driver:{order_id}"),
                            InlineKeyboardButton(text="üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏", url=f"tel:{driver.phone}")
                        ]
                    ]
                )
                await call.bot.send_message(
                    order.user_id,
                    f"üöó <b>–í–æ–¥—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n\n"
                    f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                    f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
                    f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{driver.phone}</code>\n\n"
                    f"–í–æ–¥—ñ–π —ó–¥–µ –¥–æ –≤–∞—Å!",
                    reply_markup=tracking_kb
                )
            except Exception as e:
                logger.error(f"Failed to notify client {order.user_id}: {e}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
            if call.message:
                try:
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"start_trip:{order_id}")],
                            [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_trip:{order_id}")]
                        ]
                    )
                    await call.message.edit_text(
                        f"{call.message.text}\n\n"
                        f"‚úÖ <b>–ü—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º:</b> {driver.full_name}\n"
                        f"üöô {driver.car_make} {driver.car_model} ({driver.car_plate})",
                        reply_markup=kb
                    )
                except Exception as e:
                    logger.error(f"Failed to edit group message: {e}")
            
            logger.info(f"Driver {driver.id} accepted order {order_id}")
        else:
            await call.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ –π–æ–≥–æ –≤–∂–µ –ø—Ä–∏–π–Ω—è–ª–∏.", show_alert=True)

    # –ü–æ—á–∞—Ç–æ–∫ –ø–æ—ó–∑–¥–∫–∏
    @router.callback_query(F.data.startswith("start_trip:"))
    async def start_trip(call: CallbackQuery) -> None:
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.status != "approved":
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        order_id = int(call.data.split(":", 1)[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.driver_id != driver.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        success = await start_order(config.database_path, order_id, driver.id)
        
        if success:
            await call.answer("üöó –ü–æ—ó–∑–¥–∫—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
            try:
                await call.bot.send_message(
                    order.user_id,
                    "üöó <b>–ü–æ—ó–∑–¥–∫—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!</b>\n\n"
                    "–í–æ–¥—ñ–π –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ. –ü—Ä–∏—î–º–Ω–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ!"
                )
            except Exception as e:
                logger.error(f"Failed to notify client: {e}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏
            if call.message:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"complete_trip:{order_id}")]
                    ]
                )
                await call.message.edit_reply_markup(reply_markup=kb)
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏
    @router.callback_query(F.data.startswith("complete_trip:"))
    async def complete_trip(call: CallbackQuery) -> None:
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.status != "approved":
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        order_id = int(call.data.split(":", 1)[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.driver_id != driver.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        tariff = await get_latest_tariff(config.database_path)
        if not tariff:
            await call.answer("‚ùå –¢–∞—Ä–∏—Ñ–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ", show_alert=True)
            return
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –†–ï–ê–õ–¨–ù–£ –≤—ñ–¥—Å—Ç–∞–Ω—å –∑ –ë–î
        distance_m = order.distance_m if order.distance_m else 5000  # fallback
        duration_s = order.duration_s if order.duration_s else 600   # fallback
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤ –ë–î, –∞–ª–µ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑
        if not order.distance_m and order.pickup_lat and order.dest_lat and config.google_maps_api_key:
            from app.utils.maps import get_distance_and_duration as calc_distance
            result = await calc_distance(
                config.google_maps_api_key,
                order.pickup_lat, order.pickup_lon,
                order.dest_lat, order.dest_lon
            )
            if result:
                distance_m, duration_s = result
                logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: {distance_m/1000:.1f} –∫–º")
        
        km = distance_m / 1000.0
        minutes = duration_s / 60.0
        
        fare = max(
            tariff.minimum,
            tariff.base_fare + (km * tariff.per_km) + (minutes * tariff.per_minute)
        )
        
        commission_rate = 0.02  # 2%
        commission = fare * commission_rate
        
        logger.info(f"Order #{order_id}: Distance={km:.1f}km, Duration={minutes:.0f}min, Fare={fare:.2f}–≥—Ä–Ω")
        
        success = await complete_order(
            config.database_path,
            order_id,
            driver.id,
            fare,
            distance_m,
            duration_s,
            commission
        )
        
        if success:
            # –ó–∞–ø–∏—Å–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂
            payment = Payment(
                id=None,
                order_id=order_id,
                driver_id=driver.id,
                amount=fare,
                commission=commission,
                commission_paid=False,
                payment_method="cash",
                created_at=datetime.now(timezone.utc)
            )
            await insert_payment(config.database_path, payment)
            
            await call.answer(f"‚úÖ –ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare:.2f} –≥—Ä–Ω", show_alert=True)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
            try:
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚≠êÔ∏è 5", callback_data=f"rate:driver:{driver.tg_user_id}:5:{order_id}"),
                            InlineKeyboardButton(text="‚≠êÔ∏è 4", callback_data=f"rate:driver:{driver.tg_user_id}:4:{order_id}"),
                        ],
                        [
                            InlineKeyboardButton(text="‚≠êÔ∏è 3", callback_data=f"rate:driver:{driver.tg_user_id}:3:{order_id}"),
                            InlineKeyboardButton(text="‚≠êÔ∏è 2", callback_data=f"rate:driver:{driver.tg_user_id}:2:{order_id}"),
                            InlineKeyboardButton(text="‚≠êÔ∏è 1", callback_data=f"rate:driver:{driver.tg_user_id}:1:{order_id}"),
                        ]
                    ]
                )
                await call.bot.send_message(
                    order.user_id,
                    f"‚úÖ <b>–ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare:.2f} –≥—Ä–Ω\n"
                    f"üìç –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º\n"
                    f"‚è± –ß–∞—Å: {int(minutes)} —Ö–≤\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–æ–¥—ñ—è:",
                    reply_markup=kb
                )
            except Exception as e:
                logger.error(f"Failed to notify client: {e}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
            if call.message:
                await call.message.edit_text(
                    f"{call.message.text}\n\n"
                    f"‚úîÔ∏è <b>–ó–ê–í–ï–†–®–ï–ù–û</b>\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare:.2f} –≥—Ä–Ω\n"
                    f"üí∏ –ö–æ–º—ñ—Å—ñ—è: {commission:.2f} –≥—Ä–Ω"
                )
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ –≤–æ–¥—ñ–π?"
    @router.callback_query(F.data.startswith("track_driver:"))
    async def track_driver_location(call: CallbackQuery) -> None:
        if not call.from_user or not call.message:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or not order.driver_id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–æ–¥—ñ—è (driver_id —Ü–µ DB id, –Ω–µ tg_user_id)
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–µ–∂–∏—Ç—å –∫–ª—ñ—î–Ω—Ç—É
        if order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –Ø–∫—â–æ –≤–æ–¥—ñ–π –º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        if driver.last_lat and driver.last_lon and order.pickup_lat and order.pickup_lon:
            # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –∫–ª—ñ—î–Ω—Ç–∞
            distance_text = ""
            if config.google_maps_api_key:
                result = await get_distance_and_duration(
                    config.google_maps_api_key,
                    driver.last_lat, driver.last_lon,
                    order.pickup_lat, order.pickup_lon
                )
                if result:
                    distance_m, duration_s = result
                    km = distance_m / 1000.0
                    minutes = duration_s / 60.0
                    distance_text = f"\n\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º\n‚è±Ô∏è –ü—Ä–∏–±—É–¥–µ —á–µ—Ä–µ–∑: ~{int(minutes)} —Ö–≤"
            
            # –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É
            if config.google_maps_api_key:
                map_url = generate_static_map_url(
                    config.google_maps_api_key,
                    driver.last_lat, driver.last_lon,
                    order.pickup_lat, order.pickup_lon,
                    width=600, height=400
                )
                
                # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps
                gmaps_link = f"https://www.google.com/maps/dir/?api=1&origin={driver.last_lat},{driver.last_lon}&destination={order.pickup_lat},{order.pickup_lon}&travelmode=driving"
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Google Maps", url=gmaps_link)],
                        [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", callback_data=f"track_driver:{order_id}")]
                    ]
                )
                
                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–∞—Ä—Ç—É
                try:
                    await call.bot.send_photo(
                        call.from_user.id,
                        photo=map_url,
                        caption=f"üìç <b>–õ–æ–∫–∞—Ü—ñ—è –≤–æ–¥—ñ—è</b>\n\n"
                                f"üöó {driver.full_name}\n"
                                f"üöô {driver.car_make} {driver.car_model} ({driver.car_plate})"
                                f"{distance_text}\n\n"
                                f"<i>–û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>",
                        reply_markup=kb
                    )
                    await call.answer("üìç –ö–∞—Ä—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
                except Exception as e:
                    logger.error(f"Failed to send map: {e}")
                    # Fallback: –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                    await call.bot.send_message(
                        call.from_user.id,
                        f"üìç <b>–õ–æ–∫–∞—Ü—ñ—è –≤–æ–¥—ñ—è</b>\n\n"
                        f"üöó {driver.full_name}{distance_text}\n\n"
                        f"üó∫Ô∏è <a href='{gmaps_link}'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Google Maps</a>",
                        reply_markup=kb
                    )
                    await call.answer("üìç –õ–æ–∫–∞—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
            else:
                await call.answer("‚ö†Ô∏è Google Maps API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π", show_alert=True)
        else:
            await call.answer(
                "‚ö†Ô∏è –í–æ–¥—ñ–π —â–µ –Ω–µ –Ω–∞–¥–∞–≤ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –≤–æ–¥—ñ—é.",
                show_alert=True
            )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–¥—ñ—è —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é
    @router.message(F.text == "üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é")
    async def share_location_button(message: Message) -> None:
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]
            ]
        )
        await message.answer(
            "üìç <b>–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –ø–æ—Ç–æ—á–Ω—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏ –±–∞—á–∏—Ç–∏ –¥–µ –≤–∏.\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
            reply_markup=kb
        )
    
    # –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤—ñ–¥ –≤–æ–¥—ñ—è
    @router.message(F.location)
    async def driver_location_update(message: Message) -> None:
        if not message.from_user or not message.location:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –≤–æ–¥—ñ—è –≤ –ë–î
        await update_driver_location(
            config.database_path,
            message.from_user.id,
            message.location.latitude,
            message.location.longitude
        )
        
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ! –ö–ª—ñ—î–Ω—Ç–∏ –º–æ–∂—É—Ç—å –±–∞—á–∏—Ç–∏ –¥–µ –≤–∏.")

    return router
