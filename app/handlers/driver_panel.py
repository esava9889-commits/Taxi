"""–ù–û–í–ò–ô –∫–∞–±—ñ–Ω–µ—Ç –≤–æ–¥—ñ—è - –≤–µ—Ä—Å—ñ—è 3.0"""
from __future__ import annotations

import logging
from datetime import datetime, timezone, timedelta

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_driver_by_tg_user_id,
    get_driver_by_id,
    get_order_by_id,
    accept_order,
    start_order,
    complete_order,
    get_driver_earnings_today,
    get_driver_unpaid_commission,
    get_driver_order_history,
    mark_commission_paid,
    Payment,
    insert_payment,
    get_latest_tariff,
    update_driver_location,
    set_driver_online_status,
    get_online_drivers_count,
    get_driver_tips_total,
)
from app.utils.rate_limiter import check_rate_limit, get_time_until_reset, format_time_remaining
from app.utils.order_timeout import cancel_order_timeout

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver_panel")

    @router.message(F.text == "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
    async def driver_panel_main(message: Message) -> None:
        """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è - –ù–û–í–ê –í–ï–†–°–Ü–Ø 3.0"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π –∞–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
            )
            return
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫
        earnings, commission = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net = earnings - commission
        
        # –ß–∞–π–æ–≤—ñ
        tips = 0.0
        try:
            tips = await get_driver_tips_total(config.database_path, message.from_user.id)
        except:
            tips = 0.0
        
        # –°—Ç–∞—Ç—É—Å
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        # –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü—ñ—ó –∑ –≤—ñ–∫–æ–º
        from app.utils.location_tracker import check_driver_location_status
        loc_status = await check_driver_location_status(config.database_path, message.from_user.id)
        
        if not loc_status['has_location']:
            location = "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            age = loc_status['age_minutes']
            if loc_status['status'] == 'fresh':
                location = f"üìç –ê–∫—Ç–∏–≤–Ω–∞ ({age} —Ö–≤ —Ç–æ–º—É)"
            elif loc_status['status'] == 'warning':
                location = f"‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ({age} —Ö–≤ —Ç–æ–º—É)"
            else:
                location = f"üî¥ –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ ({age} —Ö–≤ —Ç–æ–º—É)"
        
        # –û–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó
        online = 0
        try:
            online = await get_online_drivers_count(config.database_path, driver.city)
        except:
            online = 0
        
        # –¢–ï–ö–°–¢ –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: {location}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net:.2f} –≥—Ä–Ω\n"
            f"üíù –ß–∞–π–æ–≤—ñ (–≤—Å—å–æ–≥–æ): {tips:.2f} –≥—Ä–Ω\n\n"
            "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n\n"
            "üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É' –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è"
        )
        
        # –ö–õ–ê–í–Ü–ê–¢–£–†–ê –∑ –∫–Ω–æ–ø–∫–æ—é
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                [KeyboardButton(text="üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                [KeyboardButton(text="üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
                [KeyboardButton(text="üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")],
                [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(text, reply_markup=kb)

    @router.message(F.text == "üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
    async def start_work(message: Message) -> None:
        """–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        online = 0
        try:
            online = await get_online_drivers_count(config.database_path, driver.city)
        except:
            pass
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        await message.answer(
            f"üöÄ <b>–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=kb
        )

    @router.callback_query(F.data == "work:toggle")
    async def toggle_status(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        new = not driver.online
        await set_driver_online_status(config.database_path, driver.id, new)
        
        online = await get_online_drivers_count(config.database_path, driver.city)
        
        if new:
            await call.answer(f"‚úÖ –í–∏ –æ–Ω–ª–∞–π–Ω! –í–æ–¥—ñ—ó–≤: {online}", show_alert=True)
        else:
            await call.answer("üî¥ –í–∏ –æ—Ñ–ª–∞–π–Ω", show_alert=True)
        
        # –û–Ω–æ–≤–∏—Ç–∏
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(
                f"üöÄ <b>–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=kb
            )

    @router.callback_query(F.data == "work:refresh")
    async def refresh_menu(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        online = await get_online_drivers_count(config.database_path, driver.city)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(
                f"üöÄ <b>–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=kb
            )
        await call.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ!")

    @router.callback_query(F.data == "work:stats")
    async def show_stats_menu(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="stats:today")],
                [InlineKeyboardButton(text="üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="stats:week")],
                [InlineKeyboardButton(text="üìÖ –ú—ñ—Å—è—Ü—å", callback_data="stats:month")],
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="work:refresh")]
            ]
        )
        if call.message:
            await call.message.edit_text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:", reply_markup=kb)
        await call.answer()

    @router.message(F.location)
    async def update_loc(message: Message) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é"""
        if not message.from_user or not message.location:
            return
        
        await update_driver_location(
            config.database_path,
            message.from_user.id,
            message.location.latitude,
            message.location.longitude
        )
        
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    @router.message(F.text == "üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫")
    async def earnings(message: Message) -> None:
        """–ó–∞—Ä–æ–±—ñ—Ç–æ–∫"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        today, comm = await get_driver_earnings_today(config.database_path, message.from_user.id)
        
        await message.answer(
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫</b>\n\n"
            f"–°—å–æ–≥–æ–¥–Ω—ñ: {today:.2f} –≥—Ä–Ω\n"
            f"–ö–æ–º—ñ—Å—ñ—è: {comm:.2f} –≥—Ä–Ω\n"
            f"–ß–∏—Å—Ç–∏–π: {today - comm:.2f} –≥—Ä–Ω"
        )

    @router.message(F.text == "üí≥ –ö–æ–º—ñ—Å—ñ—è")
    async def commission(message: Message) -> None:
        """–ö–æ–º—ñ—Å—ñ—è"""
        if not message.from_user:
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, message.from_user.id)
        
        if unpaid > 0:
            await message.answer(
                f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏:</b> {unpaid:.2f} –≥—Ä–Ω\n\n"
                f"–ö–∞—Ä—Ç–∫–∞: <code>{config.payment_card or '4149499901234567'}</code>"
            )
        else:
            await message.answer("‚úÖ –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á–µ–Ω–∞!")

    @router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫")
    async def history(message: Message) -> None:
        """–Ü—Å—Ç–æ—Ä—ñ—è"""
        if not message.from_user:
            return
        
        orders = await get_driver_order_history(config.database_path, message.from_user.id, limit=5)
        
        if not orders:
            await message.answer("üìú –ü–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫")
            return
        
        text = "üìú <b>–û—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ—ó–∑–¥–æ–∫:</b>\n\n"
        for i, o in enumerate(orders, 1):
            text += f"{i}. {o.pickup_address[:20]}... ‚Üí {o.destination_address[:20]}...\n"
            text += f"   üí∞ {o.fare_amount or 0:.0f} –≥—Ä–Ω\n\n"
        
        await message.answer(text)

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
    @router.callback_query(F.data.startswith("accept_order:"))
    async def accept(call: CallbackQuery) -> None:
        """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        # RATE LIMITING: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 20 —Å–ø—Ä–æ–± –Ω–∞ –≥–æ–¥–∏–Ω—É)
        if not check_rate_limit(call.from_user.id, "accept_order", max_requests=20, window_seconds=3600):
            time_until_reset = get_time_until_reset(call.from_user.id, "accept_order", window_seconds=3600)
            await call.answer(
                f"‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑: {format_time_remaining(time_until_reset)}",
                show_alert=True
            )
            logger.warning(f"Driver {call.from_user.id} exceeded accept_order rate limit")
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.status != "pending":
            await call.answer("‚ùå –í–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ", show_alert=True)
            return
        
        success = await accept_order(config.database_path, order_id, driver.id)
        
        if success:
            # –°–ö–ê–°–£–í–ê–¢–ò –¢–ê–ô–ú–ï–†: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º
            cancel_order_timeout(order_id)
            logger.info(f"‚úÖ –¢–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} (–ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º)")
            
            await call.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!", show_alert=True)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ
            # –Ø–∫—â–æ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è
            if order.payment_method == "card" and driver.card_number:
                kb_client = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"pay:{order_id}")]
                    ]
                )
                await call.bot.send_message(
                    order.user_id,
                    f"‚úÖ <b>–í–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
                    f"üöó {driver.full_name}\n"
                    f"üöô {driver.car_make} {driver.car_model} ({driver.car_plate})\n"
                    f"üì± <code>{driver.phone}</code>\n\n"
                    f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n"
                    f"<code>{driver.card_number}</code>\n\n"
                    f"üí∞ –î–æ —Å–ø–ª–∞—Ç–∏: {int(order.fare_amount):.0f} –≥—Ä–Ω" if order.fare_amount is not None else "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: —É—Ç–æ—á–Ω—é—î—Ç—å—Å—è",
                    reply_markup=kb_client
                )
            else:
                await call.bot.send_message(
                    order.user_id,
                    (
                        f"‚úÖ <b>–í–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
                        f"üöó {driver.full_name}\n"
                        f"üöô {driver.car_make} {driver.car_model} ({driver.car_plate})\n"
                        f"üì± <code>{driver.phone}</code>\n\n"
                        f"üíµ –û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é\n\n"
                        f"üöó –í–æ–¥—ñ–π —É–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ. –û—á—ñ–∫—É–π—Ç–µ!"
                    )
                )
            
            # –í–ò–î–ê–õ–ò–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ)
            if call.message and order.group_message_id:
                try:
                    # –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
                    await call.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=order.group_message_id,
                        text="‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è</b>\n\n"
                             f"–í–æ–¥—ñ–π: {driver.full_name}\n"
                             f"–°—Ç–∞—Ç—É—Å: –í —Ä–æ–±–æ—Ç—ñ"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ: {e}")
            
            # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–æ–¥—ñ—é –û–°–û–ë–ò–°–¢–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ü–û–í–ù–ò–ú –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
            kb_driver = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üöó –ö–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º", callback_data=f"manage:{order_id}")]
                ]
            )
            
            await call.bot.send_message(
                driver.tg_user_id,
                f"‚úÖ <b>–í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {order.name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code> üîì\n\n"
                f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
                f"üìç –ö—É–¥–∏: {order.destination_address}\n\n"
                f"‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤–∞–º</i>\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º",
                reply_markup=kb_driver
            )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ (—è–∫—â–æ —Ü–µ –≥—Ä—É–ø–∞)
            if call.message:
                try:
                    await call.message.delete()
                except:
                    pass
    
    @router.callback_query(F.data.startswith("reject_order:"))
    async def reject_order_handler(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –≤—ñ–¥—Ö–∏–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        order_id = int(call.data.split(":")[1])
        
        # –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import add_rejected_driver
        await add_rejected_driver(config.database_path, order_id, driver.id)
        
        await call.answer("‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=False)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –≤–æ–¥—ñ—è
        if call.message:
            try:
                await call.message.delete()
            except:
                pass
        
        logger.info(f"‚ùå –í–æ–¥—ñ–π {driver.full_name} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")

    @router.callback_query(F.data.startswith("arrived:"))
    async def driver_arrived(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        await call.answer("üìç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É!", show_alert=True)
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        try:
            await call.bot.send_message(
                order.user_id,
                f"üìç <b>–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ!</b>\n\n"
                f"üöó {driver.full_name}\n"
                f"üì± <code>{driver.phone}</code>\n\n"
                f"–í–æ–¥—ñ–π —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å!"
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"start:{order_id}")]
            ]
        )
        
        if call.message:
            await call.message.edit_reply_markup(reply_markup=kb)
    
    @router.callback_query(F.data.startswith("start:"))
    async def start_trip(call: CallbackQuery) -> None:
        """–ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await start_order(config.database_path, order_id, driver.id)
        
        await call.answer("üöó –ü–æ—ó–∑–¥–∫–∞ –ø–æ—á–∞–ª–∞—Å—å!", show_alert=True)
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data=f"complete:{order_id}")]
            ]
        )
        
        if call.message:
            await call.message.edit_reply_markup(reply_markup=kb)

    @router.callback_query(F.data.startswith("complete:"))
    async def complete_trip(call: CallbackQuery) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É, —ñ–Ω–∞–∫—à–µ –º—ñ–Ω—ñ–º—É–º 100
        fare = order.fare_amount if order.fare_amount else 100.0
        distance_m = order.distance_m if order.distance_m else 0
        duration_s = order.duration_s if order.duration_s else 0
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó
        from app.storage.db import get_latest_tariff, insert_payment, Payment
        tariff = await get_latest_tariff(config.database_path)
        commission_rate = tariff.commission_percent if tariff else 0.02
        commission = fare * commission_rate
        
        await complete_order(
            config.database_path,
            order_id,
            driver.id,
            fare,
            distance_m,
            duration_s,
            commission
        )
        # –ó–∞–ø–∏—Å —É payments –¥–ª—è –æ–±–ª—ñ–∫—É –∫–æ–º—ñ—Å—ñ—ó
        payment = Payment(
            id=None,
            order_id=order_id,
            driver_id=driver.id,
            amount=fare,
            commission=commission,
            commission_paid=False,
            payment_method=order.payment_method or 'cash',
            created_at=datetime.now(timezone.utc),
        )
        await insert_payment(config.database_path, payment)
        
        await call.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! {fare:.0f} –≥—Ä–Ω", show_alert=True)
        
        if call.message:
            await call.message.edit_text(f"‚úÖ –ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüí∞ {fare:.0f} –≥—Ä–Ω")

    @router.message(F.text == "üíº –ì–∞–º–∞–Ω–µ—Ü—å")
    async def show_wallet(message: Message) -> None:
        """–ì–∞–º–∞–Ω–µ—Ü—å –≤–æ–¥—ñ—è - –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        if driver.card_number:
            text = (
                f"üíº <b>–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å</b>\n\n"
                f"üí≥ –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
                f"<code>{driver.card_number}</code>\n\n"
                f"‚ÑπÔ∏è –¶—è –∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç–∞–º,\n"
                f"—è–∫—ñ –æ–±–∏—Ä–∞—é—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–∫–æ—é."
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É", callback_data="wallet:edit")]
                ]
            )
        else:
            text = (
                f"üíº <b>–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å</b>\n\n"
                f"‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –¥–æ–¥–∞–Ω–∞\n\n"
                f"–î–æ–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–∫—É, —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏\n"
                f"–ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∞–º –æ–ø–ª–∞—Ç—É."
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É", callback_data="wallet:add")]
                ]
            )
        
        await message.answer(text, reply_markup=kb)
    
    @router.callback_query(F.data.in_(["wallet:add", "wallet:edit"]))
    async def wallet_add_edit(call: CallbackQuery) -> None:
        """–î–æ–¥–∞—Ç–∏/–∑–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É"""
        await call.answer()
        await call.message.answer(
            "üí≥ <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: 1234 5678 9012 3456\n"
            "–∞–±–æ: 1234567890123456\n\n"
            "–¶—è –∫–∞—Ä—Ç–∫–∞ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –∫–ª—ñ—î–Ω—Ç–∞–º\n"
            "–¥–ª—è –æ–ø–ª–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏."
        )
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ FSM, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑—Ä–æ–±–∏–º–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    
    @router.message(F.text.regexp(r'^\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$'))
    async def save_card_number(message: Message) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏"""
        if not message.from_user or not message.text:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        card_number = message.text.strip().replace(" ", "")
        # –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —è–∫ 1234 5678 9012 3456
        formatted_card = f"{card_number[0:4]} {card_number[4:8]} {card_number[8:12]} {card_number[12:16]}"
        
        # –û–Ω–æ–≤–∏—Ç–∏ –≤ –ë–î
        import aiosqlite
        import logging
        logger = logging.getLogger(__name__)
        
        async with aiosqlite.connect(config.database_path) as db:
            cursor = await db.execute(
                "UPDATE drivers SET card_number = ? WHERE tg_user_id = ?",
                (formatted_card, message.from_user.id)
            )
            await db.commit()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ UPDATE —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            if cursor.rowcount > 0:
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –≤–æ–¥—ñ—è {message.from_user.id}: {formatted_card}")
            else:
                logger.error(f"‚ùå UPDATE –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–ª—è –≤–æ–¥—ñ—è {message.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∫–∞—Ä—Ç–∫–∞ –¥—ñ–π—Å–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∞—Å—è
        driver_check = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if driver_check and driver_check.card_number:
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–∞—Ä—Ç–∫–∞ –≤ –ë–î = {driver_check.card_number}")
        else:
            logger.error(f"‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–∞—Ä—Ç–∫–∞ –ù–ï –∑–±–µ—Ä–µ–≥–ª–∞—Å—è –≤ –ë–î!")
        
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</b>\n\n"
            f"üí≥ {formatted_card}\n\n"
            f"–¢–µ–ø–µ—Ä –∫–ª—ñ—î–Ω—Ç–∏ –∑–º–æ–∂—É—Ç—å –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏\n"
            f"–æ–ø–ª–∞—Ç—É –Ω–∞ —Ü—é –∫–∞—Ä—Ç–∫—É.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è"), KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                    [KeyboardButton(text="üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                    [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
                    [KeyboardButton(text="üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")],
                    [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
                ],
                resize_keyboard=True
            )
        )
    
    @router.callback_query(F.data.startswith("manage:"))
    async def manage_order(call: CallbackQuery) -> None:
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —É—Å—ñ–º–∞ –¥–µ—Ç–∞–ª—è–º–∏
        from app.storage.db import get_user_by_id
        client = await get_user_by_id(config.database_path, order.user_id)
        
        distance_text = ""
        if order.distance_m:
            km = order.distance_m / 1000.0
            distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
        
        payment_text = "üíµ –ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "üí≥ –ö–∞—Ä—Ç–∫–∞"
        
        fare_text = f"{order.fare_amount:.0f} –≥—Ä–Ω" if isinstance(order.fare_amount, (int, float)) else "—É—Ç–æ—á–Ω—é—î—Ç—å—Å—è"
        text = (
            f"üöó <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {client.full_name if client else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code>\n\n"
            f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b> {order.pickup_address}\n"
            f"üìç <b>–ö—É–¥–∏:</b> {order.destination_address}{distance_text}\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare_text}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_text}\n"
        )
        
        if order.comment:
            text += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}"
        
        text += f"\n\nüìä –°—Ç–∞—Ç—É—Å: "
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
        kb = None
        
        if order.status == "accepted":
            text += "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –Ø –Ω–∞ –º—ñ—Å—Ü—ñ", callback_data=f"arrived:{order_id}")],
                    [InlineKeyboardButton(text="üöó –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"start:{order_id}")],
                    [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"manage:{order_id}")]
                ]
            )
        elif order.status == "in_progress":
            text += "üöó –í –¥–æ—Ä–æ–∑—ñ"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"complete:{order_id}")],
                    [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"manage:{order_id}")]
                ]
            )
        elif order.status == "completed":
            text += "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="driver:panel")]
                ]
            )
        
        await call.answer()
        
        if kb:
            try:
                await call.message.edit_text(text, reply_markup=kb)
            except:
                await call.message.answer(text, reply_markup=kb)
        else:
            await call.message.answer(text)

    return router
