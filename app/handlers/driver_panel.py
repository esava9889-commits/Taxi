"""–ù–û–í–ò–ô –∫–∞–±—ñ–Ω–µ—Ç –≤–æ–¥—ñ—è - –≤–µ—Ä—Å—ñ—è 3.0"""
from __future__ import annotations

import logging
from datetime import datetime, timezone, timedelta

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_driver_by_tg_user_id,
    get_driver_by_id,
    get_order_by_id,
    accept_order,
    start_order,
    complete_order,
    get_driver_earnings_today,
    get_active_order_for_driver,
    cancel_order_by_driver,
    get_driver_unpaid_commission,
    get_driver_order_history,
    mark_commission_paid,
    Payment,
    insert_payment,
    get_latest_tariff,
    update_driver_location,
    set_driver_online_status,
    get_online_drivers_count,
    get_driver_tips_total,
)
from app.utils.rate_limiter import check_rate_limit, get_time_until_reset, format_time_remaining
from app.utils.order_timeout import cancel_order_timeout

logger = logging.getLogger(__name__)


def clean_address(address: str) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—ñ–¥ Plus Codes —Ç–∞ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤.
    
    Plus Code - —Ü–µ –∫–æ–¥–∏ —Ç–∏–ø—É "PMQC+G9" —è–∫—ñ Google –¥–æ–¥–∞—î –¥–æ –∞–¥—Ä–µ—Å.
    –í–æ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ.
    """
    import re
    
    if not address:
        return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ Plus Codes (—Ñ–æ—Ä–º–∞—Ç: 4-8 —Å–∏–º–≤–æ–ª—ñ–≤ + '+' + 2-3 —Å–∏–º–≤–æ–ª–∏)
    # –ü—Ä–∏–∫–ª–∞–¥–∏: PMQC+G9, 8FWX+23, ABCD+EF
    address = re.sub(r'\b[A-Z0-9]{4,8}\+[A-Z0-9]{2,3}\b', '', address)
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    address = re.sub(r'\s+', ' ', address)
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —ñ –≤ –∫—ñ–Ω—Ü—ñ
    address = address.strip()
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É (—è–∫—â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—å –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è Plus Code)
    address = re.sub(r'^[,\s]+', '', address)
    
    return address if address else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"


def driver_panel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è - –ù–û–í–ê –í–ï–†–°–Ü–Ø –ó –ö–ê–†–ú–û–Æ"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
            [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
            [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")],
            [KeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")]
        ],
        resize_keyboard=True
    )


# FSM —Å—Ç–∞–Ω–∏ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –≤–æ–¥—ñ—è
class DriverProfileStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_color = State()
    waiting_for_card = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver_panel")

    @router.message(F.text == "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
    async def driver_panel_main(message: Message) -> None:
        """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è - –ù–û–í–ê –í–ï–†–°–Ü–Ø 3.0"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await message.delete()
        except:
            pass
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π –∞–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
            )
            return
        
        # ‚≠ê –ü–ï–†–ï–í–Ü–†–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
        active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫
        earnings, commission = await get_driver_earnings_today(config.database_path, message.from_user.id)
        net = earnings - commission
        
        # –ß–∞–π–æ–≤—ñ
        tips = 0.0
        try:
            tips = await get_driver_tips_total(config.database_path, message.from_user.id)
        except:
            tips = 0.0
        
        # –°—Ç–∞—Ç—É—Å
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        # –°—Ç–∞—Ç—É—Å –ª–æ–∫–∞—Ü—ñ—ó –∑ –≤—ñ–∫–æ–º
        from app.utils.location_tracker import check_driver_location_status
        loc_status = await check_driver_location_status(config.database_path, message.from_user.id)
        
        if not loc_status['has_location']:
            location = "‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        else:
            age = loc_status['age_minutes']
            if loc_status['status'] == 'fresh':
                location = f"üìç –ê–∫—Ç–∏–≤–Ω–∞ ({age} —Ö–≤ —Ç–æ–º—É)"
            elif loc_status['status'] == 'warning':
                location = f"‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ({age} —Ö–≤ —Ç–æ–º—É)"
            else:
                location = f"üî¥ –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ ({age} —Ö–≤ —Ç–æ–º—É)"
        
        # –û–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó
        online = 0
        try:
            online = await get_online_drivers_count(config.database_path, driver.city)
        except:
            online = 0
        
        # –¢–ï–ö–°–¢ –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏
        text = (
            f"üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è</b>\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: {location}\n"
            f"–ü–Ü–ë: {driver.full_name}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
            f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {earnings:.2f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏: {commission:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net:.2f} –≥—Ä–Ω\n"
            f"üíù –ß–∞–π–æ–≤—ñ (–≤—Å—å–æ–≥–æ): {tips:.2f} –≥—Ä–Ω\n\n"
        )
        
        # ‚≠ê –Ø–ö–©–û –Ñ –ê–ö–¢–ò–í–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if active_order:
            order_status_emoji = "‚úÖ" if active_order.status == "accepted" else "üöó"
            order_status_text = "–ü—Ä–∏–π–Ω—è—Ç–æ" if active_order.status == "accepted" else "–í –¥–æ—Ä–æ–∑—ñ"
            
            text += (
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"‚ö†Ô∏è <b>–£ –í–ê–° –Ñ –ê–ö–¢–ò–í–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!</b>\n\n"
                f"{order_status_emoji} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{active_order.id}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order_status_text}\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {active_order.name}\n"
                f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {int(active_order.fare_amount):.0f} –≥—Ä–Ω\n\n"
                f"üëá <b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è!</b>"
            )
        else:
            text += "‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n\nüëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É' –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è"
        
        # ‚≠ê –ö–õ–ê–í–Ü–ê–¢–£–†–ê - —Ä—ñ–∑–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –±–µ–∑
        if active_order:
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    # –í–ï–õ–ò–ö–ê –ö–ù–û–ü–ö–ê –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    [KeyboardButton(text="üöó –ö–ï–†–£–í–ê–¢–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú")],
                    [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                    [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
                    [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
                ],
                resize_keyboard=True
            )
        else:
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                    [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                    [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
                    [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
                ],
                resize_keyboard=True
            )
        
        await message.answer(text, reply_markup=kb)

    @router.message(F.text == "üöó –ö–ï–†–£–í–ê–¢–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú")
    async def manage_active_order(message: Message) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await message.delete()
        except:
            pass
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            await message.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤."
            )
            return
        
        # ‚≠ê –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        clean_pickup = clean_address(order.pickup_address)
        clean_destination = clean_address(order.destination_address)
        
        pickup_link = ""
        destination_link = ""
        
        if order.pickup_lat and order.pickup_lon:
            pickup_link = f"<a href='https://www.google.com/maps?q={order.pickup_lat},{order.pickup_lon}'>üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        if order.dest_lat and order.dest_lon:
            destination_link = f"<a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        # –í—ñ–¥—Å—Ç–∞–Ω—å
        distance_text = ""
        if order.distance_m:
            km = order.distance_m / 1000.0
            distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
        
        # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
        payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
        payment_text = "–ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "–ö–∞—Ä—Ç–∫–∞"
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        status_emoji = "‚úÖ" if order.status == "accepted" else "üöó"
        status_text = "–ü—Ä–∏–π–Ω—è—Ç–æ" if order.status == "accepted" else "–í –¥–æ—Ä–æ–∑—ñ"
        
        # –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        text = (
            f"{status_emoji} <b>–ê–ö–¢–ò–í–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id}</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>üìã –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:</b>\n\n"
            f"üìä –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {order.name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code>\n\n"
            f"üìç <b>–ó–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞—Ç–∏:</b>\n{clean_pickup}\n"
            f"{pickup_link}\n\n"
            f"üéØ <b>–ö—É–¥–∏ –≤–µ–∑—Ç–∏:</b>\n{clean_destination}\n"
            f"{destination_link}{distance_text}\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>{int(order.fare_amount):.0f} –≥—Ä–Ω</b>\n"
            f"{payment_emoji} –û–ø–ª–∞—Ç–∞: {payment_text}\n"
        )
        
        if order.comment:
            text += f"\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b>\n<i>{order.comment}</i>\n"
        
        text += (
            f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>üìç –ï–¢–ê–ü–ò –í–ò–ö–û–ù–ê–ù–ù–Ø:</b>\n\n"
            f"1Ô∏è‚É£ <b>–á–¥—å—Ç–µ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞</b>\n"
            f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>üìç –Ø –ù–ê –ú–Ü–°–¶–Ü –ü–û–î–ê–ß–Ü</b>\n\n"
            f"2Ô∏è‚É£ <b>–ö–ª—ñ—î–Ω—Ç —Å—ñ–≤ –≤ –∞–≤—Ç–æ</b>\n"
            f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û</b>\n\n"
            f"3Ô∏è‚É£ <b>–î–æ–≤–µ–∑–ª–∏ –¥–æ –º—ñ—Å—Ü—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</b>\n"
            f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí° <b>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è!</b>"
        )
        
        # –ö–õ–ê–í–Ü–ê–¢–£–†–ê –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        kb = ReplyKeyboardMarkup(
            keyboard=[
                # ======== –û–°–ù–û–í–ù–ï –ö–ï–†–£–í–ê–ù–ù–Ø ========
                [KeyboardButton(text="üìç –Ø –ù–ê –ú–Ü–°–¶–Ü –ü–û–î–ê–ß–Ü")],
                [KeyboardButton(text="‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û")],
                [KeyboardButton(text="üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£")],
                
                # ======== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ========
                [
                    KeyboardButton(text="üìû –ö–ª—ñ—î–Ω—Ç"),
                    KeyboardButton(text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç")
                ],
                [
                    KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
                    KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–æ—é"
        )
        
        await message.answer(text, reply_markup=kb, disable_web_page_preview=True)

    @router.message(F.text == "üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")
    async def start_work(message: Message) -> None:
        """–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–æ—é - —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await message.delete()
        except:
            pass
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        status_emoji = "üü¢" if driver.online else "üî¥"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        online = 0
        try:
            online = await get_online_drivers_count(config.database_path, driver.city)
        except:
            pass
        
        # –ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ
        earnings_today = 0
        commission_today = 0
        try:
            earnings_today, commission_today = await get_driver_earnings_today(
                config.database_path, 
                message.from_user.id
            )
        except:
            pass
        
        # –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
        if active_order:
            order_status = (
                f"üì¶ <b>–ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{active_order.id}\n"
                f"üìç {active_order.pickup_address[:30]}... ‚Üí {active_order.destination_address[:30]}...\n"
                f"üí∞ {int(active_order.fare_amount):.0f} –≥—Ä–Ω\n\n"
            )
        else:
            order_status = ""
        
        # –ö–Ω–æ–ø–∫–∏ (–ø—Ä–∏–±—Ä–∞–Ω–æ "–ú–æ—è –ª–æ–∫–∞—Ü—ñ—è" —Ç–∞ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" - —Ç–µ–ø–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{status_emoji} –£–í–Ü–ú–ö–ù–£–¢–ò –û–ù–õ–ê–ô–ù" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats"),
                    InlineKeyboardButton(text="üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫", callback_data="work:earnings")
                ],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤ –¥–ª—è –º—ñ—Å—Ç–∞
        city_invite_link = None
        if driver.city and driver.city in config.city_invite_links:
            city_invite_link = config.city_invite_links[driver.city]
        
        # –¢–µ–∫—Å—Ç –ø—Ä–æ –≥—Ä—É–ø—É
        if city_invite_link:
            group_text = f"üì¢ <a href=\"{city_invite_link}\">–ì—Ä—É–ø–∞ –≤–æ–¥—ñ—ó–≤ {driver.city}</a>\n"
        else:
            group_text = f"üì¢ –ì—Ä—É–ø–∞: {driver.city or '–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}\n"
        
        text = (
            f"üöÄ <b>–ú–ï–ù–Æ –ö–ï–†–£–í–ê–ù–ù–Ø –†–û–ë–û–¢–û–Æ</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–í–æ–¥—ñ–π:</b> {driver.full_name}\n"
            f"üèô <b>–ú—ñ—Å—Ç–æ:</b> {driver.city or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"{group_text}"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
            f"üë• <b>–í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω:</b> {online} —á–æ–ª.\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ:</b> {earnings_today:.0f} –≥—Ä–Ω\n"
            f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è:</b> {commission_today:.0f} –≥—Ä–Ω\n\n"
            f"{order_status}"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí° <b>–®–≤–∏–¥–∫—ñ –¥—ñ—ó:</b>\n"
            f"‚Ä¢ –£–≤—ñ–º–∫–Ω—ñ—Ç—å üü¢ –û–Ω–ª–∞–π–Ω —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            f"‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤ –≥—Ä—É–ø—É <b>{driver.city or '–≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞'}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ - –æ—Ç—Ä–∏–º—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "work:toggle")
    async def toggle_status(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ü–†–û–§–Ü–õ–Æ –ø–µ—Ä–µ–¥ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è–º –æ–Ω–ª–∞–π–Ω (–ë–ï–ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó!)
        if not driver.online:  # –Ø–∫—â–æ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–Ω–ª–∞–π–Ω
            car_color = getattr(driver, 'car_color', None)
            missing = []
            if not driver.city:
                missing.append("üèô –ú—ñ—Å—Ç–æ")
            if not driver.card_number:
                missing.append("üí≥ –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤")
            if not car_color:
                missing.append("üé® –ö–æ–ª—ñ—Ä –∞–≤—Ç–æ")
            # ‚ùå –í–ò–î–ê–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó - –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω
            
            if missing:
                await call.answer(
                    f"‚ùå –ü–†–û–§–Ü–õ–¨ –ù–ï –ó–ê–ü–û–í–ù–ï–ù–ò–ô!\n\n"
                    f"–í—ñ–¥—Å—É—Ç–Ω—ñ:\n" + "\n".join(f"‚Ä¢ {m}" for m in missing) + 
                    f"\n\nüëâ –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!",
                    show_alert=True
                )
                # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                await call.bot.send_message(
                    call.from_user.id,
                    f"‚ö†Ô∏è <b>–ù–ï –ú–û–ñ–ù–ê –£–í–Ü–ú–ö–ù–£–¢–ò –û–ù–õ–ê–ô–ù</b>\n\n"
                    f"–î–ª—è —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å!\n\n"
                    f"<b>–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:</b>\n" +
                    "\n".join(f"‚Ä¢ {m}" for m in missing) +
                    f"\n\nüí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b> –≤ –º–µ–Ω—é\n"
                    f"—ñ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è",
                    reply_markup=driver_panel_keyboard()
                )
                return
        
        new = not driver.online
        await set_driver_online_status(config.database_path, driver.id, new)
        
        online = await get_online_drivers_count(config.database_path, driver.city)
        
        # Push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É
        if new:
            await call.answer(f"‚úÖ –í–∏ –æ–Ω–ª–∞–π–Ω! –í–æ–¥—ñ—ó–≤: {online}", show_alert=True)
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
            try:
                city_name = driver.city if driver.city else "–≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ"
                await call.bot.send_message(
                    call.from_user.id,
                    f"üü¢ <b>–°—Ç–∞—Ç—É—Å: –û–ù–õ–ê–ô–ù</b>\n\n"
                    f"–í–∏ —Ç–µ–ø–µ—Ä –æ–Ω–ª–∞–π–Ω —ñ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
                    f"üë• –û–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤ —É {city_name}: {online}\n\n"
                    f"üì¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å —É –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤.\n"
                    f"–ü—Ä–∏–π–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä—à–∏–º!",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"Failed to send online status push: {e}")
        else:
            await call.answer("üî¥ –í–∏ –æ—Ñ–ª–∞–π–Ω", show_alert=True)
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ push-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω
            try:
                await call.bot.send_message(
                    call.from_user.id,
                    f"üî¥ <b>–°—Ç–∞—Ç—É—Å: –û–§–õ–ê–ô–ù</b>\n\n"
                    f"–í–∏ –ø—ñ—à–ª–∏ –≤ –æ—Ñ–ª–∞–π–Ω.\n\n"
                    f"–í–∏ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
                    f"üí° –©–æ–± –ø–æ—á–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑–Ω–æ–≤—É, —É–≤—ñ–º–∫–Ω—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"Failed to send offline status push: {e}")
        
        # –û–Ω–æ–≤–∏—Ç–∏
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üü¢ –ü–û–ß–ê–¢–ò –ü–†–ê–¶–Æ–í–ê–¢–ò" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats")],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(
                f"üöÄ <b>–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"üë• –í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω: {online}\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=kb
            )

    @router.callback_query(F.data == "work:refresh")
    async def refresh_menu(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é - –†–û–ó–®–ò–†–ï–ù–ê –í–ï–†–°–Ü–Ø"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        status_emoji = "üü¢" if driver.online else "üî¥"
        
        online = 0
        try:
            online = await get_online_drivers_count(config.database_path, driver.city)
        except:
            pass
        
        # –ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ
        earnings_today = 0
        commission_today = 0
        try:
            earnings_today, commission_today = await get_driver_earnings_today(
                config.database_path, 
                call.from_user.id
            )
        except:
            pass
        
        if active_order:
            order_status = (
                f"üì¶ <b>–ê–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{active_order.id}\n"
                f"üìç {active_order.pickup_address[:30]}... ‚Üí {active_order.destination_address[:30]}...\n"
                f"üí∞ {int(active_order.fare_amount):.0f} –≥—Ä–Ω\n\n"
            )
        else:
            order_status = ""
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{status_emoji} –£–í–Ü–ú–ö–ù–£–¢–ò –û–ù–õ–ê–ô–ù" if not driver.online else "üî¥ –ü–Ü–¢–ò –í –û–§–õ–ê–ô–ù",
                    callback_data="work:toggle"
                )],
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="work:stats"),
                    InlineKeyboardButton(text="üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫", callback_data="work:earnings")
                ],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="work:refresh")]
            ]
        )
        
        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤ –¥–ª—è –º—ñ—Å—Ç–∞
        city_invite_link = None
        if driver.city and driver.city in config.city_invite_links:
            city_invite_link = config.city_invite_links[driver.city]
        
        # –¢–µ–∫—Å—Ç –ø—Ä–æ –≥—Ä—É–ø—É
        if city_invite_link:
            group_text = f"üì¢ <a href=\"{city_invite_link}\">–ì—Ä—É–ø–∞ –≤–æ–¥—ñ—ó–≤ {driver.city}</a>\n"
        else:
            group_text = f"üì¢ –ì—Ä—É–ø–∞: {driver.city or '–Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ'}\n"
        
        text = (
            f"üöÄ <b>–ú–ï–ù–Æ –ö–ï–†–£–í–ê–ù–ù–Ø –†–û–ë–û–¢–û–Æ</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–í–æ–¥—ñ–π:</b> {driver.full_name}\n"
            f"üèô <b>–ú—ñ—Å—Ç–æ:</b> {driver.city or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"{group_text}"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
            f"üë• <b>–í–æ–¥—ñ—ó–≤ –æ–Ω–ª–∞–π–Ω:</b> {online} —á–æ–ª.\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ:</b> {earnings_today:.0f} –≥—Ä–Ω\n"
            f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è:</b> {commission_today:.0f} –≥—Ä–Ω\n\n"
            f"{order_status}"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí° <b>–®–≤–∏–¥–∫—ñ –¥—ñ—ó:</b>\n"
            f"‚Ä¢ –£–≤—ñ–º–∫–Ω—ñ—Ç—å üü¢ –û–Ω–ª–∞–π–Ω —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            f"‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤ –≥—Ä—É–ø—É <b>{driver.city or '–≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞'}</b>\n"
            f"‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ - –æ—Ç—Ä–∏–º—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        if call.message:
            await call.message.edit_text(text, reply_markup=kb)
        await call.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ!")

    @router.callback_query(F.data == "work:stats")
    async def show_stats_menu(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", callback_data="stats:today")],
                [InlineKeyboardButton(text="üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data="stats:week")],
                [InlineKeyboardButton(text="üìÖ –ú—ñ—Å—è—Ü—å", callback_data="stats:month")],
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="work:refresh")]
            ]
        )
        if call.message:
            await call.message.edit_text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:", reply_markup=kb)
        await call.answer()
    
    @router.callback_query(F.data == "stats:today")
    async def show_stats_today(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        from datetime import datetime, timedelta, timezone
        from app.storage.db import get_driver_order_history
        
        # –°—å–æ–≥–æ–¥–Ω—ñ –∑ –ø–æ—á–∞—Ç–∫—É –¥–Ω—è
        today_start = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–æ–¥—ñ—è
        all_orders = await get_driver_order_history(config.database_path, driver.tg_user_id, limit=100)
        
        # –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        today_orders = []
        for order in all_orders:
            if order.created_at:
                order_time = order.created_at
                if isinstance(order_time, str):
                    try:
                        order_time = datetime.fromisoformat(order_time)
                    except:
                        continue
                
                if isinstance(order_time, datetime):
                    if order_time.replace(tzinfo=timezone.utc) >= today_start:
                        today_orders.append(order)
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
        total_orders = len(today_orders)
        completed_orders = len([o for o in today_orders if o.status == 'completed'])
        cancelled_orders = len([o for o in today_orders if o.status == 'cancelled'])
        
        earnings = sum(o.fare_amount for o in today_orders if o.status == 'completed' and o.fare_amount)
        commission = earnings * 0.02  # 2% –∫–æ–º—ñ—Å—ñ—è
        net = earnings - commission
        
        text = (
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –°–¨–û–ì–û–î–ù–Ü</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b> {total_orders}\n"
            f"‚úÖ <b>–í–∏–∫–æ–Ω–∞–Ω–æ:</b> {completed_orders}\n"
            f"‚ùå <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ:</b> {cancelled_orders}\n\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {earnings:.0f} –≥—Ä–Ω\n"
            f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è (2%):</b> {commission:.0f} –≥—Ä–Ω\n"
            f"üíµ <b>–ß–∏—Å—Ç–∏–π:</b> {net:.0f} –≥—Ä–Ω\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="work:stats")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(text, reply_markup=kb)
        await call.answer()
    
    @router.callback_query(F.data == "stats:week")
    async def show_stats_week(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        from datetime import datetime, timedelta, timezone
        from app.storage.db import get_driver_order_history
        
        # 7 –¥–Ω—ñ–≤ —Ç–æ–º—É
        week_start = datetime.now(timezone.utc) - timedelta(days=7)
        
        all_orders = await get_driver_order_history(config.database_path, driver.tg_user_id, limit=200)
        
        week_orders = []
        for order in all_orders:
            if order.created_at:
                order_time = order.created_at
                if isinstance(order_time, str):
                    try:
                        order_time = datetime.fromisoformat(order_time)
                    except:
                        continue
                
                if isinstance(order_time, datetime):
                    if order_time.replace(tzinfo=timezone.utc) >= week_start:
                        week_orders.append(order)
        
        total_orders = len(week_orders)
        completed_orders = len([o for o in week_orders if o.status == 'completed'])
        cancelled_orders = len([o for o in week_orders if o.status == 'cancelled'])
        
        earnings = sum(o.fare_amount for o in week_orders if o.status == 'completed' and o.fare_amount)
        commission = earnings * 0.02
        net = earnings - commission
        
        # –°–µ—Ä–µ–¥–Ω—î –∑–∞ –¥–µ–Ω—å
        avg_per_day = earnings / 7 if earnings > 0 else 0
        
        text = (
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –¢–ò–ñ–î–ï–ù–¨</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b> {total_orders}\n"
            f"‚úÖ <b>–í–∏–∫–æ–Ω–∞–Ω–æ:</b> {completed_orders}\n"
            f"‚ùå <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ:</b> {cancelled_orders}\n\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {earnings:.0f} –≥—Ä–Ω\n"
            f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è (2%):</b> {commission:.0f} –≥—Ä–Ω\n"
            f"üíµ <b>–ß–∏—Å—Ç–∏–π:</b> {net:.0f} –≥—Ä–Ω\n\n"
            f"üìà <b>–°–µ—Ä–µ–¥–Ω—î/–¥–µ–Ω—å:</b> {avg_per_day:.0f} –≥—Ä–Ω\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="work:stats")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(text, reply_markup=kb)
        await call.answer()
    
    @router.callback_query(F.data == "stats:month")
    async def show_stats_month(call: CallbackQuery) -> None:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        from datetime import datetime, timedelta, timezone
        from app.storage.db import get_driver_order_history
        
        # 30 –¥–Ω—ñ–≤ —Ç–æ–º—É
        month_start = datetime.now(timezone.utc) - timedelta(days=30)
        
        all_orders = await get_driver_order_history(config.database_path, driver.tg_user_id, limit=500)
        
        month_orders = []
        for order in all_orders:
            if order.created_at:
                order_time = order.created_at
                if isinstance(order_time, str):
                    try:
                        order_time = datetime.fromisoformat(order_time)
                    except:
                        continue
                
                if isinstance(order_time, datetime):
                    if order_time.replace(tzinfo=timezone.utc) >= month_start:
                        month_orders.append(order)
        
        total_orders = len(month_orders)
        completed_orders = len([o for o in month_orders if o.status == 'completed'])
        cancelled_orders = len([o for o in month_orders if o.status == 'cancelled'])
        
        earnings = sum(o.fare_amount for o in month_orders if o.status == 'completed' and o.fare_amount)
        commission = earnings * 0.02
        net = earnings - commission
        
        # –°–µ—Ä–µ–¥–Ω—î –∑–∞ –¥–µ–Ω—å
        avg_per_day = earnings / 30 if earnings > 0 else 0
        
        text = (
            f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ú–Ü–°–Ø–¶–¨</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üì¶ <b>–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b> {total_orders}\n"
            f"‚úÖ <b>–í–∏–∫–æ–Ω–∞–Ω–æ:</b> {completed_orders}\n"
            f"‚ùå <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ:</b> {cancelled_orders}\n\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {earnings:.0f} –≥—Ä–Ω\n"
            f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è (2%):</b> {commission:.0f} –≥—Ä–Ω\n"
            f"üíµ <b>–ß–∏—Å—Ç–∏–π:</b> {net:.0f} –≥—Ä–Ω\n\n"
            f"üìà <b>–°–µ—Ä–µ–¥–Ω—î/–¥–µ–Ω—å:</b> {avg_per_day:.0f} –≥—Ä–Ω\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="work:stats")]
            ]
        )
        
        if call.message:
            await call.message.edit_text(text, reply_markup=kb)
        await call.answer()

    @router.message(F.location)
    async def share_location_with_client(message: Message) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –≤–æ–¥—ñ—è (–∑–∞–≤–∂–¥–∏) + –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º (—è–∫—â–æ —î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)"""
        if not message.from_user or not message.location:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –≤–æ–¥—ñ–π
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        lat = message.location.latitude
        lon = message.location.longitude
        
        # ‚≠ê –ó–ê–í–ñ–î–ò –û–ù–û–í–õ–Æ–Ñ–ú–û –ì–ï–û–õ–û–ö–ê–¶–Ü–Æ –í –ë–î
        from app.utils.location_tracker import update_driver_location
        await update_driver_location(config.database_path, message.from_user.id, lat, lon)
        
        # –ó–Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–æ–¥—ñ—è
        active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        # ‚≠ê –Ø–ö–©–û –Ñ –ê–ö–¢–ò–í–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É
        if active_order:
            try:
                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ live location –∫–ª—ñ—î–Ω—Ç—É (–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ 15 —Ö–≤–∏–ª–∏–Ω)
                await message.bot.send_location(
                    active_order.user_id,
                    latitude=lat,
                    longitude=lon,
                    live_period=900,  # 15 —Ö–≤–∏–ª–∏–Ω
                )
                
                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Google Maps",
                            url=f"https://www.google.com/maps/dir/?api=1&destination={lat},{lon}"
                        )]
                    ]
                )
                
                await message.bot.send_message(
                    active_order.user_id,
                    f"üìç <b>–í–æ–¥—ñ–π –ø–æ–¥—ñ–ª–∏–≤—Å—è –ª–æ–∫–∞—Ü—ñ—î—é!</b>\n\n"
                    f"üöó {driver.full_name}\n"
                    f"üöô {driver.car_make} {driver.car_model}\n"
                    f"üì± <code>{driver.phone}</code>\n\n"
                    f"–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –π–æ–≥–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è\n"
                    f"–ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 15 —Ö–≤–∏–ª–∏–Ω.",
                    reply_markup=kb
                )
                
                await message.answer(
                    f"‚úÖ <b>–õ–æ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É!</b>\n\n"
                    f"üë§ –ö–ª—ñ—î–Ω—Ç: {active_order.name}\n"
                    f"üì± {active_order.phone}\n\n"
                    f"–ö–ª—ñ—î–Ω—Ç —Ç–µ–ø–µ—Ä –±–∞—á–∏—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n"
                    f"‚è±Ô∏è Live tracking –∞–∫—Ç–∏–≤–Ω–∏–π: 15 —Ö–≤–∏–ª–∏–Ω",
                    reply_markup=driver_panel_keyboard()
                )
                
                logger.info(f"Driver {driver.tg_user_id} shared location with client for order #{active_order.id}")
                
            except Exception as e:
                logger.error(f"Failed to share location with client: {e}")
                await message.answer(
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç—É.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=driver_panel_keyboard()
                )
        else:
            # ‚≠ê –ù–ï–ú–ê–Ñ –ê–ö–¢–ò–í–ù–û–ì–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
            await message.answer(
                "‚úÖ <b>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                "üìç –í–∞—à–∞ –ø–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞.\n\n"
                "üí° –ö–æ–ª–∏ –≤–∏ –ø—Ä–∏–π–º–µ—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∫–ª—ñ—î–Ω—Ç –∑–º–æ–∂–µ\n"
                "–±–∞—á–∏—Ç–∏ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.",
                reply_markup=driver_panel_keyboard()
            )
            
            logger.info(f"Driver {driver.tg_user_id} updated location (no active order)")

    # ‚õî –í–ò–î–ê–õ–ï–ù–û: "–ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫" - —Ç–µ–ø–µ—Ä –≤ "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"

    @router.message(F.text == "üí≥ –ö–æ–º—ñ—Å—ñ—è")
    async def commission(message: Message) -> None:
        """–ö–æ–º—ñ—Å—ñ—è"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await message.delete()
        except:
            pass
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, message.from_user.id)
        
        if unpaid > 0:
            # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ö–æ–º—ñ—Å—ñ—é —Å–ø–ª–∞—á–µ–Ω–æ", callback_data=f"commission:paid:{driver.id}")]
                ]
            )
            
            await message.answer(
                f"üí≥ <b>–ö–æ–º—ñ—Å—ñ—è –¥–æ —Å–ø–ª–∞—Ç–∏:</b> {unpaid:.2f} –≥—Ä–Ω\n\n"
                f"üìã <b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:</b>\n"
                f"üí≥ –ö–∞—Ä—Ç–∫–∞: <code>{config.payment_card or '4149499901234567'}</code>\n\n"
                f"‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b>\n"
                f"1. –ü–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –∫–∞—Ä—Ç–∫—É\n"
                f"2. –¢—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ\n"
                f"3. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å –ø–ª–∞—Ç—ñ–∂\n"
                f"4. –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—è –±—É–¥–µ –∞–Ω—É–ª—å–æ–≤–∞–Ω–∞\n\n"
                f"üí° –ù–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏!",
                reply_markup=kb
            )
        else:
            await message.answer("‚úÖ –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á–µ–Ω–∞!")

    @router.callback_query(F.data.startswith("commission:paid:"))
    async def commission_paid_request(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –ø–æ–≤—ñ–¥–æ–º–ª—è—î —â–æ —Å–ø–ª–∞—Ç–∏–≤ –∫–æ–º—ñ—Å—ñ—é"""
        if not call.from_user:
            return
        
        await call.answer()
        
        driver_id = int(call.data.split(":", 2)[2])
        
        driver = await get_driver_by_id(config.database_path, driver_id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –≤–æ–¥—ñ–π
        if driver.tg_user_id != call.from_user.id:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, call.from_user.id)
        
        if unpaid <= 0:
            await call.answer("‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –±–æ—Ä–≥—É", show_alert=True)
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–æ–¥—ñ—é
        try:
            await call.message.edit_text(
                f"‚è≥ <b>–ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ</b>\n\n"
                f"üí≥ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n\n"
                f"–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                f"–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å."
            )
        except:
            pass
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º
        admin_ids = config.bot.admin_ids
        
        for admin_id in admin_ids:
            try:
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
                admin_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"commission:confirm:{driver.id}:{call.from_user.id}"),
                            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"commission:reject:{driver.id}:{call.from_user.id}")
                        ]
                    ]
                )
                
                await call.bot.send_message(
                    chat_id=admin_id,
                    text=(
                        f"üí≥ <b>–ó–ê–ü–ò–¢ –ù–ê –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –û–ü–õ–ê–¢–ò –ö–û–ú–Ü–°–Ü–á</b>\n\n"
                        f"üë§ –í–æ–¥—ñ–π: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_model} ({driver.car_plate})\n"
                        f"üí≥ –°—É–º–∞ –∫–æ–º—ñ—Å—ñ—ó: <b>{unpaid:.2f} –≥—Ä–Ω</b>\n\n"
                        f"üìã –†–µ–∫–≤—ñ–∑–∏—Ç–∏ (–∫—É–¥–∏ –º–∞–≤ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏):\n"
                        f"üí≥ {config.payment_card or '4149499901234567'}\n\n"
                        f"‚ö†Ô∏è <b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤</b>\n"
                        f"—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ –≤—ñ–¥—Ö–∏–ª—ñ—Ç—å –ø–ª–∞—Ç—ñ–∂:"
                    ),
                    reply_markup=admin_kb
                )
                
                logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó {unpaid:.2f} –≥—Ä–Ω –≤—ñ–¥ –≤–æ–¥—ñ—è {driver.id} –∞–¥–º—ñ–Ω—É {admin_id}")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
        
        await call.answer("‚úÖ –ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É", show_alert=True)
    
    @router.callback_query(F.data.startswith("commission:confirm:"))
    async def commission_confirm(call: CallbackQuery) -> None:
        """–ê–¥–º—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –æ–ø–ª–∞—Ç—É –∫–æ–º—ñ—Å—ñ—ó"""
        if not call.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∞–¥–º—ñ–Ω
        if call.from_user.id not in config.bot.admin_ids:
            await call.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", show_alert=True)
            return
        
        await call.answer()
        
        parts = call.data.split(":", 3)
        driver_id = int(parts[2])
        driver_tg_id = int(parts[3])
        
        driver = await get_driver_by_id(config.database_path, driver_id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, driver_tg_id)
        
        if unpaid <= 0:
            await call.answer("‚ÑπÔ∏è –ö–æ–º—ñ—Å—ñ—è –≤–∂–µ —Å–ø–ª–∞—á–µ–Ω–∞", show_alert=True)
            try:
                await call.message.edit_text(
                    f"‚ÑπÔ∏è <b>–ö–æ–º—ñ—Å—ñ—è –≤–∂–µ –±—É–ª–∞ —Å–ø–ª–∞—á–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ</b>\n\n"
                    f"üë§ –í–æ–¥—ñ–π: {driver.full_name}"
                )
            except:
                pass
            return
        
        # –ê–ù–£–õ–Æ–í–ê–¢–ò –ö–û–ú–Ü–°–Ü–Æ –í –ë–î
        await mark_commission_paid(config.database_path, driver_tg_id)
        
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω {call.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ–ø–ª–∞—Ç—É –∫–æ–º—ñ—Å—ñ—ó {unpaid:.2f} –≥—Ä–Ω –≤—ñ–¥ –≤–æ–¥—ñ—è {driver.id}")
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
        try:
            await call.message.edit_text(
                f"‚úÖ <b>–û–ü–õ–ê–¢–£ –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û</b>\n\n"
                f"üë§ –í–æ–¥—ñ–π: {driver.full_name}\n"
                f"üí≥ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n"
                f"üë®‚Äçüíº –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤: @{call.from_user.username or call.from_user.first_name}\n"
                f"‚è∞ –ß–∞—Å: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n"
                f"‚úÖ –ö–æ–º—ñ—Å—ñ—è –∞–Ω—É–ª—å–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ"
            )
        except:
            pass
        
        # –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤–æ–¥—ñ—è –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        try:
            await call.bot.send_message(
                chat_id=driver_tg_id,
                text=(
                    f"‚úÖ <b>–û–ü–õ–ê–¢–£ –ö–û–ú–Ü–°–Ü–á –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–û!</b>\n\n"
                    f"üí≥ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n\n"
                    f"–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∫–æ–º—ñ—Å—ñ—è –∞–Ω—É–ª—å–æ–≤–∞–Ω–∞.\n"
                    f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É! üöó"
                )
            )
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–æ–¥—ñ—è {driver_tg_id}: {e}")
        
        await call.answer("‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ç–∞ –∫–æ–º—ñ—Å—ñ—é –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ", show_alert=True)
    
    @router.callback_query(F.data.startswith("commission:reject:"))
    async def commission_reject(call: CallbackQuery) -> None:
        """–ê–¥–º—ñ–Ω –≤—ñ–¥—Ö–∏–ª—è—î –æ–ø–ª–∞—Ç—É –∫–æ–º—ñ—Å—ñ—ó"""
        if not call.from_user:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∞–¥–º—ñ–Ω
        if call.from_user.id not in config.bot.admin_ids:
            await call.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤", show_alert=True)
            return
        
        await call.answer()
        
        parts = call.data.split(":", 3)
        driver_id = int(parts[2])
        driver_tg_id = int(parts[3])
        
        driver = await get_driver_by_id(config.database_path, driver_id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        unpaid = await get_driver_unpaid_commission(config.database_path, driver_tg_id)
        
        logger.info(f"‚ùå –ê–¥–º—ñ–Ω {call.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –æ–ø–ª–∞—Ç—É –∫–æ–º—ñ—Å—ñ—ó –≤—ñ–¥ –≤–æ–¥—ñ—è {driver.id}")
        
        # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
        try:
            await call.message.edit_text(
                f"‚ùå <b>–û–ü–õ–ê–¢–£ –í–Ü–î–•–ò–õ–ï–ù–û</b>\n\n"
                f"üë§ –í–æ–¥—ñ–π: {driver.full_name}\n"
                f"üí≥ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n"
                f"üë®‚Äçüíº –í—ñ–¥—Ö–∏–ª–∏–≤: @{call.from_user.username or call.from_user.first_name}\n"
                f"‚è∞ –ß–∞—Å: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n"
                f"‚ö†Ô∏è –í–æ–¥—ñ—è –±—É–¥–µ —Å–ø–æ–≤—ñ—â–µ–Ω–æ"
            )
        except:
            pass
        
        # –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤–æ–¥—ñ—è –ø—Ä–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        try:
            await call.bot.send_message(
                chat_id=driver_tg_id,
                text=(
                    f"‚ùå <b>–û–ü–õ–ê–¢–£ –ö–û–ú–Ü–°–Ü–á –í–Ü–î–•–ò–õ–ï–ù–û</b>\n\n"
                    f"üí≥ –°—É–º–∞: {unpaid:.2f} –≥—Ä–Ω\n\n"
                    f"‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∏ –º–æ–∂–ª–∏–≤–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:\n"
                    f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∞ –Ω–∞ –∫–∞—Ä—Ç–∫—É\n"
                    f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞\n"
                    f"‚Ä¢ –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞\n\n"
                    f"üìû –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è.\n\n"
                    f"–ü—ñ—Å–ª—è –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –æ–ø–ª–∞—Ç–∏\n"
                    f"–Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üí≥ –ö–æ–º—ñ—Å—ñ—è'"
                )
            )
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–æ–¥—ñ—è {driver_tg_id}: {e}")
        
        await call.answer("‚ùå –û–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –≤–æ–¥—ñ—è —Å–ø–æ–≤—ñ—â–µ–Ω–æ", show_alert=True)

    @router.message(F.text == "üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫")
    async def history(message: Message) -> None:
        """–Ü—Å—Ç–æ—Ä—ñ—è"""
        if not message.from_user:
            return
        
        orders = await get_driver_order_history(config.database_path, message.from_user.id, limit=5)
        
        if not orders:
            await message.answer(
                "üìú –ü–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        text = "üìú <b>–û—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ—ó–∑–¥–æ–∫:</b>\n\n"
        for i, o in enumerate(orders, 1):
            text += f"{i}. {o.pickup_address[:20]}... ‚Üí {o.destination_address[:20]}...\n"
            text += f"   üí∞ {o.fare_amount or 0:.0f} –≥—Ä–Ω\n\n"
        
        await message.answer(text, reply_markup=driver_panel_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
    @router.callback_query(F.data.startswith("accept_order:"))
    async def accept(call: CallbackQuery) -> None:
        """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            logger.error("‚ùå accept_order: call.from_user is None")
            return
        
        logger.info(f"üîî accept_order callback from user {call.from_user.id} (username: @{call.from_user.username})")
        
        # RATE LIMITING: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 20 —Å–ø—Ä–æ–± –Ω–∞ –≥–æ–¥–∏–Ω—É)
        if not check_rate_limit(call.from_user.id, "accept_order", max_requests=20, window_seconds=3600):
            time_until_reset = get_time_until_reset(call.from_user.id, "accept_order", window_seconds=3600)
            await call.answer(
                f"‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑: {format_time_remaining(time_until_reset)}",
                show_alert=True
            )
            logger.warning(f"‚è±Ô∏è Driver {call.from_user.id} exceeded accept_order rate limit")
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            logger.error(f"‚ùå Driver not found for user {call.from_user.id}")
            await call.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π.\n"
                "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start ‚Üí –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º",
                show_alert=True
            )
            return
        
        # ‚ö†Ô∏è –ü–ï–†–ï–í–Ü–†–ö–ê: –í–æ–¥—ñ–π –º–∞—î –±—É—Ç–∏ –û–ù–õ–ê–ô–ù —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if not driver.online:
            logger.warning(f"‚ö†Ô∏è Driver {call.from_user.id} tried to accept order while OFFLINE")
            await call.answer(
                "‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
                "–ü—Ä–∏—á–∏–Ω–∞: –í–∏ –≤ —Å—Ç–∞—Ç—É—Å—ñ üî¥ –û–§–õ–ê–ô–ù\n\n"
                "üí° –£–≤—ñ–º–∫–Ω—ñ—Ç—å üü¢ –û–Ω–ª–∞–π–Ω –≤ –º–µ–Ω—é:\n"
                "üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è ‚Üí üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É ‚Üí üü¢ –£–í–Ü–ú–ö–ù–£–¢–ò –û–ù–õ–ê–ô–ù",
                show_alert=True
            )
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.status != "pending":
            await call.answer("‚ùå –í–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∫–ª–∞—Å—É –∞–≤—Ç–æ –¥–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ
        driver_class = (driver.car_class or 'economy')
        order_class = (order.car_class or 'economy')
        if driver_class != order_class:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é –∑–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
            from app.handlers.car_classes import get_car_class_name
            d_name = get_car_class_name(driver_class)
            o_name = get_car_class_name(order_class)
            await call.answer(
                "‚ùå –¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–ª–∞—Å—É –∞–≤—Ç–æ\n\n"
                f"üîò –í–∞—à –∫–ª–∞—Å: {d_name}\n"
                f"üéØ –ü–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–ª–∞—Å: {o_name}\n\n"
                "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–π–º–∞—Ç–∏ —Ç–∞–∫—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –∑–º—ñ–Ω—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ —É –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö (üöó –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ)",
                show_alert=True
            )
            return

        success = await accept_order(config.database_path, order_id, driver.id)
        
        if success:
            # –°–ö–ê–°–£–í–ê–¢–ò –¢–ê–ô–ú–ï–†: –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º
            cancel_order_timeout(order_id)
            
            # –°–ö–ê–°–£–í–ê–¢–ò –ü–†–Ü–û–†–ò–¢–ï–¢–ù–ò–ô –¢–ê–ô–ú–ï–†
            from app.utils.priority_order_manager import PriorityOrderManager
            PriorityOrderManager.cancel_priority_timer(order_id)
            
            logger.info(f"‚úÖ –¢–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} (–ø—Ä–∏–π–Ω—è—Ç–æ –≤–æ–¥—ñ—î–º)")
            
            await call.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!", show_alert=True)
            
            # ‚≠ê –ù–ê–î–Ü–°–õ–ê–¢–ò LIVE –ì–ï–û–õ–û–ö–ê–¶–Ü–Æ –í–û–î–Ü–Ø –ö–õ–Ü–Ñ–ù–¢–£
            location_message_sent = False
            if driver.last_lat and driver.last_lon:
                try:
                    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ live location –∫–ª—ñ—î–Ω—Ç—É (15 —Ö–≤–∏–ª–∏–Ω —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó)
                    await call.bot.send_location(
                        order.user_id,
                        latitude=driver.last_lat,
                        longitude=driver.last_lon,
                        live_period=900,  # 15 —Ö–≤–∏–ª–∏–Ω
                    )
                    location_message_sent = True
                    logger.info(f"üìç Live location sent to client for order #{order_id}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to send live location: {e}")
            
            # –Ø–∫—â–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞
            if not location_message_sent:
                logger.warning(f"‚ö†Ô∏è –í–æ–¥—ñ–π #{driver.id} –Ω–µ –º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
            
            # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —ñ —á–∞—Å
            distance_text = ""
            eta_text = ""
            if order.distance_m:
                km = order.distance_m / 1000.0
                distance_text = f"\nüìè <b>–í—ñ–¥—Å—Ç–∞–Ω—å:</b> {km:.1f} –∫–º"
                # –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ 50 –∫–º/–≥–æ–¥ –≤ –º—ñ—Å—Ç—ñ)
                eta_minutes = int((km / 50) * 60)
                if eta_minutes > 0:
                    eta_text = f"\n‚è± <b>–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∏–π —á–∞—Å:</b> {eta_minutes} —Ö–≤"
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ Plus Codes
            clean_pickup = clean_address(order.pickup_address)
            clean_destination = clean_address(order.destination_address)
            
            # –¢–µ–∫—Å—Ç –ø—Ä–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
            location_status = "üìç <b>–¢—Ä–∞–Ω—Å–ª—è—Ü—ñ—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–∞</b> ‚¨ÜÔ∏è" if location_message_sent else "‚ö†Ô∏è <b>–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –≤–æ–¥—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>"
            
            # –¢–µ–∫—Å—Ç –ø—Ä–æ –æ–ø–ª–∞—Ç—É
            payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
            payment_text = "–ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "–ö–∞—Ä—Ç–∫–∞"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
            kb_client_buttons = []
            
            # –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç–∫–∏ (—è–∫—â–æ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é)
            if order.payment_method == "card" and driver.card_number:
                kb_client_buttons.append([
                    InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞ –≤–æ–¥—ñ—è", callback_data=f"show_card:{order_id}")
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –∑–≤'—è–∑–∫—É –∑ –≤–æ–¥—ñ—î–º
            kb_client_buttons.append([
                InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–æ–¥—ñ—î–º", url=f"tel:{driver.phone}")
            ])
            
            # –ö–Ω–æ–ø–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É
            if order.pickup_lat and order.pickup_lon and order.dest_lat and order.dest_lon:
                kb_client_buttons.append([
                    InlineKeyboardButton(
                        text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—ñ",
                        url=f"https://www.google.com/maps/dir/?api=1&origin={order.pickup_lat},{order.pickup_lon}&destination={order.dest_lat},{order.dest_lon}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ –∑–∞—Ä–∞–∑ –≤–æ–¥—ñ–π
            if driver.last_lat and driver.last_lon:
                kb_client_buttons.append([
                    InlineKeyboardButton(
                        text="üìç –î–µ –∑–∞—Ä–∞–∑ –≤–æ–¥—ñ–π?",
                        url=f"https://www.google.com/maps?q={driver.last_lat},{driver.last_lon}"
                    )
                ])
            
            kb_client = InlineKeyboardMarkup(inline_keyboard=kb_client_buttons)
            
            # –†–û–ó–®–ò–†–ï–ù–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
            client_message = (
                f"‚úÖ <b>–í–û–î–Ü–ô –ü–†–ò–ô–ù–Ø–í –í–ê–®–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!</b>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üë§ <b>–í–æ–¥—ñ–π:</b> {driver.full_name}\n"
                f"üöó <b>–ê–≤—Ç–æ–º–æ–±—ñ–ª—å:</b> {driver.car_make} {driver.car_model}\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {driver.car_plate}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{driver.phone}</code>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b> {clean_pickup}\n"
                f"üéØ <b>–ö—É–¥–∏:</b> {clean_destination}"
                f"{distance_text}"
                f"{eta_text}\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n"
                f"{payment_emoji} <b>–û–ø–ª–∞—Ç–∞:</b> {payment_text}\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"{location_status}\n\n"
                f"üí° <b>–í–æ–¥—ñ–π –≤–∂–µ —ó–¥–µ –¥–æ –≤–∞—Å!</b>\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ.\n\n"
                f"üöó –ì–∞—Ä–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏!"
            )
            
            await call.bot.send_message(
                order.user_id,
                client_message,
                reply_markup=kb_client
            )
            
            # –í–ò–î–ê–õ–ò–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ)
            if call.message and order.group_message_id:
                try:
                    # –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ
                    await call.bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=order.group_message_id,
                        text="‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è</b>\n\n"
                             f"–í–æ–¥—ñ–π: {driver.full_name}\n"
                             f"–°—Ç–∞—Ç—É—Å: –í —Ä–æ–±–æ—Ç—ñ"
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ: {e}")
            
            # ‚≠ê –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –û–î–ù–ï –º–µ–Ω—é –∑ Reply Keyboard
            
            # 1. –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ –≤–æ–¥—ñ—è
            try:
                # –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–æ—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç)
                for i in range(1, 21):
                    try:
                        await call.bot.delete_message(
                            chat_id=driver.tg_user_id,
                            message_id=call.message.message_id - i if call.message else 0
                        )
                    except:
                        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            
            # 2. –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å —è–∫—â–æ —î
            distance_text = ""
            if order.distance_m:
                km = order.distance_m / 1000.0
                distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
            
            payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
            payment_text = "–ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "–ö–∞—Ä—Ç–∫–∞"
            
            # ‚≠ê –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ Plus Codes
            clean_pickup = clean_address(order.pickup_address)
            clean_destination = clean_address(order.destination_address)
            
            # ‚≠ê –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps —è–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            pickup_link = ""
            destination_link = ""
            
            if order.pickup_lat and order.pickup_lon:
                pickup_link = f"<a href='https://www.google.com/maps?q={order.pickup_lat},{order.pickup_lon}'>üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
            
            if order.dest_lat and order.dest_lon:
                destination_link = f"<a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
            
            # 4. ‚≠ê REPLY KEYBOARD - –í–ï–õ–ò–ö–ï –ú–ï–ù–Æ –ö–ï–†–£–í–ê–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø–ú
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            
            kb_trip = ReplyKeyboardMarkup(
                keyboard=[
                    # ======== –û–°–ù–û–í–ù–ï –ö–ï–†–£–í–ê–ù–ù–Ø ========
                    # –í–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞ "–Ø –Ω–∞ –º—ñ—Å—Ü—ñ" (–ø–µ—Ä—à–∏–π –∫—Ä–æ–∫)
                    [KeyboardButton(text="üìç –Ø –ù–ê –ú–Ü–°–¶–Ü –ü–û–î–ê–ß–Ü")],
                    # –í–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞ "–ö–ª—ñ—î–Ω—Ç –≤ –∞–≤—Ç–æ" (–¥—Ä—É–≥–∏–π –∫—Ä–æ–∫)
                    [KeyboardButton(text="‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û")],
                    # –í–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É" (—Ç—Ä–µ—Ç—ñ–π –∫—Ä–æ–∫)
                    [KeyboardButton(text="üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£")],
                    
                    # ======== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á ========
                    # –†—è–¥ –∑ 2 –∫–Ω–æ–ø–∫–∞–º–∏
                    [
                        KeyboardButton(text="üìû –ö–ª—ñ—î–Ω—Ç", request_contact=False),
                        KeyboardButton(text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç")
                    ],
                    # –†—è–¥ –∑ 2 –∫–Ω–æ–ø–∫–∞–º–∏
                    [
                        KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
                        KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
                    ]
                ],
                resize_keyboard=True,
                one_time_keyboard=False,
                input_field_placeholder="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–æ—é"
            )
            
            # –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
            trip_management_text = (
                f"‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!</b>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"<b>üìã –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:</b>\n\n"
                f"üÜî –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: <b>#{order_id}</b>\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {order.name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code>\n\n"
                f"üìç <b>–ó–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞—Ç–∏:</b>\n{clean_pickup}\n"
                f"{pickup_link}\n\n"
                f"üéØ <b>–ö—É–¥–∏ –≤–µ–∑—Ç–∏:</b>\n{clean_destination}\n"
                f"{destination_link}{distance_text}\n\n"
                f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: <b>{int(order.fare_amount):.0f} –≥—Ä–Ω</b>\n"
                f"{payment_emoji} –û–ø–ª–∞—Ç–∞: {payment_text}\n"
            )
            
            if order.comment:
                trip_management_text += f"\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –∫–ª—ñ—î–Ω—Ç–∞:</b>\n<i>{order.comment}</i>\n"
            
            trip_management_text += (
                f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"<b>üìç –ï–¢–ê–ü–ò –í–ò–ö–û–ù–ê–ù–ù–Ø:</b>\n\n"
                f"1Ô∏è‚É£ <b>–á–¥—å—Ç–µ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞</b>\n"
                f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>üìç –Ø –ù–ê –ú–Ü–°–¶–Ü –ü–û–î–ê–ß–Ü</b>\n\n"
                f"2Ô∏è‚É£ <b>–ö–ª—ñ—î–Ω—Ç —Å—ñ–≤ –≤ –∞–≤—Ç–æ</b>\n"
                f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û</b>\n\n"
                f"3Ô∏è‚É£ <b>–î–æ–≤–µ–∑–ª–∏ –¥–æ –º—ñ—Å—Ü—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è</b>\n"
                f"   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: <b>üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£</b>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üí° <b>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è!</b>\n"
                f"üöó –ì–∞—Ä–Ω–æ—ó –¥–æ—Ä–æ–≥–∏!"
            )
            
            await call.bot.send_message(
                driver.tg_user_id,
                trip_management_text,
                reply_markup=kb_trip,
                disable_web_page_preview=True
            )
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ (—è–∫—â–æ —Ü–µ –≥—Ä—É–ø–∞)
            if call.message:
                try:
                    await call.message.delete()
                except:
                    pass
    
    @router.callback_query(F.data.startswith("reject_order:"))
    async def reject_order_handler(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –≤—ñ–¥—Ö–∏–ª—è—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        order_id = int(call.data.split(":")[1])
        
        # –î–æ–¥–∞—Ç–∏ –≤–æ–¥—ñ—è –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import add_rejected_driver
        await add_rejected_driver(config.database_path, order_id, driver.id)
        
        await call.answer("‚ùå –í–∏ –≤—ñ–¥—Ö–∏–ª–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=False)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –≤–æ–¥—ñ—è
        if call.message:
            try:
                await call.message.delete()
            except:
                pass
        
        # –í–Ü–î–ü–†–ê–í–ò–¢–ò –ü–†–Ü–û–†–ò–¢–ï–¢–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –í –ì–†–£–ü–£ –ü–†–ò –í–Ü–î–•–ò–õ–ï–ù–ù–Ü
        from app.utils.priority_order_manager import PriorityOrderManager
        PriorityOrderManager.cancel_priority_timer(order_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—Å–µ —â–µ pending (—Ç–æ–±—Ç–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ)
        order = await get_order_by_id(config.database_path, order_id)
        if order and order.status == "pending" and not order.group_message_id:
            # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Ç—ñ–ª—å–∫–∏ —É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤ - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
            logger.info(f"üì¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π –≤–æ–¥—ñ–π –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤ –≥—Ä—É–ø—É")
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
            from app.config.config import get_city_group_id
            from app.storage.db import get_user_by_id
            
            user = await get_user_by_id(config.database_path, order.user_id)
            client_city = user.city if user else None
            city_group_id = get_city_group_id(config, client_city)
            
            if city_group_id:
                from app.utils.priority_order_manager import _send_to_group
                order_details = {
                    'name': order.name,
                    'phone': order.phone,
                    'pickup': order.pickup_address,
                    'destination': order.destination_address,
                    'comment': order.comment,
                    'pickup_lat': order.pickup_lat,
                    'pickup_lon': order.pickup_lon,
                    'dest_lat': order.dest_lat,
                    'dest_lon': order.dest_lon,
                    'distance_m': order.distance_m,
                    'duration_s': order.duration_s,
                    'estimated_fare': order.fare_amount,
                    'car_class': order.car_class,
                    'db_path': config.database_path,
                }
                await _send_to_group(call.bot, order_id, city_group_id, order_details)
        
        logger.info(f"‚ùå –í–æ–¥—ñ–π {driver.full_name} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")

    @router.callback_query(F.data.startswith("arrived:"))
    async def driver_arrived(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –ø—Ä–∏—ó—Ö–∞–≤ –Ω–∞ –º—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        await call.answer("üìç –ö–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!", show_alert=True)
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        try:
            await call.bot.send_message(
                order.user_id,
                f"üìç <b>–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ!</b>\n\n"
                f"üöó {driver.full_name}\n"
                f"üì± <code>{driver.phone}</code>\n\n"
                f"–í–æ–¥—ñ–π —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å!"
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # ‚≠ê –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–µ–ª–∏–∫—É —á–µ—Ä–≤–æ–Ω—É –∫–Ω–æ–ø–∫—É "–ó–ê–í–ï–†–®–ò–¢–ò"
        distance_text = ""
        if order.distance_m:
            km = order.distance_m / 1000.0
            distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
        
        payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
        payment_text = "–ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "–ö–∞—Ä—Ç–∫–∞"
        
        updated_text = (
            f"üöó <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {order.name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{order.phone}</code>\n\n"
            f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b>\n   {order.pickup_address}\n\n"
            f"üìç <b>–ö—É–¥–∏:</b>\n   {order.destination_address}{distance_text}\n\n"
            f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n"
            f"{payment_emoji} <b>–û–ø–ª–∞—Ç–∞:</b> {payment_text}\n"
        )
        
        if order.comment:
            updated_text += f"\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b>\n   {order.comment}\n"
        
        updated_text += (
            f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üìç –ù–∞ –º—ñ—Å—Ü—ñ –ø–æ–¥–∞—á—ñ\n\n"
            f"üëá <i>–ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç —Å—è–¥–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è</i>"
        )
        
        # –í–µ–ª–∏–∫–∞ —á–µ—Ä–≤–æ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£ - –§—ñ–Ω—ñ—à", callback_data=f"complete:{order_id}")],
                [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—ñ", callback_data=f"manage:{order_id}")]
            ]
        )
        
        if call.message:
            try:
                await call.message.edit_text(updated_text, reply_markup=kb)
            except:
                await call.message.answer(updated_text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("start:"))
    async def start_trip(call: CallbackQuery) -> None:
        """–ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É - –≤–æ–¥—ñ–π —Ä—É—Ö–∞—î—Ç—å—Å—è –¥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await start_order(config.database_path, order_id, driver.id)
        
        await call.answer("üöó –í –¥–æ—Ä–æ–∑—ñ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞!", show_alert=True)
        
        # ‚≠ê –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤–µ–ª–∏–∫—É –∫–Ω–æ–ø–∫—É "–Ø –ù–ê –ú–Ü–°–¶–Ü"
        distance_text = ""
        if order.distance_m:
            km = order.distance_m / 1000.0
            distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
        
        payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
        payment_text = "–ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "–ö–∞—Ä—Ç–∫–∞"
        
        updated_text = (
            f"üöó <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {order.name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{order.phone}</code>\n\n"
            f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b>\n   {order.pickup_address}\n\n"
            f"üìç <b>–ö—É–¥–∏:</b>\n   {order.destination_address}{distance_text}\n\n"
            f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n"
            f"{payment_emoji} <b>–û–ø–ª–∞—Ç–∞:</b> {payment_text}\n"
        )
        
        if order.comment:
            updated_text += f"\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b>\n   {order.comment}\n"
        
        updated_text += (
            f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üöó –í –¥–æ—Ä–æ–∑—ñ\n\n"
            f"üëá <i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –ø—Ä–∏—ó–¥–µ—Ç–µ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞</i>"
        )
        
        # –í–µ–ª–∏–∫–∞ –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∞ –∫–Ω–æ–ø–∫–∞ "–Ø –ù–ê –ú–Ü–°–¶–Ü"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –Ø –ù–ê –ú–Ü–°–¶–Ü - –ü—Ä–∏—ó—Ö–∞–≤", callback_data=f"arrived:{order_id}")],
                [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—ñ", callback_data=f"manage:{order_id}")]
            ]
        )
        
        if call.message:
            try:
                await call.message.edit_text(updated_text, reply_markup=kb)
            except:
                await call.message.answer(updated_text, reply_markup=kb)

    @router.callback_query(F.data.startswith("complete:"))
    async def complete_trip(call: CallbackQuery) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É, —ñ–Ω–∞–∫—à–µ –º—ñ–Ω—ñ–º—É–º 100
        fare = order.fare_amount if order.fare_amount else 100.0
        distance_m = order.distance_m if order.distance_m else 0
        duration_s = order.duration_s if order.duration_s else 0
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó
        from app.storage.db import get_latest_tariff, insert_payment, Payment
        tariff = await get_latest_tariff(config.database_path)
        commission_rate = tariff.commission_percent if tariff else 0.02
        commission = fare * commission_rate
        
        await complete_order(
            config.database_path,
            order_id,
            driver.id,
            fare,
            distance_m,
            duration_s,
            commission
        )
        # –ó–∞–ø–∏—Å —É payments –¥–ª—è –æ–±–ª—ñ–∫—É –∫–æ–º—ñ—Å—ñ—ó
        payment = Payment(
            id=None,
            order_id=order_id,
            driver_id=driver.id,
            amount=fare,
            commission=commission,
            commission_paid=False,
            payment_method=order.payment_method or 'cash',
            created_at=datetime.now(timezone.utc),
        )
        await insert_payment(config.database_path, payment)
        
        await call.answer(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! {fare:.0f} –≥—Ä–Ω", show_alert=True)
        
        if call.message:
            await call.message.edit_text(f"‚úÖ –ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüí∞ {fare:.0f} –≥—Ä–Ω")
        
        # üåü –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –≤–æ–¥—ñ—è
        try:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∑ –∑—ñ—Ä–∫–∞–º–∏
            rating_buttons = [
                [
                    InlineKeyboardButton(text="‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:1:{order_id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:2:{order_id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:3:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:4:{order_id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:5:{order_id}"),
                ],
                [
                    InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"rate:skip:{order_id}")
                ]
            ]
            
            rating_kb = InlineKeyboardMarkup(inline_keyboard=rating_buttons)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
            await call.bot.send_message(
                chat_id=order.user_id,
                text=(
                    "‚úÖ <b>–ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare:.0f} –≥—Ä–Ω\n"
                    f"üöó –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {'üí≥ –ö–∞—Ä—Ç–∫–∞' if order.payment_method == 'card' else 'üíµ –ì–æ—Ç—ñ–≤–∫–∞'}\n\n"
                    "‚≠ê <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–æ–¥—ñ—è:</b>\n"
                    "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —è–∫—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—É!"
                ),
                reply_markup=rating_kb
            )
            logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –≤–æ–¥—ñ—è {driver.id} –∫–ª—ñ—î–Ω—Ç—É {order.user_id} –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É: {e}")

    @router.message(F.text == "üíº –ì–∞–º–∞–Ω–µ—Ü—å")
    async def show_wallet(message: Message) -> None:
        """–ì–∞–º–∞–Ω–µ—Ü—å –≤–æ–¥—ñ—è - –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–ª–∞—Ç–∏"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
        try:
            await message.delete()
        except:
            pass
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        if driver.card_number:
            text = (
                f"üíº <b>–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å</b>\n\n"
                f"üí≥ –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
                f"<code>{driver.card_number}</code>\n\n"
                f"‚ÑπÔ∏è –¶—è –∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç–∞–º,\n"
                f"—è–∫—ñ –æ–±–∏—Ä–∞—é—Ç—å –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–∫–æ—é."
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É", callback_data="wallet:edit")]
                ]
            )
        else:
            text = (
                f"üíº <b>–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å</b>\n\n"
                f"‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –¥–æ–¥–∞–Ω–∞\n\n"
                f"–î–æ–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–∫—É, —â–æ–± –∫–ª—ñ—î–Ω—Ç–∏ –º–æ–≥–ª–∏\n"
                f"–ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏ –≤–∞–º –æ–ø–ª–∞—Ç—É."
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É", callback_data="wallet:add")]
                ]
            )
        
        await message.answer(text, reply_markup=kb)
    
    @router.callback_query(F.data.in_(["wallet:add", "wallet:edit"]))
    async def wallet_add_edit(call: CallbackQuery) -> None:
        """–î–æ–¥–∞—Ç–∏/–∑–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É"""
        await call.answer()
        await call.message.answer(
            "üí≥ <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: 1234 5678 9012 3456\n"
            "–∞–±–æ: 1234567890123456\n\n"
            "–¶—è –∫–∞—Ä—Ç–∫–∞ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –∫–ª—ñ—î–Ω—Ç–∞–º\n"
            "–¥–ª—è –æ–ø–ª–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏."
        )
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ FSM, –∞–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –∑—Ä–æ–±–∏–º–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
    
    @router.message(F.text.regexp(r'^\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$'))
    async def save_card_number(message: Message) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏"""
        if not message.from_user or not message.text:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver or driver.status != "approved":
            return
        
        card_number = message.text.strip().replace(" ", "")
        # –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —è–∫ 1234 5678 9012 3456
        formatted_card = f"{card_number[0:4]} {card_number[4:8]} {card_number[8:12]} {card_number[12:16]}"
        
        # –û–Ω–æ–≤–∏—Ç–∏ –≤ –ë–î
        import aiosqlite
        import logging
        logger = logging.getLogger(__name__)
        
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            cursor = await db.execute(
                "UPDATE drivers SET card_number = ? WHERE tg_user_id = ?",
                (formatted_card, message.from_user.id)
            )
            await db.commit()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ UPDATE —Å–ø—Ä–∞—Ü—é–≤–∞–≤
            if cursor.rowcount > 0:
                logger.info(f"‚úÖ –ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –≤–æ–¥—ñ—è {message.from_user.id}: {formatted_card}")
            else:
                logger.error(f"‚ùå UPDATE –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ –¥–ª—è –≤–æ–¥—ñ—è {message.from_user.id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –∫–∞—Ä—Ç–∫–∞ –¥—ñ–π—Å–Ω–æ –∑–±–µ—Ä–µ–≥–ª–∞—Å—è
        driver_check = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if driver_check and driver_check.card_number:
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–∞—Ä—Ç–∫–∞ –≤ –ë–î = {driver_check.card_number}")
        else:
            logger.error(f"‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–∞—Ä—Ç–∫–∞ –ù–ï –∑–±–µ—Ä–µ–≥–ª–∞—Å—è –≤ –ë–î!")
        
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ä—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!</b>\n\n"
            f"üí≥ {formatted_card}\n\n"
            f"–¢–µ–ø–µ—Ä –∫–ª—ñ—î–Ω—Ç–∏ –∑–º–æ–∂—É—Ç—å –ø–µ—Ä–µ–∫–∞–∑—É–≤–∞—Ç–∏\n"
            f"–æ–ø–ª–∞—Ç—É –Ω–∞ —Ü—é –∫–∞—Ä—Ç–∫—É.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è"), KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É")],
                    [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), KeyboardButton(text="üí≥ –ö–æ–º—ñ—Å—ñ—è")],
                    [KeyboardButton(text="üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫"), KeyboardButton(text="üíº –ì–∞–º–∞–Ω–µ—Ü—å")],
                    [KeyboardButton(text="üë§ –ö–∞–±—ñ–Ω–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞"), KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")]
                ],
                resize_keyboard=True
            )
        )
    
    @router.callback_query(F.data.startswith("manage:"))
    async def manage_order(call: CallbackQuery) -> None:
        """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º - –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –∫–Ω–æ–ø–∫–∏"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":")[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        # –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —É—Å—ñ–º–∞ –¥–µ—Ç–∞–ª—è–º–∏
        from app.storage.db import get_user_by_id
        client = await get_user_by_id(config.database_path, order.user_id)
        
        distance_text = ""
        if order.distance_m:
            km = order.distance_m / 1000.0
            distance_text = f"\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º"
        
        payment_text = "üíµ –ì–æ—Ç—ñ–≤–∫–∞" if order.payment_method == "cash" else "üí≥ –ö–∞—Ä—Ç–∫–∞"
        
        fare_text = f"{order.fare_amount:.0f} –≥—Ä–Ω" if isinstance(order.fare_amount, (int, float)) else "—É—Ç–æ—á–Ω—é—î—Ç—å—Å—è"
        text = (
            f"üöó <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {client.full_name if client else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code>\n\n"
            f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b> {order.pickup_address}\n"
            f"üìç <b>–ö—É–¥–∏:</b> {order.destination_address}{distance_text}\n\n"
            f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare_text}\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {payment_text}\n"
        )
        
        if order.comment:
            text += f"\nüí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order.comment}"
        
        text += f"\n\nüìä –°—Ç–∞—Ç—É—Å: "
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—É—Å—É
        kb = None
        
        if order.status == "accepted":
            text += "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ\n\n"
            text += "üí° <i>–ö–ª—ñ—î–Ω—Ç –≤–∂–µ –±–∞—á–∏—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é (—è–∫—â–æ –≤–∏ —ó—ó –Ω–∞–¥—Å–∏–ª–∞–ª–∏)</i>"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –Ø –Ω–∞ –º—ñ—Å—Ü—ñ", callback_data=f"arrived:{order_id}")],
                    [InlineKeyboardButton(text="üöó –ü–æ—á–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"start:{order_id}")],
                    [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"manage:{order_id}")]
                ]
            )
            
        elif order.status == "in_progress":
            text += "üöó –í –¥–æ—Ä–æ–∑—ñ\n\n"
            text += "üí° <i>–û–Ω–æ–≤—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é —â–æ–± –∫–ª—ñ—î–Ω—Ç –±–∞—á–∏–≤ –¥–µ –≤–∏</i>"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É", callback_data=f"complete:{order_id}")],
                    [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"manage:{order_id}")]
                ]
            )
        elif order.status == "completed":
            text += "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="driver:panel")]
                ]
            )
        
        await call.answer()
        
        if kb:
            try:
                await call.message.edit_text(text, reply_markup=kb)
            except:
                await call.message.answer(text, reply_markup=kb)
        else:
            await call.message.answer(text)

    # ‚≠ê –ù–û–í–Ü –û–ë–†–û–ë–ù–ò–ö–ò –î–õ–Ø REPLY KEYBOARD (–≤–µ–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∞ —â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è)
    
    @router.message(F.text == "üöó –í –¥–æ—Ä–æ–∑—ñ")
    async def trip_in_progress_button(message: Message) -> None:
        """–í–æ–¥—ñ–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–í –¥–æ—Ä–æ–∑—ñ' ‚Üí –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ '–ù–∞ –º—ñ—Å—Ü—ñ'"""
        if not message.from_user:
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–æ–¥—ñ—è
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            await message.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "in_progress"
        await start_order(config.database_path, order.id, driver.id)
        
        # ‚≠ê –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        clean_pickup = clean_address(order.pickup_address)
        pickup_link = ""
        
        if order.pickup_lat and order.pickup_lon:
            pickup_link = f"\nüìç <a href='https://www.google.com/maps?q={order.pickup_lat},{order.pickup_lon}'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        # ‚≠ê –ó–ú–Ü–ù–ò–¢–ò –ö–ù–û–ü–ö–£ –Ω–∞ "üìç –ù–∞ –º—ñ—Å—Ü—ñ"
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        kb_trip = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞ –º—ñ—Å—Ü—ñ")],
                [
                    KeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è"),
                    KeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
                ],
                [
                    KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"),
                    KeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.answer(
            f"‚úÖ <b>–í –¥–æ—Ä–æ–∑—ñ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞!</b>\n\n"
            f"üöó <b>–†—É—Ö–∞–π—Ç–µ—Å—å –¥–æ –∞–¥—Ä–µ—Å–∏ –ø–æ–¥–∞—á—ñ:</b>\n"
            f"{clean_pickup}{pickup_link}\n\n"
            f"üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏ –ø—Ä–∏—ó–¥–µ—Ç–µ",
            reply_markup=kb_trip
        )
    
    @router.message(F.text == "üìç –ù–∞ –º—ñ—Å—Ü—ñ")
    async def trip_arrived_button(message: Message) -> None:
        """–í–æ–¥—ñ–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ù–∞ –º—ñ—Å—Ü—ñ' ‚Üí –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ '–í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        try:
            await message.bot.send_message(
                order.user_id,
                f"üìç <b>–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ!</b>\n\n"
                f"üöó {driver.full_name}\n"
                f"üì± <code>{driver.phone}</code>\n\n"
                f"–í–æ–¥—ñ–π —á–µ–∫–∞—î –Ω–∞ –≤–∞—Å!"
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # ‚≠ê –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        clean_destination = clean_address(order.destination_address)
        destination_link = ""
        
        if order.dest_lat and order.dest_lon:
            destination_link = f"\nüìç <a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        # ‚≠ê –ó–ú–Ü–ù–ò–¢–ò –ö–ù–û–ü–ö–£ –Ω–∞ "üöÄ –í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        kb_trip = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üöÄ –í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
                [
                    KeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è"),
                    KeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
                ],
                [
                    KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"),
                    KeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.answer(
            f"‚úÖ <b>–ù–∞ –º—ñ—Å—Ü—ñ –ø–æ–¥–∞—á—ñ!</b>\n\n"
            f"üëã <b>–ó—É—Å—Ç—Ä—ñ—á–∞–π—Ç–µ –∫–ª—ñ—î–Ω—Ç–∞:</b>\n"
            f"üë§ {order.name}\n"
            f"üì± <code>{order.phone}</code>\n\n"
            f"üìç <b>–á–¥–µ—Ç–µ –¥–æ:</b>\n"
            f"{clean_destination}{destination_link}\n\n"
            f"üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏ –ø–æ—á–Ω–µ—Ç–µ –ø–æ—ó–∑–¥–∫—É",
            reply_markup=kb_trip
        )
    
    @router.message(F.text == "üöÄ –í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    async def trip_executing_button(message: Message) -> None:
        """–í–æ–¥—ñ–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è' ‚Üí –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # ‚≠ê –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        clean_destination = clean_address(order.destination_address)
        destination_link = ""
        
        if order.dest_lat and order.dest_lon:
            destination_link = f"\nüìç <a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        # ‚≠ê –ó–ú–Ü–ù–ò–¢–ò –ö–ù–û–ü–ö–£ –Ω–∞ "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏"
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        kb_trip = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏")],
                [
                    KeyboardButton(text="‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è"),
                    KeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
                ],
                [
                    KeyboardButton(text="‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"),
                    KeyboardButton(text="üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.answer(
            f"üöÄ <b>–í–∏–∫–æ–Ω—É—î—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\n"
            f"üéØ <b>–ù–∞–ø—Ä—è–º–æ–∫:</b>\n"
            f"{clean_destination}{destination_link}\n\n"
            f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n\n"
            f"üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏ –¥–æ—ó–¥–µ—Ç–µ –¥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è",
            reply_markup=kb_trip
        )
    
    @router.message(F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    async def trip_complete_button(message: Message) -> None:
        """–í–æ–¥—ñ–π –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' ‚Üí –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not message.from_user:
            return
        
        logger.info(f"üèÅ –í–æ–¥—ñ–π {message.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'")
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            logger.error(f"‚ùå –í–æ–¥—ñ—è {message.from_user.id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            await message.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            logger.warning(f"‚ö†Ô∏è –£ –≤–æ–¥—ñ—è {driver.id} –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –≤–æ–¥—ñ—î–º {driver.id}")
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Ç–∞ –∫–æ–º—ñ—Å—ñ—ó
        fare = order.fare_amount if order.fare_amount else 100.0
        distance_m = order.distance_m if order.distance_m else 0
        duration_s = order.duration_s if order.duration_s else 0
        
        from app.storage.db import get_latest_tariff, insert_payment, Payment
        tariff = await get_latest_tariff(config.database_path)
        commission_rate = tariff.commission_percent if tariff else 0.02
        commission = fare * commission_rate
        
        await complete_order(
            config.database_path,
            order.id,
            driver.id,
            fare,
            distance_m,
            duration_s,
            commission
        )
        
        # –ó–∞–ø–∏—Å —É payments
        payment = Payment(
            id=None,
            order_id=order.id,
            driver_id=driver.id,
            amount=fare,
            commission=commission,
            commission_paid=False,
            payment_method=order.payment_method or 'cash',  # ‚úÖ –î–û–î–ê–ù–û
            created_at=datetime.now(timezone.utc)
        )
        await insert_payment(config.database_path, payment)
        
        # üåü –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –≤–æ–¥—ñ—è –∫–ª—ñ—î–Ω—Ç—É
        try:
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –§–û–†–ú–ê–¢: rate:driver:{driver_id}:{rating}:{order_id}
            rating_buttons = [
                [
                    InlineKeyboardButton(text="‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:1:{order.id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:2:{order.id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:3:{order.id}"),
                ],
                [
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:4:{order.id}"),
                    InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:5:{order.id}"),
                ],
                [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"rate:skip:{order.id}")]
            ]
            
            rating_kb = InlineKeyboardMarkup(inline_keyboard=rating_buttons)
            
            fare_text = f"{fare:.0f} –≥—Ä–Ω" if fare else "–£—Ç–æ—á–Ω—é—î—Ç—å—Å—è"
            distance_text = f"{distance_m / 1000:.1f} –∫–º" if distance_m else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            
            await message.bot.send_message(
                chat_id=order.user_id,
                text=(
                    f"üèÅ <b>–ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"üöó –í–æ–¥—ñ–π: {driver.full_name}\n"
                    f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_text}\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {fare_text}\n\n"
                    f"‚≠ê <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–æ–¥—ñ—è:</b>\n"
                    f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å!"
                ),
                reply_markup=rating_kb
            )
            logger.info(f"‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É #{order.user_id}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ü—ñ–Ω–∫—É: {e}")
        
        # ‚≠ê –ü–û–í–ï–†–ù–£–¢–ò–°–Ø –î–û –ü–ê–ù–ï–õ–Ü –í–û–î–Ü–Ø
        logger.info(f"üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–æ–¥—ñ—è {driver.id} –¥–æ –ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
        
        await message.answer(
            f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {fare:.2f} –≥—Ä–Ω\n"
            f"üí≥ –ö–æ–º—ñ—Å—ñ—è: {commission:.2f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –¥–æ—Ö—ñ–¥: {fare - commission:.2f} –≥—Ä–Ω\n\n"
            f"üéâ –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–±–æ—Ç—É!",
            reply_markup=driver_panel_keyboard()
        )
        
        logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–æ–¥—ñ–π {driver.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ.")
    
    @router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    @router.message(F.text == "‚ùå –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è")
    async def trip_cancel_button(message: Message) -> None:
        """–í–æ–¥—ñ–π –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        success = await cancel_order_by_driver(config.database_path, order.id, driver.id, "–í–æ–¥—ñ–π –≤—ñ–¥–º–æ–≤–∏–≤—Å—è")
        
        if success:
            # ‚ö†Ô∏è –ó–ú–ï–ù–®–ò–¢–ò –ö–ê–†–ú–£ –í–û–î–Ü–Ø –∑–∞ –≤—ñ–¥–º–æ–≤—É
            from app.storage.db import decrease_driver_karma
            await decrease_driver_karma(config.database_path, driver.id, amount=5)
            logger.warning(f"‚ö†Ô∏è –í–æ–¥—ñ–π #{driver.id} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}, –∫–∞—Ä–º–∞ -5")
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
            try:
                await message.bot.send_message(
                    order.user_id,
                    f"‚ùå <b>–í–æ–¥—ñ–π –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
                    f"üöó {driver.full_name}\n\n"
                    f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –∑–∞–≥–∞–ª—å–Ω—É —á–µ—Ä–≥—É.\n"
                    f"–®—É–∫–∞—î–º–æ —ñ–Ω—à–æ–≥–æ –≤–æ–¥—ñ—è..."
                )
            except Exception as e:
                logger.error(f"Failed to notify client: {e}")
            
            logger.warning(f"‚ö†Ô∏è –í–æ–¥—ñ–π {driver.full_name} –≤—ñ–¥–º–æ–≤–∏–≤—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}")
            
            await message.answer(
                "‚ùå <b>–í–∏ –≤—ñ–¥–º–æ–≤–∏–ª–∏—Å—è –≤—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
                "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ —ñ–Ω—à–∏–º –≤–æ–¥—ñ—è–º.",
                reply_markup=driver_panel_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    
    @router.message(F.text == "üìç –Ø –ù–ê –ú–Ü–°–¶–Ü –ü–û–î–ê–ß–Ü")
    async def driver_arrived_at_pickup(message: Message) -> None:
        """–í–æ–¥—ñ–π –ø—Ä–∏–±—É–≤ –Ω–∞ –º—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        try:
            await message.bot.send_message(
                order.user_id,
                f"üìç <b>–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ –ø–æ–¥–∞—á—ñ!</b>\n\n"
                f"üöó {driver.full_name}\n"
                f"üöô {driver.car_make} {driver.car_model}\n"
                f"üî¢ {driver.car_plate}\n\n"
                f"üì± <code>{driver.phone}</code>\n\n"
                f"üí° –í–æ–¥—ñ–π –æ—á—ñ–∫—É—î –≤–∞—Å –Ω–∞ –∞–¥—Ä–µ—Å—ñ:\n"
                f"üìç {order.pickup_address}"
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ - –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–Ø –Ω–∞ –º—ñ—Å—Ü—ñ"
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û")],
                [KeyboardButton(text="üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£")],
                [
                    KeyboardButton(text="üìû –ö–ª—ñ—î–Ω—Ç"),
                    KeyboardButton(text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç")
                ],
                [
                    KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
                    KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.answer(
            f"‚úÖ <b>–í–∏ –Ω–∞ –º—ñ—Å—Ü—ñ –ø–æ–¥–∞—á—ñ!</b>\n\n"
            f"üëã –û—á—ñ–∫—É–π—Ç–µ –∫–ª—ñ—î–Ω—Ç–∞:\n"
            f"üë§ {order.name}\n"
            f"üì± <code>{order.phone}</code>\n\n"
            f"üìç {order.pickup_address}\n\n"
            f"üí° –ö–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n"
            f"üëá –ö–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç —Å—è–¥–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û</b>",
            reply_markup=kb
        )
    
    @router.message(F.text == "‚úÖ –ö–õ–Ü–Ñ–ù–¢ –í –ê–í–¢–û")
    async def client_in_car(message: Message) -> None:
        """–ö–ª—ñ—î–Ω—Ç —Å—ñ–≤ –≤ –∞–≤—Ç–æ - –ø–æ—á–∞—Ç–æ–∫ –ø–æ—ó–∑–¥–∫–∏"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ "in_progress"
        await start_order(config.database_path, order.id, driver.id)
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        try:
            clean_destination = clean_address(order.destination_address)
            await message.bot.send_message(
                order.user_id,
                f"üöó <b>–ü–æ—ó–∑–¥–∫–∞ –ø–æ—á–∞–ª–∞—Å—è!</b>\n\n"
                f"–í–æ–¥—ñ–π –≤–µ–∑–µ –≤–∞—Å –¥–æ –º—ñ—Å—Ü—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:\n"
                f"üéØ {clean_destination}\n\n"
                f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: {int(order.fare_amount):.0f} –≥—Ä–Ω\n\n"
                f"üöó –ì–∞—Ä–Ω–æ—ó –¥–æ—Ä–æ–≥–∏!"
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # –û–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ - –ø—Ä–∏–±—Ä–∞—Ç–∏ "–ö–ª—ñ—î–Ω—Ç –≤ –∞–≤—Ç–æ"
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£")],
                [
                    KeyboardButton(text="üìû –ö–ª—ñ—î–Ω—Ç"),
                    KeyboardButton(text="üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç")
                ],
                [
                    KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"),
                    KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")
                ]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        clean_destination = clean_address(order.destination_address)
        destination_link = ""
        if order.dest_lat and order.dest_lon:
            destination_link = f"\nüìç <a href='https://www.google.com/maps?q={order.dest_lat},{order.dest_lon}'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ</a>"
        
        await message.answer(
            f"üöó <b>–ü–æ—ó–∑–¥–∫–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!</b>\n\n"
            f"üéØ <b>–ù–∞–ø—Ä—è–º–æ–∫:</b>\n"
            f"{clean_destination}{destination_link}\n\n"
            f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n\n"
            f"üëá –ö–æ–ª–∏ –¥–æ—ó–¥–µ—Ç–µ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£</b>",
            reply_markup=kb
        )
    
    @router.message(F.text == "üèÅ –ó–ê–í–ï–†–®–ò–¢–ò –ü–û–á–ó–î–ö–£")
    async def finish_trip(message: Message) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        fare = order.fare_amount if order.fare_amount else 100.0
        tariff = await get_latest_tariff(config.database_path)
        commission_percent = tariff.commission_percent if tariff else 0.02
        commission = fare * commission_percent
        net_earnings = fare - commission
        
        # –î–∞–Ω—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        distance_m = order.distance_m if order.distance_m else 0
        duration_s = 0  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø—ñ–∑–Ω—ñ—à–µ
        
        # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await complete_order(
            config.database_path,
            order.id,
            driver.id,
            fare,
            distance_m,
            duration_s,
            commission
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–ª–∞—Ç—ñ–∂
        payment = Payment(
            id=None,
            driver_id=driver.id,
            order_id=order.id,
            amount=fare,
            commission=commission,
            commission_paid=False,
            created_at=datetime.now(timezone.utc)
        )
        await insert_payment(config.database_path, payment)
        
        # ‚≠ê –ó–ë–Ü–õ–¨–®–ò–¢–ò –ö–ê–†–ú–£ –í–û–î–Ü–Ø –∑–∞ —É—Å–ø—ñ—à–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import increase_driver_karma
        await increase_driver_karma(config.database_path, driver.id)
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü—ñ–Ω–∫–∏
        try:
            payment_emoji = "üíµ" if order.payment_method == "cash" else "üí≥"
            payment_text = "–≥–æ—Ç—ñ–≤–∫–æ—é" if order.payment_method == "cash" else "–Ω–∞ –∫–∞—Ä—Ç–∫—É"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –≤–æ–¥—ñ—è
            kb_rating = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:1:{order.id}"),
                        InlineKeyboardButton(text="‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:2:{order.id}"),
                        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:3:{order.id}"),
                    ],
                    [
                        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:4:{order.id}"),
                        InlineKeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"rate:driver:{driver.tg_user_id}:5:{order.id}"),
                    ],
                    [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data=f"rate:skip:{order.id}")]
                ]
            )
            
            await message.bot.send_message(
                order.user_id,
                f"üèÅ <b>–ü–æ—ó–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üí∞ –î–æ –æ–ø–ª–∞—Ç–∏: <b>{int(fare):.0f} –≥—Ä–Ω</b>\n"
                f"{payment_emoji} –û–ø–ª–∞—Ç–∞: {payment_text}\n\n"
                f"‚≠ê <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –≤–æ–¥—ñ—è:</b>",
                reply_markup=kb_rating
            )
        except Exception as e:
            logger.error(f"Failed to notify client: {e}")
        
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è
        await message.answer(
            f"‚úÖ <b>–ü–æ—ó–∑–¥–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üí∞ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {int(fare):.0f} –≥—Ä–Ω\n"
            f"üí∏ –ö–æ–º—ñ—Å—ñ—è (2%): {int(commission):.0f} –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π: {int(net_earnings):.0f} –≥—Ä–Ω\n\n"
            f"üåü –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–±–æ—Ç—É!",
            reply_markup=driver_panel_keyboard()
        )
    
    @router.message(F.text == "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º")
    @router.message(F.text == "üìû –ö–ª—ñ—î–Ω—Ç")
    async def trip_contact_client_button(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        await message.answer(
            f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞:</b>\n\n"
            f"üë§ –Ü–º'—è: {order.name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{order.phone}</code>\n\n"
            f"üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏"
        )
    
    @router.message(F.text == "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç")
    async def show_route_map(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç—ñ"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if not driver:
            return
        
        order = await get_active_order_for_driver(config.database_path, driver.id)
        if not order:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            return
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Google Maps –º–∞—Ä—à—Ä—É—Ç
        if order.pickup_lat and order.pickup_lon and order.dest_lat and order.dest_lon:
            maps_url = (
                f"https://www.google.com/maps/dir/?api=1"
                f"&origin={order.pickup_lat},{order.pickup_lon}"
                f"&destination={order.dest_lat},{order.dest_lon}"
                f"&travelmode=driving"
            )
            
            clean_pickup = clean_address(order.pickup_address)
            clean_destination = clean_address(order.destination_address)
            
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ Google Maps", url=maps_url)]
                ]
            )
            
            await message.answer(
                f"üó∫Ô∏è <b>–ú–∞—Ä—à—Ä—É—Ç –ø–æ—ó–∑–¥–∫–∏:</b>\n\n"
                f"üìç <b>–ó–≤—ñ–¥–∫–∏:</b>\n{clean_pickup}\n\n"
                f"üéØ <b>–ö—É–¥–∏:</b>\n{clean_destination}\n\n"
                f"üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç",
                reply_markup=kb
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–¥—Ä–µ—Å–∏:\n"
                f"üìç –ó–≤—ñ–¥–∫–∏: {order.pickup_address}\n"
                f"üéØ –ö—É–¥–∏: {order.destination_address}"
            )
    
    @router.message(F.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
    async def trip_help_button(message: Message) -> None:
        """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –≤–æ–¥—ñ—è (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ - –ø—Ä–∞—Ü—é—î –∑–∞–≤–∂–¥–∏)"""
        if not message.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        active_order = None
        if driver:
            active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        if active_order:
            # –î–æ–ø–æ–º–æ–≥–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—ó–∑–¥–∫–∏
            help_text = (
                "‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞ - –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–æ—é</b>\n\n"
                "<b>–ö—Ä–æ–∫ 1:</b> üöó <b>–í –¥–æ—Ä–æ–∑—ñ</b>\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –ø–æ—á–Ω–µ—Ç–µ —Ä—É—Ö –¥–æ –∫–ª—ñ—î–Ω—Ç–∞\n\n"
                "<b>–ö—Ä–æ–∫ 2:</b> üìç <b>–ù–∞ –º—ñ—Å—Ü—ñ</b>\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –ø—Ä–∏—ó–¥–µ—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ\n\n"
                "<b>–ö—Ä–æ–∫ 3:</b> üöÄ <b>–í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç —Å—ñ–≤ —ñ –≤–∏ –ø–æ—á–∞–ª–∏ –ø–æ—ó–∑–¥–∫—É\n\n"
                "<b>–ö—Ä–æ–∫ 4:</b> üèÅ <b>–ó–∞–≤–µ—Ä—à–∏—Ç–∏</b>\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –¥–æ—ó—Ö–∞–ª–∏ –¥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "<b>–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏:</b>\n\n"
                "‚ùå <b>–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è</b> - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                "üìû <b>–ó–≤'—è–∑–∞—Ç–∏—Å—è</b> - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–ª—ñ—î–Ω—Ç–∞\n"
                "üí¨ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b> - –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é"
            )
        else:
            # –î–æ–ø–æ–º–æ–≥–∞ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ
            help_text = (
                "‚ÑπÔ∏è <b>–î–û–ü–û–ú–û–ì–ê –î–õ–Ø –í–û–î–Ü–Ø</b>\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                
                "üöÄ <b>–ü–û–ß–ê–¢–ò –†–û–ë–û–¢–£:</b>\n"
                "1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
                "2. –£–≤—ñ–º–∫–Ω—ñ—Ç—å —Å—Ç–∞—Ç—É—Å üü¢ –û–Ω–ª–∞–π–Ω\n"
                "3. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤ –≥—Ä—É–ø—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞\n"
                "4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ\n\n"
                
                "üì± <b>–ü–†–ò–ô–ù–Ø–¢–¢–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:</b>\n"
                "‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑'—è–≤–ª—è—î—Ç—å—Å—è –≤ –≥—Ä—É–ø—ñ\n"
                "‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ - –æ—Ç—Ä–∏–º—É—î\n"
                "‚Ä¢ –Ø–∫—â–æ –Ω–µ —É—Å–ø—ñ–ª–∏ - —á–µ–∫–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–µ\n\n"
                
                "üéØ <b>–í–ò–ö–û–ù–ê–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:</b>\n"
                "1. üöó –í –¥–æ—Ä–æ–∑—ñ - —Ä—É—Ö–∞–π—Ç–µ—Å—å –¥–æ –∫–ª—ñ—î–Ω—Ç–∞\n"
                "2. üìç –ù–∞ –º—ñ—Å—Ü—ñ - –ø—Ä–∏–±—É–ª–∏ –Ω–∞ –∞–¥—Ä–µ—Å—É\n"
                "3. üöÄ –í–∏–∫–æ–Ω—É—é - –∫–ª—ñ—î–Ω—Ç —Å—ñ–≤, —ó–¥–µ—Ç–µ\n"
                "4. üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ - –¥–æ—ó—Ö–∞–ª–∏, –æ–ø–ª–∞—Ç–∞\n\n"
                
                "üí∞ <b>–ó–ê–†–û–ë–Ü–¢–û–ö:</b>\n"
                "‚Ä¢ üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ - —Å—å–æ–≥–æ–¥–Ω—ñ\n"
                "‚Ä¢ üí≥ –ö–æ–º—ñ—Å—ñ—è - –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ–º—ñ—Å—ñ—è\n"
                "‚Ä¢ üìú –Ü—Å—Ç–æ—Ä—ñ—è - –≤—Å—ñ –ø–æ—ó–∑–¥–∫–∏\n"
                "‚Ä¢ üíº –ì–∞–º–∞–Ω–µ—Ü—å - –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤\n\n"
                
                "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
                "‚Ä¢ üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–æ\n\n"
                
                "‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ò:</b>\n"
                "‚Ä¢ –ù–µ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å (–º–∞—î –±—É—Ç–∏ üü¢ –û–Ω–ª–∞–π–Ω)\n"
                "‚Ä¢ –ö–Ω–æ–ø–∫–∞ –Ω–µ –ø—Ä–∞—Ü—é—î ‚Üí —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 1 —Ö–≤\n"
                "‚Ä¢ –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è ‚Üí üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n\n"
                
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å:\n"
                "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è"
            )
        
        # Inline –∫–Ω–æ–ø–∫–∞ "–ó—Ä–æ–∑—É–º—ñ–ª–æ"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª–æ", callback_data="help:close")]
            ]
        )
        
        await message.answer(help_text, reply_markup=kb)
    
    @router.callback_query(F.data == "help:close")
    async def close_help(call: CallbackQuery) -> None:
        """–ó–∞–∫—Ä–∏—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
        await call.answer("‚úÖ")
        try:
            await call.message.delete()
        except:
            pass
    
    @router.message(F.text == "üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
    async def trip_support_button(message: Message) -> None:
        """–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é"""
        admin_ids = config.bot.admin_ids
        
        if admin_ids and len(admin_ids) > 0:
            admin_id = admin_ids[0]  # –ü–µ—Ä—à–∏–π –∞–¥–º—ñ–Ω –∑—ñ —Å–ø–∏—Å–∫—É
            admin_link = f"tg://user?id={admin_id}"
            
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É", url=admin_link)]
                ]
            )
            
            await message.answer(
                "üí¨ <b>–ó–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é</b>\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
                "üí° –û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ",
                reply_markup=kb
            )
        else:
            await message.answer(
                "üí¨ <b>–ó–≤'—è–∑–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é</b>\n\n"
                "‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
            )
    
    @router.message(F.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
    async def show_driver_rules(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–æ–¥—ñ—ó–≤"""
        if not message.from_user:
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await message.delete()
        except:
            pass
        
        rules_text = (
            "üìñ <b>–ü–†–ê–í–ò–õ–ê –î–õ–Ø –í–û–î–Ü–á–í</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            "üöÄ <b>1. –ü–û–ß–ê–¢–û–ö –†–û–ë–û–¢–ò</b>\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è\n"
            "   ‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Å—Ç–∞—Ç—É—Å: üü¢ –û–Ω–ª–∞–π–Ω\n"
            "   ‚Ä¢ –Ø–∫—â–æ üî¥ –û—Ñ–ª–∞–π–Ω - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üìã –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
            "   ‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –≤ –≥—Ä—É–ø—É –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞\n\n"
            
            "üì± <b>2. –ü–†–ò–ô–ù–Ø–¢–¢–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n"
            "   ‚Ä¢ –í –≥—Ä—É–ø—ñ –∑'—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            "      - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ (—ñ–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
            "      - –ó–≤—ñ–¥–∫–∏ —Ç–∞ –∫—É–¥–∏ —ó—Ö–∞—Ç–∏\n"
            "      - –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "   ‚Ä¢ –ü–µ—Ä—à–∏–π —Ö—Ç–æ –Ω–∞—Ç–∏—Å–Ω–µ - –æ—Ç—Ä–∏–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
            
            "üéØ <b>3. –í–ò–ö–û–ù–ê–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (4 –ï–¢–ê–ü–ò)</b>\n\n"
            "   <b>–ï—Ç–∞–ø 1: üöó –í –¥–æ—Ä–æ–∑—ñ</b>\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –ø–æ—á–∏–Ω–∞—î—Ç–µ —Ä—É—Ö –¥–æ –∫–ª—ñ—î–Ω—Ç–∞\n"
            "   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è \"üìç –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ\"\n"
            "   ‚Ä¢ –á–¥—å—Ç–µ –¥–æ –∞–¥—Ä–µ—Å–∏ –ø–æ–¥–∞—á—ñ\n\n"
            
            "   <b>–ï—Ç–∞–ø 2: üìç –ù–∞ –º—ñ—Å—Ü—ñ</b>\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –ø—Ä–∏—ó—Ö–∞–ª–∏ –Ω–∞ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ\n"
            "   ‚Ä¢ –ö–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è \"–í–æ–¥—ñ–π –Ω–∞ –º—ñ—Å—Ü—ñ\"\n"
            "   ‚Ä¢ –ó—É—Å—Ç—Ä—ñ—á–∞–π—Ç–µ –∫–ª—ñ—î–Ω—Ç–∞\n\n"
            
            "   <b>–ï—Ç–∞–ø 3: üöÄ –í–∏–∫–æ–Ω—É—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –∫–ª—ñ—î–Ω—Ç —Å—ñ–≤ –≤ –∞–≤—Ç–æ\n"
            "   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –¥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n"
            "   ‚Ä¢ –á–¥—å—Ç–µ –±–µ–∑–ø–µ—á–Ω–æ!\n\n"
            
            "   <b>–ï—Ç–∞–ø 4: üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏</b>\n"
            "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–ª–∏ –¥–æ—ó—Ö–∞–ª–∏ –¥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è\n"
            "   ‚Ä¢ –ö–ª—ñ—î–Ω—Ç –æ—Ç—Ä–∏–º–∞—î –∑–∞–ø–∏—Ç –Ω–∞ –æ—Ü—ñ–Ω–∫—É\n"
            "   ‚Ä¢ –í–∏ –ø–æ–≤–µ—Ä–Ω–µ—Ç–µ—Å—å –¥–æ –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è\n"
            "   ‚Ä¢ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Ç–∞ –∫–æ–º—ñ—Å—ñ—è –±—É–¥—É—Ç—å –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ\n\n"
            
            "üîß <b>4. –î–û–î–ê–¢–ö–û–í–Ü –ö–ù–û–ü–ö–ò</b>\n\n"
            "   ‚ùå <b>–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è</b>\n"
            "   ‚Ä¢ –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
            "   ‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è —ñ–Ω—à–∏–º –≤–æ–¥—ñ—è–º\n"
            "   ‚Ä¢ –ö–ª—ñ—î–Ω—Ç –±—É–¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
            
            "   üìû <b>–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–æ–º</b>\n"
            "   ‚Ä¢ –ü–æ–∫–∞–∑—É—î —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞\n"
            "   ‚Ä¢ –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è\n\n"
            
            "   ‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n"
            "   ‚Ä¢ –ü–æ–∫—Ä–æ–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
            "   ‚Ä¢ –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫\n\n"
            
            "   üí¨ <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞</b>\n"
            "   ‚Ä¢ –ü—Ä—è–º–∏–π –∑–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "   ‚Ä¢ –®–≤–∏–¥–∫–µ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º\n\n"
            
            "üí∞ <b>5. –û–ü–õ–ê–¢–ê –¢–ê –ö–û–ú–Ü–°–Ü–Ø</b>\n\n"
            "   ‚Ä¢ <b>–ì–æ—Ç—ñ–≤–∫–∞:</b> –û—Ç—Ä–∏–º—É—î—Ç–µ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞\n"
            "   ‚Ä¢ <b>–ö–∞—Ä—Ç–∫–∞:</b> –ö–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É\n"
            "   ‚Ä¢ <b>–ö–æ–º—ñ—Å—ñ—è:</b> –ù–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n"
            "      - –ü–µ—Ä–µ–≥–ª—è–¥: üí≥ –ö–æ–º—ñ—Å—ñ—è\n"
            "      - –°–ø–ª–∞—Ç–∞: –ù–∞ –≤–∫–∞–∑–∞–Ω—É –∫–∞—Ä—Ç–∫—É –≤ –±–æ—Ç—ñ\n"
            "      - –ü—ñ—Å–ª—è —Å–ø–ª–∞—Ç–∏: –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"‚úÖ –ö–æ–º—ñ—Å—ñ—é —Å–ø–ª–∞—á–µ–Ω–æ\"\n"
            "      - –ê–¥–º—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚Üí –∫–æ–º—ñ—Å—ñ—è –∞–Ω—É–ª—é—î—Ç—å—Å—è\n\n"
            
            "üìä <b>6. –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            "   ‚Ä¢ üìä –ú—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ - —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –¥–æ—Ö–æ–¥–∏\n"
            "   ‚Ä¢ üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—ó–∑–¥–æ–∫ - –≤—Å—ñ –≤–∞—à—ñ –ø–æ—ó–∑–¥–∫–∏\n"
            "   ‚Ä¢ üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "   ‚Ä¢ üíº –ì–∞–º–∞–Ω–µ—Ü—å - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ä—Ç–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤\n\n"
            
            "‚≠ê <b>7. –†–ï–ô–¢–ò–ù–ì</b>\n\n"
            "   ‚Ä¢ –ö–ª—ñ—î–Ω—Ç–∏ –æ—Ü—ñ–Ω—é—é—Ç—å –≤–∞—Å –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏\n"
            "   ‚Ä¢ –í–∏—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –±—ñ–ª—å—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
            "   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ\n\n"
            
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            "üí° <b>–í–ê–ñ–õ–ò–í–Ü –ü–û–†–ê–î–ò:</b>\n\n"
            "‚úÖ –ë—É–¥—å—Ç–µ –≤–≤—ñ—á–ª–∏–≤–∏–º–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏\n"
            "‚úÖ –ü—Ä–∏—ó–∂–¥–∂–∞–π—Ç–µ –≤—á–∞—Å–Ω–æ\n"
            "‚úÖ –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É –≤ –∞–≤—Ç–æ\n"
            "‚úÖ –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ü–î–†\n"
            "‚úÖ –û–Ω–æ–≤–ª—é–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –¥–ª—è live tracking\n"
            "‚úÖ –°–ø–ª–∞—á—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –≤—á–∞—Å–Ω–æ\n\n"
            
            "‚ö†Ô∏è <b>–ó–ê–ë–û–†–û–ù–ï–ù–û:</b>\n\n"
            "‚ùå –í—ñ–¥–º–æ–≤–ª—è—Ç–∏—Å—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏\n"
            "‚ùå –ü—Ä–æ—Å–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –æ–ø–ª–∞—Ç—É\n"
            "‚ùå –ù–µ–≤–≤—ñ—á–ª–∏–≤–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞\n"
            "‚ùå –ü–æ—Ä—É—à–µ–Ω–Ω—è –ü–î–†\n\n"
            
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            
            "üéâ <b>–£—Å–ø—ñ—à–Ω–æ—ó —Ä–æ–±–æ—Ç–∏!</b> üöó"
        )
        
        # Inline –∫–Ω–æ–ø–∫–∞ "–ó—Ä–æ–∑—É–º—ñ–ª–æ"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó—Ä–æ–∑—É–º—ñ–ª–æ", callback_data="driver_rules:close")]
            ]
        )
        
        await message.answer(rules_text, reply_markup=kb)
        logger.info(f"üìñ –í–æ–¥—ñ–π {message.from_user.id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")
    
    @router.callback_query(F.data == "driver_rules:close")
    async def close_driver_rules(call: CallbackQuery) -> None:
        """–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ–¥—ñ—è"""
        await call.answer("‚úÖ")
        
        try:
            await call.message.delete()
        except:
            pass
    
    @router.callback_query(F.data == "driver:panel")
    async def back_to_driver_panel(call: CallbackQuery) -> None:
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è"""
        if not call.from_user:
            return
        
        await call.answer("‚úÖ")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await call.message.delete()
        except:
            pass
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–æ–¥—ñ—è
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.status != "approved":
            await call.message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π –∞–±–æ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞."
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        active_order = await get_active_order_for_driver(config.database_path, driver.id)
        
        # –ó–∞—Ä–æ–±—ñ—Ç–æ–∫
        earnings, commission = await get_driver_earnings_today(config.database_path, call.from_user.id)
        net = earnings - commission
        
        # –ß–∞–π–æ–≤—ñ
        tips = 0.0
        try:
            tips = await get_driver_tips_total(config.database_path, call.from_user.id)
        except:
            tips = 0.0
        
        # –°—Ç–∞—Ç—É—Å
        status = "üü¢ –û–Ω–ª–∞–π–Ω" if driver.online else "üî¥ –û—Ñ–ª–∞–π–Ω"
        
        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"üöó <b>–ü–ê–ù–ï–õ–¨ –í–û–î–Ü–Ø</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–í–æ–¥—ñ–π:</b> {driver.full_name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {driver.phone}\n"
            f"üèô <b>–ú—ñ—Å—Ç–æ:</b> {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {driver.car_make} {driver.car_model}\n"
            f"üîñ <b>–ù–æ–º–µ—Ä:</b> {driver.car_plate}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
            f"üí∞ <b>–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
            f"   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π: {earnings:.2f} –≥—Ä–Ω\n"
            f"   ‚Ä¢ –ö–æ–º—ñ—Å—ñ—è: {commission:.2f} –≥—Ä–Ω\n"
            f"   ‚Ä¢ –ß–∏—Å—Ç–∏–π: {net:.2f} –≥—Ä–Ω\n"
            f"   ‚Ä¢ –ß–∞–π–æ–≤—ñ: {tips:.2f} –≥—Ä–Ω\n\n"
        )
        
        if active_order:
            text += (
                f"üî¥ <b>–ê–ö–¢–ò–í–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{active_order.id}</b>\n"
                f"–°—Ç–∞—Ç—É—Å: {active_order.status}\n\n"
            )
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        await call.message.answer(text, reply_markup=driver_panel_keyboard())
    
    @router.callback_query(F.data.startswith("show_card:"))
    async def show_card_to_client(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É –≤–æ–¥—ñ—è –∫–ª—ñ—î–Ω—Ç—É"""
        if not call.from_user:
            return
        
        try:
            order_id = int(call.data.split(":")[1])
        except:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        order = await get_order_by_id(config.database_path, order_id)
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if not order.driver_id:
            await call.answer("‚ùå –í–æ–¥—ñ–π –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π", show_alert=True)
            return
        
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        if not driver or not driver.card_number:
            await call.answer("‚ùå –ö–∞—Ä—Ç–∫–∞ –≤–æ–¥—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return
        
        await call.answer()
        
        card_message = (
            f"üí≥ <b>–ö–ê–†–¢–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–ò</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–í–æ–¥—ñ–π:</b> {driver.full_name}\n"
            f"üí≥ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:</b>\n"
            f"<code>{driver.card_number}</code>\n\n"
            f"üí∞ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {int(order.fare_amount):.0f} –≥—Ä–Ω\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üí° <b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏</b>\n\n"
            f"‚ö†Ô∏è –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –≤–æ–¥—ñ—è!"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)", callback_data=f"paid:confirm:{order_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_order:{order_id}")]
            ]
        )
        
        await call.message.edit_text(card_message, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("paid:confirm:"))
    async def confirm_payment(call: CallbackQuery) -> None:
        """–ö–ª—ñ—î–Ω—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ–ø–ª–∞—Ç—É"""
        if not call.from_user:
            return
        
        try:
            order_id = int(call.data.split(":")[2])
        except:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        order = await get_order_by_id(config.database_path, order_id)
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", show_alert=True)
        
        # –°–ø–æ–≤—ñ—Å—Ç–∏—Ç–∏ –≤–æ–¥—ñ—è
        if order.driver_id:
            driver = await get_driver_by_id(config.database_path, order.driver_id)
            if driver:
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        f"üí≥ <b>–ö–õ–Ü–Ñ–ù–¢ –ü–Ü–î–¢–í–ï–†–î–ò–í –û–ü–õ–ê–¢–£!</b>\n\n"
                        f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                        f"üí∞ –°—É–º–∞: {int(order.fare_amount):.0f} –≥—Ä–Ω\n\n"
                        f"‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç–∫—É!"
                    )
                except:
                    pass
        
        await call.message.edit_text(
            "‚úÖ <b>–î–Ø–ö–£–Ñ–ú–û –ó–ê –û–ü–õ–ê–¢–£!</b>\n\n"
            "–í–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
            "–ì–∞—Ä–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏! üöó"
        )
    
    @router.callback_query(F.data == "work:earnings")
    async def show_work_earnings(call: CallbackQuery) -> None:
        """–®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞—Ä–æ–±—ñ—Ç–∫—É"""
        if not call.from_user:
            return
        
        earnings_today, commission_today = await get_driver_earnings_today(
            config.database_path, 
            call.from_user.id
        )
        
        net_today = earnings_today - commission_today
        
        await call.answer(
            f"üí∞ –°—å–æ–≥–æ–¥–Ω—ñ:\n"
            f"–ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings_today:.0f} –≥—Ä–Ω\n"
            f"–ö–æ–º—ñ—Å—ñ—è: {commission_today:.0f} –≥—Ä–Ω\n"
            f"–ß–∏—Å—Ç–∏–π: {net_today:.0f} –≥—Ä–Ω",
            show_alert=True
        )
    
    
    @router.callback_query(F.data == "settings:update_location")
    async def update_location_prompt(call: CallbackQuery) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–æ–¥—ñ—è –æ–Ω–æ–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"""
        await call.answer()
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await call.bot.send_message(
            call.from_user.id,
            "üìç <b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó</b>\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à—É –ø–æ—Ç–æ—á–Ω—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.\n\n"
            "üí° –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –∫–ª—ñ—î–Ω—Ç–∞–º –±–∞—á–∏—Ç–∏ –≤–∞—à—É –ø–æ–∑–∏—Ü—ñ—é –ø—ñ–¥ —á–∞—Å –ø–æ—ó–∑–¥–∫–∏.",
            reply_markup=kb
        )
    
    @router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    async def driver_settings_menu(message: Message) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è - –ö–ê–†–ú–ê, –°–¢–ê–¢–ò–°–¢–ò–ö–ê, –ó–ê–†–û–ë–Ü–¢–û–ö"""
        logger.info(f"üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: –æ—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ {message.from_user.id if message.from_user else 'Unknown'}")
        
        if not message.from_user:
            logger.error("‚ùå –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: message.from_user is None!")
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        driver = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        
        # –Ø–∫—â–æ –ù–ï –≤–æ–¥—ñ–π ‚Üí –ø–æ–º–∏–ª–∫–∞
        if not driver:
            logger.warning(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–µ —î –≤–æ–¥—ñ—î–º")
            await message.answer(
                "‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–æ–¥—ñ–π",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        logger.info(f"‚úÖ –í–æ–¥—ñ–π {driver.id} ({driver.full_name}) - –≥–µ–Ω–µ—Ä—É—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        logger.info(f"üìä –í–æ–¥—ñ–π –¥–∞–Ω—ñ: city={driver.city}, card={driver.card_number}, karma={getattr(driver, 'karma', None)}")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ
        earnings_today, commission_today = await get_driver_earnings_today(
            config.database_path,
            message.from_user.id
        )
        net_today = earnings_today - commission_today
        
        # –ö–∞—Ä–º–∞ (100 - —ñ–¥–µ–∞–ª—å–Ω–æ, –º—ñ–Ω—É—Å—É—î—Ç—å—Å—è –∑–∞ –≤—ñ–¥–º–æ–≤–∏)
        karma = driver.karma if hasattr(driver, 'karma') else 100
        karma_emoji = "üü¢" if karma >= 80 else "üü°" if karma >= 50 else "üî¥"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_orders = driver.total_orders if hasattr(driver, 'total_orders') else 0
        rejected_orders = driver.rejected_orders if hasattr(driver, 'rejected_orders') else 0
        completed_orders = total_orders - rejected_orders
        
        # –í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–º–æ–≤
        reject_percent = (rejected_orders / total_orders * 100) if total_orders > 0 else 0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        from app.utils.location_tracker import check_driver_location_status
        loc_status = await check_driver_location_status(config.database_path, message.from_user.id)
        
        if not loc_status['has_location']:
            location_text = "üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: ‚ùå –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        elif loc_status['is_stale']:
            hours = loc_status['hours_old']
            location_text = f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: ‚ö†Ô∏è –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ ({hours:.0f}–≥–æ–¥)"
        else:
            minutes = loc_status['minutes_old']
            location_text = f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞ ({minutes:.0f}—Ö–≤)"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—é
        car_color = getattr(driver, 'car_color', None)
        
        missing_fields = []
        if not driver.city:
            missing_fields.append("üèô –ú—ñ—Å—Ç–æ")
        if not driver.card_number:
            missing_fields.append("üí≥ –ö–∞—Ä—Ç–∫–∞")
        if not car_color:
            missing_fields.append("üé® –ö–æ–ª—ñ—Ä –∞–≤—Ç–æ")
        # ‚ùå –í–ò–î–ê–õ–ï–ù–û: –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –¥–ª—è –æ–Ω–ª–∞–π–Ω
        
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ–ø–æ–≤–Ω–∏–π
        profile_warning = ""
        if missing_fields:
            profile_warning = (
                f"‚ö†Ô∏è <b>–ü–†–û–§–Ü–õ–¨ –ù–ï –ó–ê–ü–û–í–ù–ï–ù–ò–ô</b>\n\n"
                f"–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ:\n"
                + "\n".join(f"‚Ä¢ {field}" for field in missing_fields) +
                f"\n\n‚ùå –í–∏ –Ω–µ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
                f"üëá –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –Ω–∏–∂—á–µ\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            )
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try:
            text = (
                f"‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –í–û–î–Ü–Ø</b>\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"{profile_warning}"
                f"üë§ <b>–û–°–û–ë–ò–°–¢–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:</b>\n\n"
                f"üë®‚Äç‚úàÔ∏è –ü–Ü–ë: {driver.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n"
                f"üî¢ –ù–æ–º–µ—Ä: {driver.car_plate}\n"
                f"üé® –ö–æ–ª—ñ—Ä: {car_color or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üí≥ –ö–∞—Ä—Ç–∫–∞: {driver.card_number or '‚ùå –ù–µ –¥–æ–¥–∞–Ω–∞'}\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"{karma_emoji} <b>–ö–ê–†–ú–ê:</b> {karma}/100\n"
                f"{'üî¥ –ù–∏–∑—å–∫–∞!' if karma < 50 else 'üü° –°–µ—Ä–µ–¥–Ω—è' if karma < 80 else 'üü¢ –í—ñ–¥–º—ñ–Ω–Ω–∞!'}\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n\n"
                f"üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
                f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {completed_orders}\n"
                f"‚ùå –í—ñ–¥–º–æ–≤: {rejected_orders} ({reject_percent:.1f}%)\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üí∞ <b>–ó–ê–†–û–ë–Ü–¢–û–ö –°–¨–û–ì–û–î–ù–Ü:</b>\n\n"
                f"üíµ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {earnings_today:.0f} –≥—Ä–Ω\n"
                f"üí≥ –ö–æ–º—ñ—Å—ñ—è (2%): {commission_today:.0f} –≥—Ä–Ω\n"
                f"üí∞ –ß–∏—Å—Ç–∏–π: {net_today:.0f} –≥—Ä–Ω\n\n"
                f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                f"üí° <b>–Ø–ö –ü–†–ê–¶–Æ–Ñ –ö–ê–†–ú–ê:</b>\n"
                f"‚Ä¢ –°—Ç–∞—Ä—Ç: 100 –±–∞–ª—ñ–≤\n"
                f"‚Ä¢ –í—ñ–¥–º–æ–≤–∞: -5 –±–∞–ª—ñ–≤\n"
                f"‚Ä¢ –£—Å–ø—ñ—Ö: +1 –±–∞–ª (–º–∞–∫—Å 100)\n"
                f"‚Ä¢ –ù–∏–∑—å–∫–∞ (&lt;50): ‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"
            )
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ, –¥–æ–≤–∂–∏–Ω–∞: {len(text)}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        # –ö–Ω–æ–ø–∫–∏ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–ª—ñ–≤
        buttons = []
        
        if missing_fields:
            # –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ–ø–æ–≤–Ω–∏–π - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
            if not driver.city:
                buttons.append([InlineKeyboardButton(text="üèô ‚ö†Ô∏è –í–ö–ê–ó–ê–¢–ò –ú–Ü–°–¢–û", callback_data="settings:set_city")])
            if not driver.card_number:
                buttons.append([InlineKeyboardButton(text="üí≥ ‚ö†Ô∏è –î–û–î–ê–¢–ò –ö–ê–†–¢–ö–£", callback_data="settings:card")])
            if not car_color:
                buttons.append([InlineKeyboardButton(text="üé® ‚ö†Ô∏è –í–ö–ê–ó–ê–¢–ò –ö–û–õ–Ü–† –ê–í–¢–û", callback_data="settings:set_color")])
            # ‚ùå –í–ò–î–ê–õ–ï–ù–û: –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é - –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞
            buttons.append([InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")])
        
            # –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–ë–ï–ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó!)
            buttons.extend([
                [InlineKeyboardButton(text="üöó –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ", callback_data="settings:car_class")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤", callback_data="settings:card")],
                [InlineKeyboardButton(text="üé® –ö–æ–ª—ñ—Ä –∞–≤—Ç–æ", callback_data="settings:set_color")],
                [InlineKeyboardButton(text="üèô –ú—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏", callback_data="settings:set_city")],
                # ‚ùå –í–ò–î–ê–õ–ï–ù–û: –û–Ω–æ–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é - –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data="settings:refresh")]
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        logger.info(f"üì§ –ù–∞–¥—Å–∏–ª–∞—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—é {driver.id}, –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        try:
            sent = await message.answer(text, reply_markup=kb)
            logger.info(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, message_id={sent.message_id}")
        except Exception as e:
            logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}", exc_info=True)
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=driver_panel_keyboard()
            )
    
    @router.callback_query(F.data == "settings:refresh")
    async def refresh_settings(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - –≤–∏–∫–ª–∏–∫–∞—Ç–∏ driver_settings_menu"""
        if not call.from_user:
            return
        
        await call.answer("üîÑ –û–Ω–æ–≤–ª—é—é...")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await call.message.delete()
        except:
            pass
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ fake message –¥–ª—è –≤–∏–∫–ª–∏–∫—É driver_settings_menu
        fake_msg = Message(
            message_id=call.message.message_id if call.message else 0,
            date=call.message.date if call.message else datetime.now(timezone.utc),
            chat=call.message.chat if call.message else call.from_user,
            from_user=call.from_user,
            text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        )
        
        # –í–∏–∫–ª–∏–∫–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        await driver_settings_menu(fake_msg)
    
    # ==================== –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ü–†–û–§–Ü–õ–Æ ====================
    
    @router.callback_query(F.data == "noop")
    async def noop_handler(call: CallbackQuery) -> None:
        """–ü–æ—Ä–æ–∂–Ω—ñ–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤"""
        await call.answer()
    
    @router.callback_query(F.data == "settings:set_city")
    async def prompt_city(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–∫–∞–∑–∞—Ç–∏ –º—ñ—Å—Ç–æ"""
        await call.answer()
        await state.set_state(DriverProfileStates.waiting_for_city)
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ö–∏—ó–≤"), KeyboardButton(text="–õ—å–≤—ñ–≤")],
                [KeyboardButton(text="–û–¥–µ—Å–∞"), KeyboardButton(text="–î–Ω—ñ–ø—Ä–æ")],
                [KeyboardButton(text="–•–∞—Ä–∫—ñ–≤"), KeyboardButton(text="–í—ñ–Ω–Ω–∏—Ü—è")],
                [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await call.bot.send_message(
            call.from_user.id,
            "üèô <b>–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î:",
            reply_markup=kb
        )
    
    @router.message(DriverProfileStates.waiting_for_city)
    async def process_city(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –º—ñ—Å—Ç–æ"""
        if not message.text or message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await state.clear()
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        city = message.text.strip()
        
        # –û–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ –≤ –ë–î
        from app.storage.db import db_manager
        async with db_manager.connect(config.database_path) as db:
            await db.execute(
                "UPDATE drivers SET city = ? WHERE tg_user_id = ?",
                (city, message.from_user.id)
            )
            await db.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ú—ñ—Å—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{city}</b>",
            reply_markup=driver_panel_keyboard()
        )
        
        logger.info(f"‚úÖ –í–æ–¥—ñ–π {message.from_user.id} –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ –º—ñ—Å—Ç–æ: {city}")
    
    @router.callback_query(F.data == "settings:set_color")
    async def prompt_color(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–ª—ñ—Ä –∞–≤—Ç–æ"""
        await call.answer()
        await state.set_state(DriverProfileStates.waiting_for_color)
        
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ß–æ—Ä–Ω–∏–π"), KeyboardButton(text="–ë—ñ–ª–∏–π")],
                [KeyboardButton(text="–°—ñ—Ä–∏–π"), KeyboardButton(text="–°–∏–Ω—ñ–π")],
                [KeyboardButton(text="–ß–µ—Ä–≤–æ–Ω–∏–π"), KeyboardButton(text="–ó–µ–ª–µ–Ω–∏–π")],
                [KeyboardButton(text="–°—Ä—ñ–±–Ω–∏–π"), KeyboardButton(text="–ñ–æ–≤—Ç–∏–π")],
                [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await call.bot.send_message(
            call.from_user.id,
            "üé® <b>–í–∫–∞–∂—ñ—Ç—å –∫–æ–ª—ñ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π:",
            reply_markup=kb
        )
    
    @router.message(DriverProfileStates.waiting_for_color)
    async def process_color(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–ª—ñ—Ä (–¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)"""
        if not message.text or message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await state.clear()
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        color = message.text.strip()
        
        # –î–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É car_color —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î + –æ–Ω–æ–≤–∏—Ç–∏
        from app.storage.db import db_manager
        async with db_manager.connect(config.database_path) as db:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É (—è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
            try:
                await db.execute("ALTER TABLE drivers ADD COLUMN car_color TEXT")
                await db.commit()
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–∫—É car_color –¥–æ —Ç–∞–±–ª–∏—Ü—ñ drivers")
            except Exception as e:
                # –ö–æ–ª–æ–Ω–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                pass
            
            # –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–ª—ñ—Ä
            await db.execute(
                "UPDATE drivers SET car_color = ? WHERE tg_user_id = ?",
                (color, message.from_user.id)
            )
            await db.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–ª—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ: <b>{color}</b>",
            reply_markup=driver_panel_keyboard()
        )
        
        logger.info(f"‚úÖ –í–æ–¥—ñ–π {message.from_user.id} –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ –∫–æ–ª—ñ—Ä: {color}")
    
    @router.callback_query(F.data == "settings:car_class")
    async def prompt_car_class(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–∏–±—Ä–∞—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        await call.answer()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–ª–∞—Å
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        current_class = driver.car_class if driver else "economy"
        
        # –ú–∞–ø–ø—ñ–Ω–≥ –∫–ª–∞—Å—ñ–≤ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏
        class_names = {
            "economy": "–ï–∫–æ–Ω–æ–º",
            "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç",
            "business": "–ë—ñ–∑–Ω–µ—Å"
        }
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∏–±–æ—Ä–æ–º –∫–ª–∞—Å—É
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current_class == 'economy' else ''}{class_names['economy']}",
                    callback_data="set_car_class:economy"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current_class == 'standard' else ''}{class_names['standard']}",
                    callback_data="set_car_class:standard"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current_class == 'comfort' else ''}{class_names['comfort']}",
                    callback_data="set_car_class:comfort"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ ' if current_class == 'business' else ''}{class_names['business']}",
                    callback_data="set_car_class:business"
                )],
                [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="settings:refresh")]
            ]
        )
        
        await call.message.edit_text(
            "üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –∫–ª–∞—Å: <b>{class_names.get(current_class, '–ï–∫–æ–Ω–æ–º')}</b>\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∫–ª–∞—Å —ñ–∑ —Å–ø–∏—Å–∫—É:",
            reply_markup=kb
        )
    
    @router.callback_query(F.data.startswith("set_car_class:"))
    async def save_car_class(call: CallbackQuery) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—Ä–∞–Ω–∏–π –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        if not call.from_user:
            return
        
        try:
            car_class = call.data.split(":")[1]
        except:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –∫–ª–∞—Å—É
        valid_classes = ["economy", "standard", "comfort", "business"]
        if car_class not in valid_classes:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è", show_alert=True)
            return
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ –≤ –ë–î
        from app.storage.db import db_manager
        async with db_manager.connect(config.database_path) as db:
            await db.execute(
                "UPDATE drivers SET car_class = ? WHERE tg_user_id = ?",
                (car_class, call.from_user.id)
            )
            await db.commit()
        
        # –ú–∞–ø–ø—ñ–Ω–≥ –∫–ª–∞—Å—ñ–≤ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–∞–∑–≤–∏
        class_names = {
            "economy": "–ï–∫–æ–Ω–æ–º",
            "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "comfort": "–ö–æ–º—Ñ–æ—Ä—Ç",
            "business": "–ë—ñ–∑–Ω–µ—Å"
        }
        
        await call.answer(f"‚úÖ –ö–ª–∞—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {class_names[car_class]}", show_alert=True)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
        car_color = driver.car_color if hasattr(driver, 'car_color') else None
        
        text = (
            f"‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –í–û–î–Ü–Ø</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üë§ <b>–Ü–º'—è:</b> {driver.full_name}\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {driver.phone}\n"
            f"üèô <b>–ú—ñ—Å—Ç–æ:</b> {driver.city or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {driver.car_make} {driver.car_model}\n"
            f"üé® <b>–ö–æ–ª—ñ—Ä:</b> {car_color or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîñ <b>–ù–æ–º–µ—Ä:</b> {driver.car_plate}\n"
            f"üöó <b>–ö–ª–∞—Å:</b> {class_names.get(driver.car_class, '–ï–∫–æ–Ω–æ–º')}\n"
            f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞:</b> {driver.card_number or '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        buttons = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if not driver.city or not driver.card_number or not car_color:
            text += "‚ö†Ô∏è <b>–£–í–ê–ì–ê! –ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏:</b>\n"
            if not driver.city:
                text += "   ‚Ä¢ –ú—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏\n"
                buttons.append([InlineKeyboardButton(text="üèô ‚ö†Ô∏è –í–ö–ê–ó–ê–¢–ò –ú–Ü–°–¢–û", callback_data="settings:set_city")])
            if not driver.card_number:
                text += "   ‚Ä¢ –ö–∞—Ä—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤\n"
                buttons.append([InlineKeyboardButton(text="üí≥ ‚ö†Ô∏è –î–û–î–ê–¢–ò –ö–ê–†–¢–ö–£", callback_data="settings:card")])
            if not car_color:
                text += "   ‚Ä¢ –ö–æ–ª—ñ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è\n"
                buttons.append([InlineKeyboardButton(text="üé® ‚ö†Ô∏è –í–ö–ê–ó–ê–¢–ò –ö–û–õ–Ü–† –ê–í–¢–û", callback_data="settings:set_color")])
            buttons.append([InlineKeyboardButton(text="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="noop")])
        
        # –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        buttons.extend([
            [InlineKeyboardButton(text="üöó –ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å –∞–≤—Ç–æ", callback_data="settings:car_class")],
            [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤", callback_data="settings:card")],
            [InlineKeyboardButton(text="üé® –ö–æ–ª—ñ—Ä –∞–≤—Ç–æ", callback_data="settings:set_color")],
            [InlineKeyboardButton(text="üèô –ú—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏", callback_data="settings:set_city")],
            [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é", callback_data="settings:refresh")]
        ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        try:
            await call.message.edit_text(text, reply_markup=kb)
        except:
            await call.message.answer(text, reply_markup=kb)
        
        logger.info(f"‚úÖ –í–æ–¥—ñ–π {call.from_user.id} –∑–º—ñ–Ω–∏–≤ –∫–ª–∞—Å –∞–≤—Ç–æ –Ω–∞: {car_class}")
    
    @router.callback_query(F.data == "settings:card")
    async def prompt_card(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–∫–∞–∑–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏"""
        await call.answer()
        await state.set_state(DriverProfileStates.waiting_for_card)
        
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await call.bot.send_message(
            call.from_user.id,
            "üí≥ <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—ñ–≤</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: 16 —Ü–∏—Ñ—Ä (–º–æ–∂–Ω–∞ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏)\n"
            "–ü—Ä–∏–∫–ª–∞–¥: 4149 4999 1234 5678\n\n"
            "üí° –ù–∞ —Ü—é –∫–∞—Ä—Ç–∫—É –±—É–¥–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–∏—Å—å –∫–æ–º—ñ—Å—ñ—è 2%",
            reply_markup=kb
        )
    
    @router.message(DriverProfileStates.waiting_for_card)
    async def process_card(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏"""
        if not message.text or message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await state.clear()
            await message.answer(
                "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
                reply_markup=driver_panel_keyboard()
            )
            return
        
        card = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏ (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏, 16 —Å–∏–º–≤–æ–ª—ñ–≤)
        card_digits = ''.join(filter(str.isdigit, card))
        if len(card_digits) != 16:
            await message.answer(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏!\n\n"
                "–ú–∞—î –±—É—Ç–∏ 16 —Ü–∏—Ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ 4149 4999 1234 5678
        formatted_card = ' '.join([card_digits[i:i+4] for i in range(0, 16, 4)])
        
        # –û–Ω–æ–≤–∏—Ç–∏ –≤ –ë–î
        from app.storage.db import db_manager
        async with db_manager.connect(config.database_path) as db:
            await db.execute(
                "UPDATE drivers SET card_number = ? WHERE tg_user_id = ?",
                (formatted_card, message.from_user.id)
            )
            await db.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–∞—Ä—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞:\n<code>{formatted_card}</code>\n\n"
            f"üí° –ù–∞ —Ü—é –∫–∞—Ä—Ç–∫—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è –∫–æ–º—ñ—Å—ñ—è 2%",
            reply_markup=driver_panel_keyboard()
        )
        
        logger.info(f"‚úÖ –í–æ–¥—ñ–π {message.from_user.id} –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ –∫–∞—Ä—Ç–∫—É: {formatted_card}")
    
    return router
