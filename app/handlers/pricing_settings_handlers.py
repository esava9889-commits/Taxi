"""–û–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω–∞"""
from __future__ import annotations

import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)


def create_pricing_handlers(router: Router, config, is_admin, SettingsStates, get_pricing_settings, upsert_pricing_settings, PricingSettings):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
    
    # ==================== –ö–õ–ê–°–ò –ê–í–¢–û ====================
    
    @router.callback_query(F.data == "settings:car_classes")
    async def show_car_classes_menu(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ –∞–≤—Ç–æ"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        pricing = await get_pricing_settings(config.database_path)
        
        text = (
            "üöó <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ö–õ–ê–°–Ü–í –ê–í–¢–û</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω—ñ –º–Ω–æ–∂–Ω–∏–∫–∏:\n\n"
            f"‚Ä¢ –ï–∫–æ–Ω–æ–º: <b>x{pricing.economy_multiplier:.2f}</b>\n"
            f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: <b>x{pricing.standard_multiplier:.2f}</b>\n"
            f"‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç: <b>x{pricing.comfort_multiplier:.2f}</b>\n"
            f"‚Ä¢ –ë—ñ–∑–Ω–µ—Å: <b>x{pricing.business_multiplier:.2f}</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ï–∫–æ–Ω–æ–º", callback_data="carclass:economy")],
                [InlineKeyboardButton(text="üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data="carclass:standard")],
                [InlineKeyboardButton(text="üöò –ö–æ–º—Ñ–æ—Ä—Ç", callback_data="carclass:comfort")],
                [InlineKeyboardButton(text="üèÜ –ë—ñ–∑–Ω–µ—Å", callback_data="carclass:business")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back_to_main")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("carclass:"))
    async def edit_car_class(call: CallbackQuery, state: FSMContext) -> None:
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–Ω–æ–∂–Ω–∏–∫ –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        car_class = call.data.split(":")[1]
        await call.answer()
        
        pricing = await get_pricing_settings(config.database_path)
        current = getattr(pricing, f"{car_class}_multiplier")
        
        class_names = {
            "economy": "üöó –ï–∫–æ–Ω–æ–º",
            "standard": "üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç",
            "comfort": "üöò –ö–æ–º—Ñ–æ—Ä—Ç",
            "business": "üèÜ –ë—ñ–∑–Ω–µ—Å"
        }
        
        await state.update_data(car_class=car_class)
        await state.set_state(SettingsStates.economy_mult)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–¥–∏–Ω —Å—Ç–∞–Ω
        
        await call.message.edit_text(
            f"{class_names[car_class]} <b>–ú–ù–û–ñ–ù–ò–ö</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: <b>x{current:.2f}</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –º–Ω–æ–∂–Ω–∏–∫:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>1.0</code> ‚Üí –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞\n"
            f"‚Ä¢ <code>1.3</code> ‚Üí +30%\n"
            f"‚Ä¢ <code>2.0</code> ‚Üí –ø–æ–¥–≤–æ—î–Ω–Ω—è —Ü—ñ–Ω–∏"
        )
    
    @router.message(SettingsStates.economy_mult)
    async def save_car_class_multiplier(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –º–Ω–æ–∂–Ω–∏–∫ –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        try:
            multiplier = float(message.text.strip())
            if multiplier < 0.5 or multiplier > 5.0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0")
            return
        
        data = await state.get_data()
        car_class = data.get("car_class")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫
        setattr(pricing, f"{car_class}_multiplier", multiplier)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            class_names = {
                "economy": "üöó –ï–∫–æ–Ω–æ–º",
                "standard": "üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç",
                "comfort": "üöò –ö–æ–º—Ñ–æ—Ä—Ç",
                "business": "üèÜ –ë—ñ–∑–Ω–µ—Å"
            }
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            admin_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]],
                resize_keyboard=True
            )
            await message.answer(
                f"‚úÖ –ú–Ω–æ–∂–Ω–∏–∫ –¥–ª—è {class_names[car_class]} –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>x{multiplier:.2f}</b>",
                reply_markup=admin_kb
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    
    # ==================== –ß–ê–°–û–í–Ü –ù–ê–¶–Ü–ù–ö–ò ====================
    
    @router.callback_query(F.data == "settings:time_surges")
    async def show_time_surges_menu(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é —á–∞—Å–æ–≤–∏—Ö –Ω–∞—Ü—ñ–Ω–æ–∫"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        pricing = await get_pricing_settings(config.database_path)
        
        text = (
            "‚è∞ <b>–ß–ê–°–û–í–Ü –ù–ê–¶–Ü–ù–ö–ò</b>\n\n"
            f"‚Ä¢ üåô –ù—ñ—á–Ω–∏–π (23:00-06:00): <b>+{pricing.night_percent:.0f}%</b>\n"
            f"‚Ä¢ üî• –ü—ñ–∫–æ–≤–∏–π (7-9, 17-19): <b>+{pricing.peak_hours_percent:.0f}%</b>\n"
            f"‚Ä¢ üéâ –í–∏—Ö—ñ–¥–Ω—ñ (–ü—Ç-–ù–¥ 18-23): <b>+{pricing.weekend_percent:.0f}%</b>\n"
            f"‚Ä¢ üìÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ (7-10): <b>+{pricing.monday_morning_percent:.0f}%</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Ü—ñ–Ω–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üåô –ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ", callback_data="timesurge:night")],
                [InlineKeyboardButton(text="üî• –ü—ñ–∫–æ–≤–∏–π —á–∞—Å", callback_data="timesurge:peak")],
                [InlineKeyboardButton(text="üéâ –í–∏—Ö—ñ–¥–Ω—ñ", callback_data="timesurge:weekend")],
                [InlineKeyboardButton(text="üìÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ", callback_data="timesurge:monday")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back_to_main")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("timesurge:"))
    async def edit_time_surge(call: CallbackQuery, state: FSMContext) -> None:
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á–∞—Å–æ–≤—É –Ω–∞—Ü—ñ–Ω–∫—É"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        surge_type = call.data.split(":")[1]
        await call.answer()
        
        pricing = await get_pricing_settings(config.database_path)
        
        surge_info = {
            "night": ("night_percent", "üåô –ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ (23:00-06:00)", SettingsStates.night_tariff),
            "peak": ("peak_hours_percent", "üî• –ü—ñ–∫–æ–≤–∏–π —á–∞—Å (7-9, 17-19)", SettingsStates.peak_hours),
            "weekend": ("weekend_percent", "üéâ –í–∏—Ö—ñ–¥–Ω—ñ (–ü—Ç-–ù–¥ 18-23)", SettingsStates.weekend),
            "monday": ("monday_morning_percent", "üìÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ (7-10)", SettingsStates.monday_morning)
        }
        
        field_name, display_name, state_type = surge_info[surge_type]
        current = getattr(pricing, field_name)
        
        await state.update_data(surge_type=surge_type, field_name=field_name)
        await state.set_state(state_type)
        
        await call.message.edit_text(
            f"{display_name}\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞: <b>+{current:.0f}%</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–¥–±–∞–≤–∫—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>50</code> ‚Üí +50% (1.5x)\n"
            f"‚Ä¢ <code>30</code> ‚Üí +30% (1.3x)\n"
            f"‚Ä¢ <code>0</code> ‚Üí –≤–∏–º–∫–Ω—É—Ç–∏"
        )
    
    @router.message(SettingsStates.peak_hours)
    @router.message(SettingsStates.weekend)
    @router.message(SettingsStates.monday_morning)
    async def save_time_surge(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —á–∞—Å–æ–≤—É –Ω–∞—Ü—ñ–Ω–∫—É"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        try:
            percent = float(message.text.strip())
            if percent < 0 or percent > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        data = await state.get_data()
        field_name = data.get("field_name")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
        setattr(pricing, field_name, percent)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            admin_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]],
                resize_keyboard=True
            )
            await message.answer(
                f"‚úÖ –ù–∞—Ü—ñ–Ω–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>+{percent:.0f}%</b>",
                reply_markup=admin_kb
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    
    # ==================== –ü–û–ü–ò–¢ ====================
    
    @router.callback_query(F.data == "settings:demand")
    async def show_demand_menu(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ø–∏—Ç—É"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        pricing = await get_pricing_settings(config.database_path)
        
        text = (
            "üìä <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–û–ü–ò–¢–£</b>\n\n"
            f"‚Ä¢ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤: <b>+{pricing.no_drivers_percent:.0f}%</b>\n"
            f"‚Ä¢ –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π (>3:1): <b>+{pricing.demand_very_high_percent:.0f}%</b>\n"
            f"‚Ä¢ –í–∏—Å–æ–∫–∏–π (>2:1): <b>+{pricing.demand_high_percent:.0f}%</b>\n"
            f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π (>1.5:1): <b>+{pricing.demand_medium_percent:.0f}%</b>\n"
            f"‚Ä¢ –ù–∏–∑—å–∫–∏–π (<0.3:1): <b>-{pricing.demand_low_discount_percent:.0f}%</b>\n\n"
            "–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ –≤–æ–¥—ñ—ó–≤\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üö´ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤", callback_data="demand:no_drivers")],
                [InlineKeyboardButton(text="üî•üî•üî• –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π", callback_data="demand:very_high")],
                [InlineKeyboardButton(text="üî•üî• –í–∏—Å–æ–∫–∏–π", callback_data="demand:high")],
                [InlineKeyboardButton(text="üî• –°–µ—Ä–µ–¥–Ω—ñ–π", callback_data="demand:medium")],
                [InlineKeyboardButton(text="üíö –ù–∏–∑—å–∫–∏–π (–∑–Ω–∏–∂–∫–∞)", callback_data="demand:low")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back_to_main")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=kb)
    
    @router.callback_query(F.data.startswith("demand:"))
    async def edit_demand_level(call: CallbackQuery, state: FSMContext) -> None:
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ø–æ–ø–∏—Ç—É"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        demand_type = call.data.split(":")[1]
        await call.answer()
        
        pricing = await get_pricing_settings(config.database_path)
        
        demand_info = {
            "no_drivers": ("no_drivers_percent", "üö´ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤", SettingsStates.no_drivers, False),
            "very_high": ("demand_very_high_percent", "üî•üî•üî• –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç (>3:1)", SettingsStates.demand_very_high, False),
            "high": ("demand_high_percent", "üî•üî• –í–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç (>2:1)", SettingsStates.demand_high, False),
            "medium": ("demand_medium_percent", "üî• –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–ø–∏—Ç (>1.5:1)", SettingsStates.demand_medium, False),
            "low": ("demand_low_discount_percent", "üíö –ù–∏–∑—å–∫–∏–π –ø–æ–ø–∏—Ç (<0.3:1)", SettingsStates.demand_low, True)
        }
        
        field_name, display_name, state_type, is_discount = demand_info[demand_type]
        current = getattr(pricing, field_name)
        
        await state.update_data(demand_type=demand_type, field_name=field_name, is_discount=is_discount)
        await state.set_state(state_type)
        
        sign = "-" if is_discount else "+"
        await call.message.edit_text(
            f"{display_name}\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞: <b>{sign}{current:.0f}%</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–¥–±–∞–≤–∫—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>40</code> ‚Üí {sign}40%\n"
            f"‚Ä¢ <code>25</code> ‚Üí {sign}25%\n"
            f"‚Ä¢ <code>0</code> ‚Üí –≤–∏–º–∫–Ω—É—Ç–∏"
        )
    
    @router.message(SettingsStates.no_drivers)
    @router.message(SettingsStates.demand_very_high)
    @router.message(SettingsStates.demand_high)
    @router.message(SettingsStates.demand_medium)
    @router.message(SettingsStates.demand_low)
    async def save_demand_level(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ø–æ–ø–∏—Ç—É"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        try:
            percent = float(message.text.strip())
            if percent < 0 or percent > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        data = await state.get_data()
        field_name = data.get("field_name")
        is_discount = data.get("is_discount", False)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è
        setattr(pricing, field_name, percent)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
            admin_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")]],
                resize_keyboard=True
            )
            sign = "-" if is_discount else "+"
            await message.answer(
                f"‚úÖ –†—ñ–≤–µ–Ω—å –ø–æ–ø–∏—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>{sign}{percent:.0f}%</b>",
                reply_markup=admin_kb
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    
    # ==================== –ü–û–í–ï–†–ù–ï–ù–ù–Ø ====================
    
    @router.callback_query(F.data == "settings:back_to_main")
    async def back_to_main_settings(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await state.clear()
        await call.answer()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –ë–î
        pricing = await get_pricing_settings(config.database_path)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            row = await db.fetchone("SELECT value FROM app_settings WHERE key = 'admin_payment_card'")
            admin_card = row[0] if row else "–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞"
        
        text = (
            "‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø</b>\n\n"
            
            "üöó <b>–ö–õ–ê–°–ò –ê–í–¢–û (–º–Ω–æ–∂–Ω–∏–∫–∏):</b>\n"
            f"‚Ä¢ –ï–∫–æ–Ω–æ–º: x{pricing.economy_multiplier:.2f}\n"
            f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: x{pricing.standard_multiplier:.2f}\n"
            f"‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç: x{pricing.comfort_multiplier:.2f}\n"
            f"‚Ä¢ –ë—ñ–∑–Ω–µ—Å: x{pricing.business_multiplier:.2f}\n\n"
            
            "‚è∞ <b>–ß–ê–°–û–í–Ü –ù–ê–¶–Ü–ù–ö–ò:</b>\n"
            f"‚Ä¢ üåô –ù—ñ—á–Ω–∏–π (23:00-06:00): +{pricing.night_percent:.0f}%\n"
            f"‚Ä¢ üî• –ü—ñ–∫–æ–≤–∏–π —á–∞—Å (7-9, 17-19): +{pricing.peak_hours_percent:.0f}%\n"
            f"‚Ä¢ üéâ –í–∏—Ö—ñ–¥–Ω—ñ (–ü—Ç-–ù–¥ 18-23): +{pricing.weekend_percent:.0f}%\n"
            f"‚Ä¢ üìÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ (7-10): +{pricing.monday_morning_percent:.0f}%\n\n"
            
            "üåßÔ∏è <b>–ü–û–ì–û–î–ê:</b>\n"
            f"‚Ä¢ –ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: +{pricing.weather_percent:.0f}%\n\n"
            
            "üìä <b>–ü–û–ü–ò–¢:</b>\n"
            f"‚Ä¢ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤: +{pricing.no_drivers_percent:.0f}%\n"
            f"‚Ä¢ –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π (>3:1): +{pricing.demand_very_high_percent:.0f}%\n"
            f"‚Ä¢ –í–∏—Å–æ–∫–∏–π (>2:1): +{pricing.demand_high_percent:.0f}%\n"
            f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π (>1.5:1): +{pricing.demand_medium_percent:.0f}%\n"
            f"‚Ä¢ –ù–∏–∑—å–∫–∏–π (<0.3:1): -{pricing.demand_low_discount_percent:.0f}%\n\n"
            
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí≥ <b>–ü–õ–ê–¢–Ü–ñ–ù–Ü –†–ï–ö–í–Ü–ó–ò–¢–ò:</b>\n"
            f"‚Ä¢ –ö–∞—Ä—Ç–∫–∞: <code>{admin_card}</code>\n\n"
            
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ö–ª–∞—Å–∏ –∞–≤—Ç–æ", callback_data="settings:car_classes")],
                [InlineKeyboardButton(text="‚è∞ –ß–∞—Å–æ–≤—ñ –Ω–∞—Ü—ñ–Ω–∫–∏", callback_data="settings:time_surges")],
                [InlineKeyboardButton(text="üåßÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="settings:weather")],
                [InlineKeyboardButton(text="üìä –ü–æ–ø–∏—Ç", callback_data="settings:demand")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="settings:admin_card")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back")]
            ]
        )
        
        await call.message.edit_text(text, reply_markup=kb)
