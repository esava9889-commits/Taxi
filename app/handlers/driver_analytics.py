"""–†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–ª—è –≤–æ–¥—ñ—è"""
from __future__ import annotations

import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict
from typing import Dict, List, Tuple

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_driver_by_tg_user_id,
    get_driver_order_history,
)

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver_analytics")

    @router.message(F.text == "üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    @router.callback_query(F.data == "driver:analytics")
    async def show_analytics_menu(event) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ø–æ–¥—ñ—ó
        if isinstance(event, Message):
            message = event
            user_id = event.from_user.id if event.from_user else 0
        else:
            await event.answer()
            message = event.message
            user_id = event.from_user.id if event.from_user else 0
        
        if not user_id:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, user_id)
        if not driver or driver.status != "approved":
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–æ–¥—ñ—ó–≤")
            return
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚è∞ –ö—Ä–∞—â—ñ –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏", callback_data="analytics:best_hours")],
                [InlineKeyboardButton(text="üó∫Ô∏è –¢–æ–ø-–º–∞—Ä—à—Ä—É—Ç–∏", callback_data="analytics:top_routes")],
                [InlineKeyboardButton(text="üìç –ì–∞—Ä—è—á—ñ —Ç–æ—á–∫–∏", callback_data="analytics:hotspots")],
                [InlineKeyboardButton(text="üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–æ–±—ñ—Ç–∫—É", callback_data="analytics:forecast")],
                [InlineKeyboardButton(text="üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏", callback_data="analytics:compare")],
            ]
        )
        
        await message.answer(
            "üìä <b>–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</b>\n\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:",
            reply_markup=kb
        )

    @router.callback_query(F.data == "analytics:best_hours")
    async def show_best_hours(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=1000)
        
        # –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å
        month_ago = datetime.now(timezone.utc) - timedelta(days=30)
        month_orders = [o for o in orders if o.created_at >= month_ago and o.status == 'completed']
        
        if not month_orders:
            await call.answer()
            await call.message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö. –í–∏–∫–æ–Ω–∞–π—Ç–µ –±—ñ–ª—å—à–µ –ø–æ—ó–∑–¥–æ–∫.")
            return
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ –≥–æ–¥–∏–Ω–∞–º–∏
        hourly_stats: Dict[int, List[float]] = defaultdict(list)
        
        for order in month_orders:
            hour = order.created_at.hour
            if order.fare_amount:
                hourly_stats[hour].append(order.fare_amount)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
        hourly_avg = {}
        for hour, fares in hourly_stats.items():
            hourly_avg[hour] = sum(fares) / len(fares)
        
        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –ø–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É
        sorted_hours = sorted(hourly_avg.items(), key=lambda x: x[1], reverse=True)
        
        # –¢–æ–ø-5 –≥–æ–¥–∏–Ω
        text = "‚è∞ <b>–ù–∞–π–∫—Ä–∞—â—ñ –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏</b>\n\n"
        text += "üìà <b>–¢–æ–ø-5 –≥–æ–¥–∏–Ω –ø–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É:</b>\n\n"
        
        for i, (hour, avg_fare) in enumerate(sorted_hours[:5], 1):
            count = len(hourly_stats[hour])
            total = sum(hourly_stats[hour])
            text += f"{i}. <b>{hour:02d}:00-{hour+1:02d}:00</b>\n"
            text += f"   üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_fare:.0f} –≥—Ä–Ω\n"
            text += f"   üìä –ü–æ—ó–∑–¥–æ–∫: {count}\n"
            text += f"   üíµ –í—Å—å–æ–≥–æ: {total:.0f} –≥—Ä–Ω\n\n"
        
        # –ì—Ä–∞—Ñ—ñ–∫
        text += "üìä <b>–ì—Ä–∞—Ñ—ñ–∫ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –ø–æ –≥–æ–¥–∏–Ω–∞—Ö:</b>\n\n"
        max_earning = max(hourly_avg.values()) if hourly_avg else 1
        
        for hour in range(24):
            if hour in hourly_avg:
                avg = hourly_avg[hour]
                bar_length = int((avg / max_earning) * 15)
                text += f"{hour:02d}:00 {'‚ñà' * bar_length} {avg:.0f} –≥—Ä–Ω\n"
        
        text += "\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>\n"
        if sorted_hours:
            best_hour = sorted_hours[0][0]
            text += f"üî• –ü—Ä–∞—Ü—é–π—Ç–µ –≤ {best_hour:02d}:00-{best_hour+2:02d}:00 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É!"
        
        await call.answer()
        await call.message.answer(text)

    @router.callback_query(F.data == "analytics:top_routes")
    async def show_top_routes(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=500)
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö
        route_stats: Dict[str, List[float]] = defaultdict(list)
        
        for order in orders:
            if order.status == 'completed' and order.fare_amount:
                # –°–∫–æ—Ä–æ—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
                pickup_short = order.pickup_address[:30]
                dest_short = order.destination_address[:30]
                route_key = f"{pickup_short} ‚Üí {dest_short}"
                route_stats[route_key].append(order.fare_amount)
        
        if not route_stats:
            await call.answer()
            await call.message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç–∏")
            return
        
        # –¢–æ–ø-10 –º–∞—Ä—à—Ä—É—Ç—ñ–≤
        route_avg = {route: sum(fares)/len(fares) for route, fares in route_stats.items()}
        sorted_routes = sorted(route_avg.items(), key=lambda x: x[1], reverse=True)
        
        text = "üó∫Ô∏è <b>–¢–æ–ø-10 –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤:</b>\n\n"
        
        for i, (route, avg_fare) in enumerate(sorted_routes[:10], 1):
            count = len(route_stats[route])
            total = sum(route_stats[route])
            text += f"{i}. {route}\n"
            text += f"   üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_fare:.0f} –≥—Ä–Ω\n"
            text += f"   üìä –ü–æ—ó–∑–¥–æ–∫: {count}\n"
            text += f"   üíµ –í—Å—å–æ–≥–æ: {total:.0f} –≥—Ä–Ω\n\n"
        
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n"
        text += "–ü—Ä–∞—Ü—é–π—Ç–µ –≤ —Ä–∞–π–æ–Ω–∞—Ö –∑ –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à–∏–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏!"
        
        await call.answer()
        await call.message.answer(text)

    @router.callback_query(F.data == "analytics:hotspots")
    async def show_hotspots(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–∞—Ä—è—á—ñ —Ç–æ—á–∫–∏ (–¥–µ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—å)"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=500)
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ä–∞–π–æ–Ω–∞—Ö/–∞–¥—Ä–µ—Å–∞—Ö
        pickup_stats: Dict[str, int] = defaultdict(int)
        
        for order in orders:
            if order.status == 'completed':
                # –í–∑—è—Ç–∏ –ø–µ—Ä—à—ñ 20 —Å–∏–º–≤–æ–ª—ñ–≤ –∞–¥—Ä–µ—Å–∏ (—Ä–∞–π–æ–Ω)
                area = order.pickup_address[:20]
                pickup_stats[area] += 1
        
        if not pickup_stats:
            await call.answer()
            await call.message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö")
            return
        
        sorted_areas = sorted(pickup_stats.items(), key=lambda x: x[1], reverse=True)
        
        text = "üìç <b>–ì–∞—Ä—è—á—ñ —Ç–æ—á–∫–∏ (–Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—å):</b>\n\n"
        
        max_count = sorted_areas[0][1] if sorted_areas else 1
        
        for i, (area, count) in enumerate(sorted_areas[:15], 1):
            bar_length = int((count / max_count) * 10)
            text += f"{i}. {area}...\n"
            text += f"   {'üî•' * bar_length} {count} –∑–∞–º–æ–≤–ª–µ–Ω—å\n\n"
        
        text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n"
        text += f"–ß–µ–∫–∞–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª—è: {sorted_areas[0][0]}..."
        
        await call.answer()
        await call.message.answer(text)

    @router.callback_query(F.data == "analytics:forecast")
    async def show_forecast(call: CallbackQuery) -> None:
        """–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–æ–±—ñ—Ç–∫—É"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=1000)
        
        month_ago = datetime.now(timezone.utc) - timedelta(days=30)
        week_ago = datetime.now(timezone.utc) - timedelta(days=7)
        
        month_orders = [o for o in orders if o.created_at >= month_ago and o.status == 'completed']
        week_orders = [o for o in orders if o.created_at >= week_ago and o.status == 'completed']
        
        if not month_orders:
            await call.answer()
            await call.message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É")
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        month_earnings = sum(o.fare_amount or 0 for o in month_orders)
        week_earnings = sum(o.fare_amount or 0 for o in week_orders)
        
        avg_per_day = month_earnings / 30
        avg_per_week = week_earnings / 7
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å (–∑–∞ –ø–æ—Ç–æ—á–Ω–∏–º —Ç–µ–º–ø–æ–º)
        forecast_month = avg_per_day * 30
        
        # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫
        month_trips = len(month_orders)
        avg_trips_per_day = month_trips / 30
        
        # –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫
        avg_fare = month_earnings / month_trips if month_trips > 0 else 0
        
        text = (
            "üí∞ <b>–ü—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–æ–±—ñ—Ç–∫—É</b>\n\n"
            f"üìÖ <b>–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:</b>\n"
            f"üíµ –ó–∞—Ä–æ–±—ñ—Ç–æ–∫: {month_earnings:.0f} –≥—Ä–Ω\n"
            f"üìä –ü–æ—ó–∑–¥–æ–∫: {month_trips}\n"
            f"üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_fare:.0f} –≥—Ä–Ω\n\n"
            f"üìà <b>–°–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –¥–µ–Ω—å:</b>\n"
            f"üíµ {avg_per_day:.0f} –≥—Ä–Ω/–¥–µ–Ω—å\n"
            f"üìä {avg_trips_per_day:.1f} –ø–æ—ó–∑–¥–æ–∫/–¥–µ–Ω—å\n\n"
            f"üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º—ñ—Å—è—Ü—å:</b>\n"
            f"üí∞ {forecast_month:.0f} –≥—Ä–Ω (–ø—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–µ–º–ø—ñ)\n\n"
            f"üìä <b>–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</b>\n"
            f"üíµ {week_earnings:.0f} –≥—Ä–Ω\n"
            f"üìà –°–µ—Ä–µ–¥–Ω—å–æ: {avg_per_week:.0f} –≥—Ä–Ω/–¥–µ–Ω—å\n\n"
        )
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –º–∏–Ω—É–ª–∏–º —Ç–∏–∂–Ω–µ–º
        two_weeks_ago = datetime.now(timezone.utc) - timedelta(days=14)
        prev_week_orders = [o for o in orders if two_weeks_ago <= o.created_at < week_ago and o.status == 'completed']
        
        if prev_week_orders:
            prev_week_earnings = sum(o.fare_amount or 0 for o in prev_week_orders)
            change = ((week_earnings - prev_week_earnings) / prev_week_earnings * 100) if prev_week_earnings > 0 else 0
            
            if change > 0:
                text += f"üìà –†—ñ—Å—Ç: <b>+{change:.1f}%</b> –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –º–∏–Ω—É–ª–∏–º —Ç–∏–∂–Ω–µ–º üéâ\n"
            elif change < 0:
                text += f"üìâ –ó–Ω–∏–∂–µ–Ω–Ω—è: <b>{change:.1f}%</b> –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –º–∏–Ω—É–ª–∏–º —Ç–∏–∂–Ω–µ–º ‚ö†Ô∏è\n"
            else:
                text += "‚û°Ô∏è –ë–µ–∑ –∑–º—ñ–Ω –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –º–∏–Ω—É–ª–∏–º —Ç–∏–∂–Ω–µ–º\n"
        
        text += "\nüí° <b>–©–æ–± –∑–±—ñ–ª—å—à–∏—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫:</b>\n"
        text += "‚Ä¢ –ü—Ä–∞—Ü—é–π—Ç–µ –≤ –ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ (–¥–∏–≤. '–ö—Ä–∞—â—ñ –≥–æ–¥–∏–Ω–∏')\n"
        text += "‚Ä¢ –ß–µ–∫–∞–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª—è –≥–∞—Ä—è—á–∏—Ö —Ç–æ—á–æ–∫\n"
        text += "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –≤–∏—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (>4.8)\n"
        text += "‚Ä¢ –û–Ω–æ–≤–ª—é–π—Ç–µ –ª–æ–∫–∞—Ü—ñ—é —á–∞—Å—Ç—ñ—à–µ"
        
        await call.answer()
        await call.message.answer(text)

    @router.callback_query(F.data == "analytics:compare")
    async def compare_with_others(call: CallbackQuery) -> None:
        """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ –≤–æ–¥—ñ—è–º–∏"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –≤–æ–¥—ñ—è –∑–∞ –º—ñ—Å—è—Ü—å
        orders = await get_driver_order_history(config.database_path, call.from_user.id, limit=1000)
        month_ago = datetime.now(timezone.utc) - timedelta(days=30)
        month_orders = [o for o in orders if o.created_at >= month_ago and o.status == 'completed']
        
        my_earnings = sum(o.fare_amount or 0 for o in month_orders)
        my_trips = len(month_orders)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥
        from app.storage.db import get_driver_average_rating
        my_rating = await get_driver_average_rating(config.database_path, call.from_user.id)
        
        # TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å—ñ—Ö –≤–æ–¥—ñ—è—Ö –º—ñ—Å—Ç–∞
        # –ü–æ–∫–∏ —â–æ —Å–∏–º—É–ª—é—î–º–æ
        avg_earnings = 8000  # –°–µ—Ä–µ–¥–Ω—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –≤–æ–¥—ñ—è –∑–∞ –º—ñ—Å—è—Ü—å
        avg_trips = 120
        avg_rating = 4.5
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        earnings_diff = ((my_earnings - avg_earnings) / avg_earnings * 100) if avg_earnings > 0 else 0
        trips_diff = ((my_trips - avg_trips) / avg_trips * 100) if avg_trips > 0 else 0
        
        text = (
            "üìà <b>–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —ñ–Ω—à–∏–º–∏ –≤–æ–¥—ñ—è–º–∏</b>\n\n"
            f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üí∞ <b>–í–∞—à –∑–∞—Ä–æ–±—ñ—Ç–æ–∫:</b> {my_earnings:.0f} –≥—Ä–Ω\n"
            f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π –≤ –º—ñ—Å—Ç—ñ: {avg_earnings:.0f} –≥—Ä–Ω\n"
        )
        
        if earnings_diff > 0:
            text += f"‚úÖ –í–∏ –Ω–∞ <b>{earnings_diff:.0f}%</b> –≤–∏—â–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ! üéâ\n\n"
        elif earnings_diff < 0:
            text += f"‚ö†Ô∏è –í–∏ –Ω–∞ <b>{abs(earnings_diff):.0f}%</b> –Ω–∏–∂—á–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ\n\n"
        else:
            text += "‚û°Ô∏è –í–∏ –Ω–∞ —Ä—ñ–≤–Ω—ñ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ\n\n"
        
        text += (
            f"üìä <b>–í–∞—à—ñ –ø–æ—ó–∑–¥–∫–∏:</b> {my_trips}\n"
            f"üìä –°–µ—Ä–µ–¥–Ω—å–æ –≤ –º—ñ—Å—Ç—ñ: {avg_trips}\n"
        )
        
        if trips_diff > 0:
            text += f"‚úÖ –ù–∞ <b>{trips_diff:.0f}%</b> –±—ñ–ª—å—à–µ –ø–æ—ó–∑–¥–æ–∫! üöÄ\n\n"
        else:
            text += f"‚ö†Ô∏è –ù–∞ <b>{abs(trips_diff):.0f}%</b> –º–µ–Ω—à–µ –ø–æ—ó–∑–¥–æ–∫\n\n"
        
        text += (
            f"‚≠ê <b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:</b> {my_rating:.1f}\n" if my_rating else "‚≠ê –†–µ–π—Ç–∏–Ω–≥: –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–æ–∫\n"
        )
        text += f"‚≠ê –°–µ—Ä–µ–¥–Ω—ñ–π: {avg_rating:.1f}\n\n"
        
        # –ü–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É (—Å–∏–º—É–ª—è—Ü—ñ—è)
        position = 15  # TODO: –†–µ–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        total_drivers = 47
        
        text += f"üèÜ <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è:</b> #{position} –∑ {total_drivers}\n\n"
        
        text += "üí° <b>–Ø–∫ –ø—ñ–¥–Ω—è—Ç–∏—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥—É:</b>\n"
        text += "‚Ä¢ –ü—Ä–∞—Ü—é–π—Ç–µ –±—ñ–ª—å—à–µ –≥–æ–¥–∏–Ω\n"
        text += "‚Ä¢ –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (>4.8)\n"
        text += "‚Ä¢ –ü—Ä–∏–π–º–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        text += "‚Ä¢ –ë—É–¥—å—Ç–µ –æ–Ω–ª–∞–π–Ω –≤ –ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏"
        
        await call.answer()
        await call.message.answer(text)

    @router.callback_query(F.data == "analytics:hotspots")
    async def show_hotspots_map(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç—É –≥–∞—Ä—è—á–∏—Ö —Ç–æ—á–æ–∫"""
        await call.answer()
        
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—é –Ω–∞ –∫–∞—Ä—Ç—ñ
        await call.message.answer(
            "üìç <b>–ö–∞—Ä—Ç–∞ –≥–∞—Ä—è—á–∏—Ö —Ç–æ—á–æ–∫</b>\n\n"
            "üî• <b>–ó–æ–Ω–∏ –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–º–æ–≤–ª–µ–Ω—å:</b>\n\n"
            "1. –¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞ üî•üî•üî• (40% –∑–∞–º–æ–≤–ª–µ–Ω—å)\n"
            "2. –¢–†–¶ ¬´–ì–ª–æ–±—É—Å¬ª üî•üî• (25%)\n"
            "3. –í–æ–∫–∑–∞–ª üî•üî• (20%)\n"
            "4. –ê–µ—Ä–æ–ø–æ—Ä—Ç üî• (10%)\n"
            "5. –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç üî• (5%)\n\n"
            "üí° –ß–µ–∫–∞–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ü–∏—Ö –∑–æ–Ω–∞—Ö –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ –∑–∞—Ä–æ–±—ñ—Ç–∫—É!"
        )

    return router
