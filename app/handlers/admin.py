from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import List

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

logger = logging.getLogger(__name__)

from app.config.config import AppConfig, AVAILABLE_CITIES
from app.storage.db import (
    Tariff,
    get_latest_tariff,
    insert_tariff,
    fetch_recent_orders,
    fetch_pending_drivers,
    update_driver_status,
    get_driver_by_id,
    User,
    upsert_user,
    get_all_users,
    get_user_by_id,
    get_user_order_history,
    block_user,
    unblock_user,
    add_rides_to_client,
    get_driver_unpaid_commission,
    PricingSettings,
    get_pricing_settings,
    upsert_pricing_settings,
)
from app.utils.visual import (
    format_karma,
    get_karma_emoji,
    create_box,
)
from app.handlers.pricing_settings_handlers import create_pricing_handlers


CANCEL_TEXT = "–°–∫–∞—Å—É–≤–∞—Ç–∏"


def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")],
            [KeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ–∏"), KeyboardButton(text="üöó –í–æ–¥—ñ—ó")],
            [KeyboardButton(text="üë§ –ö–ª—ñ—î–Ω—Ç–∏"), KeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å",
    )


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


class TariffStates(StatesGroup):
    base_fare = State()
    per_km = State()
    per_minute = State()
    minimum = State()
    commission = State()


class SettingsStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–Ω–∞—Ü—ñ–Ω–∫–∏)"""
    select_option = State()  # –í–∏–±—ñ—Ä —â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏
    night_tariff = State()  # –í–≤–µ–¥–µ–Ω–Ω—è % –Ω—ñ—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É
    weather = State()  # –í–≤–µ–¥–µ–Ω–Ω—è % –ø–æ–≥–æ–¥–∏
    admin_card = State()  # –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó
    
    # –ö–ª–∞—Å–∏ –∞–≤—Ç–æ
    economy_mult = State()
    standard_mult = State()
    comfort_mult = State()
    business_mult = State()
    
    # –ß–∞—Å–æ–≤—ñ –Ω–∞—Ü—ñ–Ω–∫–∏
    peak_hours = State()
    weekend = State()
    monday_morning = State()
    
    # –ü–æ–ø–∏—Ç
    no_drivers = State()
    demand_very_high = State()
    demand_high = State()
    demand_medium = State()
    demand_low = State()
    
    # Wizard –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ —á–µ—Ä–∑—ñ)
    wizard_economy = State()
    wizard_standard = State()
    wizard_comfort = State()
    wizard_business = State()
    wizard_night = State()
    wizard_peak = State()
    wizard_weekend = State()
    wizard_monday = State()
    wizard_weather = State()
    wizard_no_drivers = State()
    wizard_demand_very_high = State()
    wizard_demand_high = State()
    wizard_demand_medium = State()
    wizard_demand_low = State()


class BroadcastStates(StatesGroup):
    message = State()


class ClientManageStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º–∏"""
    add_rides_count = State()  # –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—ó–∑–¥–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è


def create_router(config: AppConfig) -> Router:
    router = Router(name="admin")
    
    def is_admin(user_id: int) -> bool:
        return user_id in set(config.bot.admin_ids)

    # === Helpers for app_settings (priority mode) ===
    async def get_priority_mode() -> bool:
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            row = await db.fetchone("SELECT value FROM app_settings WHERE key = 'priority_mode'")
            return (row and str(row[0]).lower() in ("1", "true", "on", "yes"))

    async def set_priority_mode(enabled: bool) -> None:
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            await db.execute(
                "INSERT INTO app_settings(key,value) VALUES('priority_mode', ?)"
                " ON CONFLICT(key) DO UPDATE SET value=excluded.value",
                ("1" if enabled else "0",)
            )
            await db.commit()
    
    async def get_admin_payment_card() -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–¥–º—ñ–Ω–∞ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó"""
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            row = await db.fetchone("SELECT value FROM app_settings WHERE key = 'admin_payment_card'")
            return row[0] if row else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    
    async def set_admin_payment_card(card_number: str) -> None:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∞–¥–º—ñ–Ω–∞ –¥–ª—è —Å–ø–ª–∞—Ç–∏ –∫–æ–º—ñ—Å—ñ—ó"""
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            await db.execute(
                "INSERT INTO app_settings(key,value) VALUES('admin_payment_card', ?)"
                " ON CONFLICT(key) DO UPDATE SET value=excluded.value",
                (card_number,)
            )
            await db.commit()

    @router.callback_query(F.data.startswith("admin:priority_mode_toggle:"))
    async def priority_mode_toggle(call: CallbackQuery) -> None:
        """–ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—É–º–±–ª–µ—Ä —Ä–µ–∂–∏–º—É –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        parts = (call.data or "").split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        new_value = parts[2]
        enabled = str(new_value) in ("1", "true", "on", "yes")
        await set_priority_mode(enabled)
        await call.answer("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if enabled else "‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ", show_alert=True)

        # –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É —É —Ü—å–æ–º—É –∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        kb_mode = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=("üîì –í–∏–º–∫–Ω—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç" if enabled else "üîí –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
                    callback_data=f"admin:priority_mode_toggle:{0 if enabled else 1}")]
            ]
        )
        try:
            base_text = call.message.text or "‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ñ –≤–æ–¥—ñ—ó</b>\n\n"
            if "–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:" in base_text:
                prefix = base_text.split("–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:")[0]
                new_text = prefix + f"–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: <b>{'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else '–í–∏–º–∫–Ω–µ–Ω–æ'}</b>"
            else:
                new_text = base_text + f"\n–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: <b>{'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else '–í–∏–º–∫–Ω–µ–Ω–æ'}</b>"
            await call.message.edit_text(new_text, reply_markup=kb_mode, parse_mode="HTML")
        except Exception:
            await call.message.edit_reply_markup(reply_markup=kb_mode)

    @router.message(Command("admin"))
    @router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return
        await message.answer(
            "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
            reply_markup=admin_menu_keyboard()
        )

    @router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_statistics(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        from app.storage.db_connection import db_manager
        
        try:
            async with db_manager.connect(config.database_path) as db:
                # Total orders
                async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                    total_orders = (await cur.fetchone())[0]
                
                # Completed orders
                async with db.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'") as cur:
                    completed_orders = (await cur.fetchone())[0]
                
                # Active drivers
                async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'approved'") as cur:
                    active_drivers = (await cur.fetchone())[0]
                
                # Pending driver applications
                async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'pending'") as cur:
                    pending_drivers = (await cur.fetchone())[0]
                
                # Total revenue
                async with db.execute("SELECT SUM(fare_amount) FROM orders WHERE status = 'completed'") as cur:
                    row = await cur.fetchone()
                    total_revenue = row[0] if row[0] else 0.0
                
                # Total commission
                async with db.execute("SELECT SUM(commission) FROM orders WHERE status = 'completed'") as cur:
                    row = await cur.fetchone()
                    total_commission = row[0] if row[0] else 0.0
                
                # Unpaid commissions
                async with db.execute("SELECT SUM(commission) FROM payments WHERE commission_paid = 0") as cur:
                    row = await cur.fetchone()
                    unpaid_commission = row[0] if row[0] else 0.0
                
                # Total users
                async with db.execute("SELECT COUNT(*) FROM users") as cur:
                    total_users = (await cur.fetchone())[0]
                
                text = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
                    f"üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
                    f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {completed_orders}\n"
                    f"üöó –ê–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤: {active_drivers}\n"
                    f"‚è≥ –í–æ–¥—ñ—ó–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_drivers}\n\n"
                    f"üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_revenue:.2f} –≥—Ä–Ω\n"
                    f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {total_commission:.2f} –≥—Ä–Ω\n"
                    f"‚ö†Ô∏è –ù–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {unpaid_commission:.2f} –≥—Ä–Ω\n"
                    f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}"
                )
                
                await message.answer(text, reply_markup=admin_menu_keyboard())
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ DATABASE_URL –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ Render.",
                reply_markup=admin_menu_keyboard()
            )

    @router.message(F.text == "üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")
    async def moderate_drivers(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        drivers = await fetch_pending_drivers(config.database_path, limit=20)
        if not drivers:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", reply_markup=admin_menu_keyboard())
            return
        
        for d in drivers:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"drv:approve:{d.id}"),
                        InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"drv:reject:{d.id}"),
                    ]
                ]
            )
            text = (
                f"<b>–ó–∞—è–≤–∫–∞ #{d.id}</b>\n\n"
                f"üë§ –ü–Ü–ë: {d.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {d.phone}\n"
                f"üèô –ú—ñ—Å—Ç–æ: {d.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üöó –ê–≤—Ç–æ: {d.car_make} {d.car_model}\n"
                f"üî¢ –ù–æ–º–µ—Ä: {d.car_plate}\n"
                f"üìÖ –ü–æ–¥–∞–Ω–æ: {d.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
            await message.answer(text, reply_markup=kb)
            if d.license_photo_file_id:
                try:
                    await message.answer_photo(
                        d.license_photo_file_id,
                        caption=f"üìÑ –ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–∑–∞—è–≤–∫–∞ #{d.id})"
                    )
                except Exception:
                    pass

    @router.message(F.text == "üí∞ –¢–∞—Ä–∏—Ñ–∏")
    async def show_tariffs(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        tariff = await get_latest_tariff(config.database_path)
        if tariff:
            text = (
                "üí∞ <b>–ü–æ—Ç–æ—á–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏</b>\n\n"
                f"–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: {tariff.base_fare:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ –∫–º: {tariff.per_km:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É: {tariff.per_minute:.2f} –≥—Ä–Ω\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: {tariff.minimum:.2f} –≥—Ä–Ω\n"
                f"–ö–æ–º—ñ—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É: {tariff.commission_percent*100:.1f}%\n\n"
                f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tariff.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
        else:
            text = "‚ö†Ô∏è –¢–∞—Ä–∏—Ñ–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏", callback_data="tariff:edit")]]
        )
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "tariff:edit")
    async def start_tariff_edit(call: CallbackQuery, state: FSMContext) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        await call.answer()
        await state.set_state(TariffStates.base_fare)
        await call.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É (–≥—Ä–Ω):", 
            reply_markup=cancel_keyboard()
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel_admin_action(message: Message, state: FSMContext) -> None:
        await state.clear()
        await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=admin_menu_keyboard())

    @router.message(TariffStates.base_fare)
    async def set_base_fare(message: Message, state: FSMContext) -> None:
        try:
            base_fare = float(message.text.strip())
            if base_fare < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50.00)")
            return
        
        await state.update_data(base_fare=base_fare)
        await state.set_state(TariffStates.per_km)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä (–≥—Ä–Ω), –ø–æ—Ç—ñ–º –∑–¥–∞—Å—Ç–µ –∫–æ–º—ñ—Å—ñ—é (%):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_km)
    async def set_per_km(message: Message, state: FSMContext) -> None:
        try:
            per_km = float(message.text.strip())
            if per_km < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 8.00)")
            return
        
        await state.update_data(per_km=per_km)
        await state.set_state(TariffStates.per_minute)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ —Ö–≤–∏–ª–∏–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_minute)
    async def set_per_minute(message: Message, state: FSMContext) -> None:
        try:
            per_minute = float(message.text.strip())
            if per_minute < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2.00)")
            return
        
        await state.update_data(per_minute=per_minute)
        await state.set_state(TariffStates.minimum)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.minimum)
    async def set_minimum(message: Message, state: FSMContext) -> None:
        try:
            minimum = float(message.text.strip())
            if minimum < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 60.00)")
            return
        
        # –ó–∞–ø–∏—Ç –∫–æ–º—ñ—Å—ñ—ó –ø—ñ—Å–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        await state.update_data(minimum=minimum)
        await state.set_state(TariffStates.commission)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é —Å–µ—Ä–≤—ñ—Å—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2 –∞–±–æ 2.5):", reply_markup=cancel_keyboard())

    # –í–∏–¥–∞–ª–∏–ª–∏ callback-–µ—Ç–∞–ø, –≤–≤–æ–¥–∏–º–æ –∫–æ–º—ñ—Å—ñ—é –Ω–∞–ø—Ä—è–º—É —É —Å—Ç–∞–Ω—ñ TariffStates.commission

    @router.message(TariffStates.commission)
    async def set_commission_percent(message: Message, state: FSMContext) -> None:
        # –ü–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è –≤–≤–æ–¥—É –∫–æ–º—ñ—Å—ñ—ó –ø—ñ—Å–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        try:
            commission_percent = float(message.text.strip())
            if commission_percent < 0 or commission_percent > 50:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ (0-50), –Ω–∞–ø—Ä. 2.0")
            return
        data = await state.get_data()
        tariff = Tariff(
            id=None,
            base_fare=data["base_fare"],
            per_km=data["per_km"],
            per_minute=data["per_minute"],
            minimum=data["minimum"],
            commission_percent=commission_percent / 100.0,
            created_at=datetime.now(timezone.utc)
        )
        await insert_tariff(config.database_path, tariff)
        await state.clear()
        await message.answer("‚úÖ –¢–∞—Ä–∏—Ñ–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_menu_keyboard())

    @router.message(F.text == "üöó –í–æ–¥—ñ—ó")
    async def show_drivers_list(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–æ–¥—ñ—ó–≤"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        from app.storage.db_connection import db_manager
        
        async with db_manager.connect(config.database_path) as db:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –≤–æ–¥—ñ—ó–≤ (–¥–æ–¥–∞—î–º–æ –ø–æ–ª–µ priority)
            async with db.execute(
                """
                SELECT id, tg_user_id, full_name, phone, car_make, car_model, car_plate,
                       car_class, status, city, online, created_at, priority
                FROM drivers
                ORDER BY 
                    CASE status
                        WHEN 'approved' THEN 1
                        WHEN 'pending' THEN 2
                        WHEN 'rejected' THEN 3
                        ELSE 4
                    END,
                    created_at DESC
                """
            ) as cur:
                drivers = await cur.fetchall()
        
        if not drivers:
            await message.answer(
                "üë• <b>–í–æ–¥—ñ—ó–≤ –Ω–µ–º–∞—î</b>\n\n"
                "–ü–æ–∫–∏ —â–æ –∂–æ–¥–µ–Ω –≤–æ–¥—ñ–π –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è.",
                reply_markup=admin_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        approved_drivers = [d for d in drivers if d[8] == "approved"]
        pending_drivers = [d for d in drivers if d[8] == "pending"]
        rejected_drivers = [d for d in drivers if d[8] == "rejected"]
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–∂–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–∫—Ä–µ–º–æ
        if approved_drivers:
            # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—É–º–±–ª–µ—Ä–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–∏–∑–∞—Ü—ñ—ó
            priority_mode = await get_priority_mode()
            kb_mode = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=("üîì –í–∏–º–∫–Ω—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç" if priority_mode else "üîí –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"),
                        callback_data=f"admin:priority_mode_toggle:{1 if not priority_mode else 0}")]
                ]
            )
            await message.answer(
                (
                    f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ñ –≤–æ–¥—ñ—ó ({len(approved_drivers)})</b>\n\n"
                    f"–ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: <b>{'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if priority_mode else '–í–∏–º–∫–Ω–µ–Ω–æ'}</b>"
                ),
                reply_markup=kb_mode,
                parse_mode="HTML"
            )
            for d in approved_drivers:
                (
                    driver_id,
                    tg_user_id,
                    full_name,
                    phone,
                    car_make,
                    car_model,
                    car_plate,
                    car_class,
                    status,
                    city,
                    online,
                    created_at,
                    priority,
                ) = d

                online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if online else "üî¥ –û—Ñ–ª–∞–π–Ω"
                priority_badge = "‚≠ê" if (priority or 0) > 0 else ""
                toggle_text = "‚≠ê –í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç" if (priority or 0) > 0 else "‚≠ê –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ—Å–ø–ª–∞—á–µ–Ω—É –∫–æ–º—ñ—Å—ñ—é –≤–æ–¥—ñ—è
                unpaid_commission = await get_driver_unpaid_commission(config.database_path, tg_user_id)

                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"admin_driver:block:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={tg_user_id}")
                        ],
                        [InlineKeyboardButton(text=toggle_text, callback_data=f"admin_driver:priority_toggle:{driver_id}")],
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_driver:stats:{driver_id}")],
                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:delete:{driver_id}")]
                    ]
                )

                text = (
                    f"üë§ <b>{full_name}</b> {priority_badge} {online_status}\n"
                    f"üì± {phone}\n"
                    f"üèôÔ∏è {city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {car_make} {car_model} ({car_plate})\n"
                    f"üéØ –ö–ª–∞—Å: {car_class}\n"
                    f"‚≠ê –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if (priority or 0) > 0 else '–í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                    f"üí≥ –ù–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: <b>{unpaid_commission:.2f} –≥—Ä–Ω</b>\n"
                    f"üÜî ID: {driver_id}"
                )

                await message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        if pending_drivers:
            await message.answer(
                f"‚è≥ <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ({len(pending_drivers)})</b>\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤' –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è",
                parse_mode="HTML"
            )
        
        if rejected_drivers:
            await message.answer(
                f"‚ùå <b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ ({len(rejected_drivers)})</b>",
                parse_mode="HTML"
            )
            for d in rejected_drivers:
                driver_id, tg_user_id, full_name, phone, car_make, car_model, car_plate, \
                    car_class, status, city, online, created_at, priority = d
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ—Å–ø–ª–∞—á–µ–Ω—É –∫–æ–º—ñ—Å—ñ—é –≤–æ–¥—ñ—è
                unpaid_commission = await get_driver_unpaid_commission(config.database_path, tg_user_id)
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"admin_driver:unblock:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={tg_user_id}")
                        ],
                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:delete:{driver_id}")]
                    ]
                )
                
                text = (
                    f"üë§ <b>{full_name}</b> üö´\n"
                    f"üì± {phone}\n"
                    f"üèôÔ∏è {city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {car_make} {car_model} ({car_plate})\n"
                    f"üí≥ –ù–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: <b>{unpaid_commission:.2f} –≥—Ä–Ω</b>\n"
                    f"üÜî ID: {driver_id}"
                )
                
                await message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        await message.answer("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤ (approve/reject)
    @router.callback_query(F.data.startswith("drv:"))
    async def handle_driver_moderation(call: CallbackQuery) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        parts = (call.data or "").split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        action = parts[1]
        driver_id = int(parts[2])
        
        try:
            driver = await get_driver_by_id(config.database_path, driver_id)
            if not driver:
                await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            if action == "approve":
                await update_driver_status(config.database_path, driver_id, "approved")
                await call.answer("‚úÖ –í–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", show_alert=True)
                
                # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –Ω–µ –±–æ—Ç
                bot_info = await call.bot.get_me()
                if driver.tg_user_id == bot_info.id:
                    logger.warning(f"‚ö†Ô∏è Skipping notification for bot driver {driver_id}")
                    if call.message:
                        await call.message.edit_text(
                            f"‚ö†Ô∏è <b>–£–í–ê–ì–ê: –ó–∞—è–≤–∫—É #{driver_id} —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ —Ü–µ –ë–û–¢!</b>\n\n"
                            f"tg_user_id = {driver.tg_user_id} (ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞)\n\n"
                            f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                            f"–í–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n"
                            f"<code>DELETE FROM drivers WHERE id = {driver_id};</code>",
                            parse_mode="HTML"
                        )
                    return
                
                # Notify driver
                try:
                    from app.handlers.keyboards import main_menu_keyboard
                    
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è", callback_data="open_driver_panel")]
                        ]
                    )
                    
                    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –≥—Ä—É–ø—É
                    welcome_text = (
                        "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                        "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ —Ç–µ–ø–µ—Ä –≤–æ–¥—ñ–π –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                        "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                    )
                    
                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê: –¢—ñ–ª—å–∫–∏ –≥—Ä—É–ø–∞ –ú–Ü–°–¢–ê –≤–æ–¥—ñ—è, –ë–ï–ó fallback
                    driver_city = driver.city
                    city_invite_link = None
                    
                    if driver_city and driver_city in config.city_invite_links:
                        city_invite_link = config.city_invite_links[driver_city]
                    
                    # –í–ê–ñ–õ–ò–í–û: –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—É –≥—Ä—É–ø—É!
                    # –í–æ–¥—ñ–π –º–∞—î –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¢–Ü–õ–¨–ö–ò –Ω–∞ –≥—Ä—É–ø—É –°–í–û–ì–û –º—ñ—Å—Ç–∞
                    
                    if city_invite_link:
                        # –Ñ –≥—Ä—É–ø–∞ –¥–ª—è –º—ñ—Å—Ç–∞ –≤–æ–¥—ñ—è
                        welcome_text += (
                            f"üì± <b>–î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤ –º—ñ—Å—Ç–∞ {driver_city}:</b>\n"
                            f"{city_invite_link}\n\n"
                            f"‚ö†Ô∏è –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ {driver_city} –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ.\n"
                            f"–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å!\n\n"
                        )
                        logger.info(f"‚úÖ –í–æ–¥—ñ–π #{driver_id} ({driver_city}) –æ—Ç—Ä–∏–º–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –º—ñ—Å—Ç–∞: {city_invite_link}")
                    else:
                        # –ù–µ–º–∞—î –≥—Ä—É–ø–∏ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞
                        welcome_text += (
                            f"‚ö†Ô∏è <b>–£–í–ê–ì–ê: –ì—Ä—É–ø–∞ –¥–ª—è –º—ñ—Å—Ç–∞ {driver_city} —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞!</b>\n\n"
                            f"–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏.\n\n"
                            f"üìß –ù–∞–ø–∏—à—ñ—Ç—å: @{config.admin_username or 'admin'}\n\n"
                        )
                        logger.warning(f"‚ö†Ô∏è –í–æ–¥—ñ–π #{driver_id} —Å—Ö–≤–∞–ª–µ–Ω–∏–π, –∞–ª–µ –≥—Ä—É–ø–∞ –º—ñ—Å—Ç–∞ '{driver_city}' –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞!")
                    
                    welcome_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start"
                    
                    await call.bot.send_message(
                        driver.tg_user_id,
                        welcome_text,
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∑ ReplyKeyboardMarkup
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–æ–¥—ñ–π —Ç–∞–∫–æ–∂ –∞–¥–º—ñ–Ω
                    is_driver_admin = driver.tg_user_id in config.bot.admin_ids
                    
                    from app.handlers.keyboards import main_menu_keyboard
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!</b>\n\n"
                        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                        reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_driver_admin),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{driver_id} –°–•–í–ê–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} approved driver {driver_id}")
            
            elif action == "reject":
                await update_driver_status(config.database_path, driver_id, "rejected")
                await call.answer("‚ùå –í–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=True)
                
                # Notify driver
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üòî <b>–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                        "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–¥—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚ùå <b>–ó–∞—è–≤–∫—É #{driver_id} –í–Ü–î–•–ò–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} rejected driver {driver_id}")
        
        except Exception as e:
            logger.error(f"Error in driver moderation: {e}")
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ", show_alert=True)

    @router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", lambda m: m.from_user and is_admin(m.from_user.id))
    async def show_settings(message: Message, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–¢–Ü–õ–¨–ö–ò –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
        if not message.from_user:
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –ë–î
        pricing = await get_pricing_settings(config.database_path)
        
        # –Ø–∫—â–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ù–ï —ñ—Å–Ω—É—é—Ç—å - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ wizard
        if pricing is None:
            await state.set_state(SettingsStates.wizard_economy)
            await message.answer(
                "üéâ <b>–ü–ï–†–®–ï –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø</b>\n\n"
                "–í—ñ—Ç–∞—é! –ó–∞—Ä–∞–∑ –≤–∏ –Ω–∞–ª–∞—à—Ç—É—î—Ç–µ –≤—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è.\n"
                "–¶–µ –∑–∞–π–º–µ ~2 —Ö–≤–∏–ª–∏–Ω–∏.\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üöó <b>–ö–†–û–ö 1/14: –ö–ª–∞—Å –ï–ö–û–ù–û–ú</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∫–ª–∞—Å—É –ï–∫–æ–Ω–æ–º:\n\n"
                "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>1.0</code> (–±–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ)\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ 100 –≥—Ä–Ω, —Ç–æ:\n"
                "‚Ä¢ 1.0 ‚Üí 100 –≥—Ä–Ω\n"
                "‚Ä¢ 1.2 ‚Üí 120 –≥—Ä–Ω\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0:",
                reply_markup=ReplyKeyboardRemove()
            )
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó
        admin_card = await get_admin_payment_card()
        
        text = (
            "‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¶–Ü–ù–û–£–¢–í–û–†–ï–ù–ù–Ø</b>\n\n"
            
            "üöó <b>–ö–õ–ê–°–ò –ê–í–¢–û (–º–Ω–æ–∂–Ω–∏–∫–∏):</b>\n"
            f"‚Ä¢ –ï–∫–æ–Ω–æ–º: x{pricing.economy_multiplier:.2f}\n"
            f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: x{pricing.standard_multiplier:.2f}\n"
            f"‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç: x{pricing.comfort_multiplier:.2f}\n"
            f"‚Ä¢ –ë—ñ–∑–Ω–µ—Å: x{pricing.business_multiplier:.2f}\n\n"
            
            "‚è∞ <b>–ß–ê–°–û–í–Ü –ù–ê–¶–Ü–ù–ö–ò:</b>\n"
            f"‚Ä¢ üåô –ù—ñ—á–Ω–∏–π (23:00-06:00): +{pricing.night_percent:.0f}%\n"
            f"‚Ä¢ üî• –ü—ñ–∫–æ–≤–∏–π —á–∞—Å (7-9, 17-19): +{pricing.peak_hours_percent:.0f}%\n"
            f"‚Ä¢ üéâ –í–∏—Ö—ñ–¥–Ω—ñ (–ü—Ç-–ù–¥ 18-23): +{pricing.weekend_percent:.0f}%\n"
            f"‚Ä¢ üìÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ (7-10): +{pricing.monday_morning_percent:.0f}%\n\n"
            
            "üåßÔ∏è <b>–ü–û–ì–û–î–ê:</b>\n"
            f"‚Ä¢ –ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: +{pricing.weather_percent:.0f}%\n\n"
            
            "üìä <b>–ü–û–ü–ò–¢:</b>\n"
            f"‚Ä¢ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤: +{pricing.no_drivers_percent:.0f}%\n"
            f"‚Ä¢ –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π (&gt;3:1): +{pricing.demand_very_high_percent:.0f}%\n"
            f"‚Ä¢ –í–∏—Å–æ–∫–∏–π (&gt;2:1): +{pricing.demand_high_percent:.0f}%\n"
            f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π (&gt;1.5:1): +{pricing.demand_medium_percent:.0f}%\n"
            f"‚Ä¢ –ù–∏–∑—å–∫–∏–π (&lt;0.3:1): -{pricing.demand_low_discount_percent:.0f}%\n\n"
            
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üí≥ <b>–ü–õ–ê–¢–Ü–ñ–ù–Ü –†–ï–ö–í–Ü–ó–ò–¢–ò:</b>\n"
            f"‚Ä¢ –ö–∞—Ä—Ç–∫–∞: <code>{admin_card}</code>\n\n"
            
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöó –ö–ª–∞—Å–∏ –∞–≤—Ç–æ", callback_data="settings:car_classes")],
                [InlineKeyboardButton(text="‚è∞ –ß–∞—Å–æ–≤—ñ –Ω–∞—Ü—ñ–Ω–∫–∏", callback_data="settings:time_surges")],
                [InlineKeyboardButton(text="üåßÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="settings:weather")],
                [InlineKeyboardButton(text="üìä –ü–æ–ø–∏—Ç", callback_data="settings:demand")],
                [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∫–∞", callback_data="settings:admin_card")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings:back")]
            ]
        )
        
        await message.answer(text, reply_markup=kb)
    
    @router.callback_query(F.data == "settings:night")
    async def settings_night_tariff(call: CallbackQuery, state: FSMContext) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        await state.set_state(SettingsStates.night_tariff)
        
        tariff = await get_latest_tariff(config.database_path)
        current = tariff.night_tariff_percent if tariff and hasattr(tariff, 'night_tariff_percent') else 50.0
        
        await call.message.edit_text(
            f"üåô <b>–ù–Ü–ß–ù–ò–ô –¢–ê–†–ò–§</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞: <b>+{current:.0f}%</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–¥–±–∞–≤–∫—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>50</code> ‚Üí +50% (1.5x)\n"
            f"‚Ä¢ <code>30</code> ‚Üí +30% (1.3x)\n"
            f"‚Ä¢ <code>0</code> ‚Üí –≤–∏–º–∫–Ω—É—Ç–∏\n\n"
            f"‚è∞ –î—ñ—î –∑ 23:00 –¥–æ 06:00"
        )
    
    @router.callback_query(F.data == "settings:weather")
    async def settings_weather(call: CallbackQuery, state: FSMContext) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        await state.set_state(SettingsStates.weather)
        
        tariff = await get_latest_tariff(config.database_path)
        current = tariff.weather_percent if tariff and hasattr(tariff, 'weather_percent') else 0.0
        
        await call.message.edit_text(
            f"üåßÔ∏è <b>–ü–û–ì–û–î–ù–Ü –£–ú–û–í–ò</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞: <b>+{current:.0f}%</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>20</code> ‚Üí +20% (–ø–æ–≥–∞–Ω–∞ –ø–æ–≥–æ–¥–∞)\n"
            f"‚Ä¢ <code>30</code> ‚Üí +30% (–¥—É–∂–µ –ø–æ–≥–∞–Ω–∞ –ø–æ–≥–æ–¥–∞)\n"
            f"‚Ä¢ <code>0</code> ‚Üí –≤–∏–º–∫–Ω—É—Ç–∏\n\n"
            f"üí° –£–≤—ñ–º–∫–Ω—ñ—Ç—å –≤—Ä—É—á–Ω—É –ø—Ä–∏ –¥–æ—â—ñ, —Å–Ω—ñ–≥—É, —Ç–æ—â–æ.\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–º–∫–Ω—É—Ç–∏ –∫–æ–ª–∏ –ø–æ–≥–æ–¥–∞ –ø–æ–∫—Ä–∞—â–∞—î!"
        )
    
    @router.callback_query(F.data == "settings:admin_card")
    async def settings_admin_card(call: CallbackQuery, state: FSMContext) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        await state.set_state(SettingsStates.admin_card)
        
        current_card = await get_admin_payment_card()
        
        await call.message.edit_text(
            f"üí≥ <b>–ö–ê–†–¢–ö–ê –î–õ–Ø –°–ü–õ–ê–¢–ò –ö–û–ú–Ü–°–Ü–á</b>\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä:\n"
            f"<code>{current_card}</code>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:\n\n"
            f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ <code>4149499012345678</code>\n"
            f"‚Ä¢ <code>5168 7422 1234 5678</code>\n\n"
            f"üí° <b>–¶–µ–π –Ω–æ–º–µ—Ä –±—É–¥—É—Ç—å –±–∞—á–∏—Ç–∏ –≤–æ–¥—ñ—ó</b>\n"
            f"–ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∫–æ–º—ñ—Å—ñ—ó!"
        )
    
    @router.callback_query(F.data == "settings:back")
    async def settings_back(call: CallbackQuery) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞"""
        if not call.from_user or not is_admin(call.from_user.id):
            return
        
        await call.answer()
        await call.message.delete()
        await call.message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é", reply_markup=admin_menu_keyboard())
    
    @router.message(SettingsStates.night_tariff)
    async def save_night_tariff(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        try:
            night_percent = float(message.text.strip())
            if night_percent < 0 or night_percent > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        pricing.night_percent = night_percent
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤
            notification = (
                f"üåô <b>–û–ù–û–í–õ–ï–ù–û –ù–Ü–ß–ù–ò–ô –¢–ê–†–ò–§</b>\n\n"
                f"–ù–∞–¥–±–∞–≤–∫–∞: <b>+{night_percent:.0f}%</b>\n"
                f"–ß–∞—Å –¥—ñ—ó: 23:00 - 06:00\n\n"
                f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–±—ñ–ª—å—à–µ–Ω–∞!"
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —É—Å—ñ –≥—Ä—É–ø–∏
            sent_count = 0
            for city, group_id in config.city_groups.items():
                if group_id:
                    try:
                        await message.bot.send_message(group_id, notification)
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {city}: {e}")
            
            await message.answer(
                f"‚úÖ –ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>+{night_percent:.0f}%</b>\n\n"
                f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {sent_count} –≥—Ä—É–ø –≤–æ–¥—ñ—ó–≤",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", reply_markup=admin_menu_keyboard())
    
    @router.message(SettingsStates.weather)
    async def save_weather(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        try:
            weather_percent = float(message.text.strip())
            if weather_percent < 0 or weather_percent > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        pricing.weather_percent = weather_percent
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤
            if weather_percent > 0:
                notification = (
                    f"üåßÔ∏è <b>–£–í–Ü–ú–ö–ù–ï–ù–û –ù–ê–î–ë–ê–í–ö–£ –ó–ê –ü–û–ì–û–î–£</b>\n\n"
                    f"–ù–∞–¥–±–∞–≤–∫–∞: <b>+{weather_percent:.0f}%</b>\n\n"
                    f"‚ö†Ô∏è –ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ –ø–æ–≥—ñ—Ä—à–∏–ª–∏—Å—å!\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–±—ñ–ª—å—à–µ–Ω–∞"
                )
            else:
                notification = (
                    f"‚òÄÔ∏è <b>–í–ò–ú–ö–ù–ï–ù–û –ù–ê–î–ë–ê–í–ö–£ –ó–ê –ü–û–ì–û–î–£</b>\n\n"
                    f"‚úÖ –ü–æ–≥–æ–¥–∞ –ø–æ–∫—Ä–∞—â–∞–ª–∞\n"
                    f"üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó"
                )
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —É—Å—ñ –≥—Ä—É–ø–∏
            sent_count = 0
            for city, group_id in config.city_groups.items():
                if group_id:
                    try:
                        await message.bot.send_message(group_id, notification)
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø—É {city}: {e}")
            
            if weather_percent > 0:
                status_text = f"‚úÖ –ü–æ–≥–æ–¥–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞: <b>+{weather_percent:.0f}%</b>"
            else:
                status_text = "‚úÖ –ü–æ–≥–æ–¥–Ω–∞ –Ω–∞–¥–±–∞–≤–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–∞"
            
            await message.answer(
                f"{status_text}\n\n"
                f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ {sent_count} –≥—Ä—É–ø –≤–æ–¥—ñ—ó–≤",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", reply_markup=admin_menu_keyboard())
    
    @router.message(SettingsStates.admin_card)
    async def save_admin_card(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        card_number = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏ (–¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏)
        import re
        clean_card = re.sub(r'[^\d]', '', card_number)
        
        if len(clean_card) < 13 or len(clean_card) > 19:
            await message.answer(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–∫–∏!\n\n"
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 13 –¥–æ 19 —Ü–∏—Ñ—Ä.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏
        await set_admin_payment_card(card_number)
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–∏–π –Ω–æ–º–µ—Ä:\n"
            f"<code>{card_number}</code>\n\n"
            f"üí° –í–æ–¥—ñ—ó –ø–æ–±–∞—á–∞—Ç—å —Ü–µ–π –Ω–æ–º–µ—Ä –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ –∫–æ–º—ñ—Å—ñ—ó.",
            reply_markup=admin_menu_keyboard()
        )
        
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω #{message.from_user.id} –æ–Ω–æ–≤–∏–≤ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∫–æ–º—ñ—Å—ñ—ó")
    
    @router.message(F.text == "üë§ –ö–ª—ñ—î–Ω—Ç–∏")
    async def show_clients_list(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        clients = await get_all_users(config.database_path, role="client")
        
        if not clients:
            await message.answer(
                "üë§ <b>–ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î</b>\n\n"
                "–ü–æ–∫–∏ —â–æ –∂–æ–¥–µ–Ω –∫–ª—ñ—î–Ω—Ç –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è.",
                reply_markup=admin_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º (–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ/–∞–∫—Ç–∏–≤–Ω—ñ)
        active_clients = [c for c in clients if not c.is_blocked]
        blocked_clients = [c for c in clients if c.is_blocked]
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        if active_clients:
            text = f"üë§ <b>–ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ ({len(active_clients)})</b>\n\n"
            
            for client in active_clients[:20]:  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 20
                # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
                city_emoji = f"üèô {client.city}" if client.city else "üåç –ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
                karma_emoji = get_karma_emoji(client.karma)
                
                text += (
                    f"üë§ <b>{client.full_name}</b>\n"
                    f"üì± {client.phone}\n"
                    f"{city_emoji}\n"
                    f"{karma_emoji} –ö–∞—Ä–º–∞: {client.karma}/100\n"
                    f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: {client.total_orders} (—Å–∫–∞—Å–æ–≤–∞–Ω–æ: {client.cancelled_orders})\n"
                    f"üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {client.created_at.strftime('%d.%m.%Y')}\n"
                )
                
                # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ",
                                callback_data=f"admin:client_info:{client.user_id}"
                            ),
                            InlineKeyboardButton(
                                text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏",
                                callback_data=f"admin:client_block:{client.user_id}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏",
                                callback_data=f"admin:client_add_rides:{client.user_id}"
                            )
                        ]
                    ]
                )
                
                await message.answer(text, reply_markup=kb, parse_mode="HTML")
                text = ""  # –û—á–∏—Å—Ç–∏—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            
            if len(active_clients) > 20:
                await message.answer(
                    f"... —ñ —â–µ {len(active_clients) - 20} –∫–ª—ñ—î–Ω—Ç—ñ–≤",
                    parse_mode="HTML"
                )
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        if blocked_clients:
            text = f"\nüö´ <b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ ({len(blocked_clients)})</b>\n\n"
            
            for client in blocked_clients[:10]:
                text += (
                    f"üë§ <b>{client.full_name}</b>\n"
                    f"üì± {client.phone}\n"
                    f"üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô\n"
                )
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
                                callback_data=f"admin:client_unblock:{client.user_id}"
                            )
                        ]
                    ]
                )
                
                await message.answer(text, reply_markup=kb, parse_mode="HTML")
                text = ""
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_orders = sum(c.total_orders for c in clients)
        avg_karma = sum(c.karma for c in clients) / len(clients) if clients else 0
        
        stats_text = (
            f"\nüìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: {len(clients)}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {len(active_clients)}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö: {len(blocked_clients)}\n"
            f"üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
            f"‚≠ê –°–µ—Ä–µ–¥–Ω—è –∫–∞—Ä–º–∞: {avg_karma:.1f}/100"
        )
        
        await message.answer(stats_text, reply_markup=admin_menu_keyboard(), parse_mode="HTML")
    
    @router.callback_query(F.data.startswith("admin:client_info:"))
    async def show_client_info(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        user_id = int(call.data.split(":")[2])
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ë–î
        client = await get_user_by_id(config.database_path, user_id)
        
        if not client:
            await call.answer("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            # –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            async with db.execute(
                """SELECT COUNT(*), SUM(fare_amount) 
                   FROM orders 
                   WHERE user_id = ? AND status = 'completed'""",
                (user_id,)
            ) as cur:
                row = await cur.fetchone()
                completed_orders = row[0] if row else 0
                total_spent = row[1] if row and row[1] else 0
        
        karma_visual = format_karma(client.karma)
        status_emoji = "üö´" if client.is_blocked else "‚úÖ"
        
        text = (
            f"üë§ <b>–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–õ–Ü–Ñ–ù–¢–ê</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>–ü–Ü–ë:</b> {client.full_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{client.phone}</code>\n"
            f"<b>Telegram ID:</b> <code>{client.user_id}</code>\n"
            f"<b>–ú—ñ—Å—Ç–æ:</b> {client.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>–ú–æ–≤–∞:</b> {client.language}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n\n"
            f"{karma_visual}\n"
            f"üì¶ <b>–í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å:</b> {client.total_orders}\n"
            f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {completed_orders}\n"
            f"‚ùå <b>–°–∫–∞—Å–æ–≤–∞–Ω–æ:</b> {client.cancelled_orders}\n"
            f"üí∞ <b>–í–∏—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent:.0f} –≥—Ä–Ω\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'üö´ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô' if client.is_blocked else '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π'}\n"
            f"üìÖ <b>–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:</b> {client.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not client.is_blocked else "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
                        callback_data=f"admin:client_{'block' if not client.is_blocked else 'unblock'}:{user_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏",
                        callback_data=f"admin:client_add_rides:{user_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"admin:clients_back:{user_id}"
                    )
                ]
            ]
        )
        
        try:
            await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except:
            await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        await call.answer()
    
    @router.callback_query(F.data.startswith("admin:client_block:"))
    async def block_client(call: CallbackQuery) -> None:
        """–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        user_id = int(call.data.split(":")[2])
        
        await block_user(config.database_path, user_id)
        
        await call.answer("üö´ –ö–ª—ñ—î–Ω—Ç–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!", show_alert=True)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        client = await get_user_by_id(config.database_path, user_id)
        if not client:
            await call.message.edit_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        orders = await get_user_order_history(config.database_path, user_id, limit=1000)
        
        text = (
            f"üë§ <b>–ö–ª—ñ—î–Ω—Ç</b>\n\n"
            f"üÜî ID: <code>{client.user_id}</code>\n"
            f"üë§ –Ü–º'—è: {client.full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{client.phone}</code>\n"
            f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {client.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {client.created_at.strftime('%d.%m.%Y %H:%M') if client.created_at else 'N/A'}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üöï –ó–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}\n"
            f"‚≠ê –ö–∞—Ä–º–∞: {client.karma}/100\n"
            f"üö´ –°—Ç–∞—Ç—É—Å: <b>{'üî¥ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô' if client.is_blocked else 'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π'}</b>"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
                        callback_data=f"admin:client_unblock:{user_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"admin:clients_back:{user_id}"
                    )
                ]
            ]
        )
        
        try:
            await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except:
            pass
    
    @router.callback_query(F.data.startswith("admin:clients_back:"))
    async def clients_back_button(call: CallbackQuery) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∫–æ—Ä–æ—Ç–∫–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        await call.answer()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ user_id –∑ callback_data
        user_id = int(call.data.split(":")[2])
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        client = await get_user_by_id(config.database_path, user_id)
        
        if not client:
            await call.message.edit_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", parse_mode="HTML")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (—è–∫ –≤ —Å–ø–∏—Å–∫—É)
        city_emoji = f"üèô {client.city}" if client.city else "üåç –ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        karma_emoji = get_karma_emoji(client.karma)
        status_emoji = "üî¥ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô" if client.is_blocked else "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π"
        
        text = (
            f"üë§ <b>{client.full_name}</b>\n"
            f"üì± <code>{client.phone}</code>\n"
            f"{city_emoji} | {karma_emoji} –ö–∞—Ä–º–∞: {client.karma}/100\n"
            f"üöï –ó–∞–º–æ–≤–ª–µ–Ω—å: {client.total_orders}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji}"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ",
                        callback_data=f"admin:client_info:{user_id}"
                    ),
                    InlineKeyboardButton(
                        text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏" if not client.is_blocked else "‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
                        callback_data=f"admin:client_{'block' if not client.is_blocked else 'unblock'}:{user_id}"
                    )
                ]
            ]
        )
        
        try:
            await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except:
            pass
    
    @router.callback_query(F.data.startswith("admin:client_unblock:"))
    async def unblock_client(call: CallbackQuery) -> None:
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        user_id = int(call.data.split(":")[2])
        
        await unblock_user(config.database_path, user_id)
        
        await call.answer("‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!", show_alert=True)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        client = await get_user_by_id(config.database_path, user_id)
        if not client:
            await call.message.edit_text("‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        orders = await get_user_order_history(config.database_path, user_id, limit=1000)
        
        text = (
            f"üë§ <b>–ö–ª—ñ—î–Ω—Ç</b>\n\n"
            f"üÜî ID: <code>{client.user_id}</code>\n"
            f"üë§ –Ü–º'—è: {client.full_name}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{client.phone}</code>\n"
            f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {client.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {client.created_at.strftime('%d.%m.%Y %H:%M') if client.created_at else 'N/A'}\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üöï –ó–∞–º–æ–≤–ª–µ–Ω—å: {len(orders)}\n"
            f"‚≠ê –ö–∞—Ä–º–∞: {client.karma}/100\n"
            f"üö´ –°—Ç–∞—Ç—É—Å: <b>{'üî¥ –ó–ê–ë–õ–û–ö–û–í–ê–ù–ò–ô' if client.is_blocked else 'üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π'}</b>"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏",
                        callback_data=f"admin:client_block:{user_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data=f"admin:clients_back:{user_id}"
                    )
                ]
            ]
        )
        
        try:
            await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        except:
            pass

    @router.callback_query(F.data.startswith("admin:client_add_rides:"))
    async def start_add_rides(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–æ–∫ –∫–ª—ñ—î–Ω—Ç—É"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        user_id = int(call.data.split(":")[2])
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ user_id –≤ state
        await state.update_data(manage_client_id=user_id)
        await state.set_state(ClientManageStates.add_rides_count)
        
        await call.answer()
        await call.message.answer(
            "‚ûï <b>–î–æ–¥–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏ –∫–ª—ñ—î–Ω—Ç—É</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (1-100):\n\n"
            "üí° –¶–µ –∑–±—ñ–ª—å—à–∏—Ç—å total_orders –∫–ª—ñ—î–Ω—Ç–∞\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>5</code>",
            parse_mode="HTML"
        )
    
    @router.message(ClientManageStates.add_rides_count)
    async def process_add_rides(message: Message, state: FSMContext) -> None:
        """–û–±—Ä–æ–±–∏—Ç–∏ –≤–≤–µ–¥–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        if not message.text:
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        try:
            count = int(message.text.strip())
            if count < 1 or count > 100:
                await message.answer(
                    "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100",
                    parse_mode="HTML"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (1-100)",
                parse_mode="HTML"
            )
            return
        
        data = await state.get_data()
        user_id = data.get("manage_client_id")
        
        if not user_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            await state.clear()
            return
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏
        from app.storage.db import add_rides_to_client
        success = await add_rides_to_client(config.database_path, user_id, count)
        
        if success:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            client = await get_user_by_id(config.database_path, user_id)
            
            await message.answer(
                f"‚úÖ <b>–ü–æ—ó–∑–¥–∫–∏ –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {client.full_name if client else 'N/A'}\n"
                f"‚ûï –î–æ–¥–∞–Ω–æ –ø–æ—ó–∑–¥–æ–∫: <b>{count}</b>\n"
                f"üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: <b>{client.total_orders if client else 'N/A'}</b>",
                reply_markup=admin_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—ó–∑–¥–æ–∫",
                reply_markup=admin_menu_keyboard(),
                parse_mode="HTML"
            )
        
        await state.clear()
    
    @router.message(F.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
    async def start_broadcast(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        await state.set_state(BroadcastStates.message)
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
            reply_markup=cancel_keyboard()
        )

    @router.message(BroadcastStates.message)
    async def send_broadcast(message: Message, state: FSMContext) -> None:
        broadcast_text = message.text.strip()
        if not broadcast_text:
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        
        from app.storage.db_connection import db_manager
        
        try:
            async with db_manager.connect(config.database_path) as db:
                async with db.execute("SELECT DISTINCT user_id FROM users") as cur:
                    user_ids = [row[0] for row in await cur.fetchall()]
                async with db.execute("SELECT DISTINCT tg_user_id FROM drivers WHERE status = 'approved'") as cur:
                    driver_ids = [row[0] for row in await cur.fetchall()]
            
            all_ids = set(user_ids + driver_ids)
            success = 0
            failed = 0
            
            status_msg = await message.answer(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... 0/{len(all_ids)}")
            
            for idx, user_id in enumerate(all_ids, 1):
                try:
                    await message.bot.send_message(user_id, f"üì¢ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:</b>\n\n{broadcast_text}")
                    success += 1
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {user_id}: {e}")
                    failed += 1
                
                if idx % 10 == 0:
                    await status_msg.edit_text(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... {idx}/{len(all_ids)}")
            
            await state.clear()
            await status_msg.edit_text(
                f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–£—Å–ø—ñ—à–Ω–æ: {success}\n"
                f"–ü–æ–º–∏–ª–∫–∏: {failed}"
            )
            await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())
            
            logger.info(f"Admin {message.from_user.id} sent broadcast to {success} users")
        
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ", reply_markup=admin_menu_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏
    @router.callback_query(F.data.startswith("admin_driver:"))
    async def handle_driver_management(call: CallbackQuery) -> None:
        """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        parts = call.data.split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        action = parts[1]
        driver_id = int(parts[2])
        
        try:
            driver = await get_driver_by_id(config.database_path, driver_id)
            if not driver:
                await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            if action == "block":
                # –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—è (–∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ rejected)
                await update_driver_status(config.database_path, driver_id, "rejected")
                await call.answer("üö´ –í–æ–¥—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                
                # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üö´ <b>–í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ</b>\n\n"
                        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver about block: {e}")
                
                # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await call.message.edit_text(
                    f"üö´ <b>–í–æ–¥—ñ–π –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: rejected",
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} blocked driver {driver_id}")
            
            elif action == "unblock":
                # –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—è (–∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ approved)
                await update_driver_status(config.database_path, driver_id, "approved")
                await call.answer("‚úÖ –í–æ–¥—ñ—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                
                # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è –∑ inline –∫–Ω–æ–ø–∫–æ—é
                try:
                    from app.handlers.keyboards import main_menu_keyboard
                    
                    kb_driver = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è", callback_data="open_driver_panel")]
                        ]
                    )
                    
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "‚úÖ <b>–í–∞—à –∞–∫–∞—É–Ω—Ç —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!</b>\n\n"
                        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–Ω–æ–≤–∏–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏.\n\n"
                        "üéâ –í–∏ –∑–Ω–æ–≤—É –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è:",
                        reply_markup=kb_driver,
                        parse_mode="HTML"
                    )
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è
                    is_driver_admin = driver.tg_user_id in config.bot.admin_ids
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É:",
                        reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_driver_admin),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver about unblock: {e}")
                
                # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                kb_admin = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data=f"admin_driver:block:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={driver.tg_user_id}")
                        ],
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_driver:stats:{driver_id}")]
                    ]
                )
                
                await call.message.edit_text(
                    f"‚úÖ <b>–í–æ–¥—ñ–π —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π!</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üèô –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <b>approved</b>\n"
                    f"–í–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.",
                    reply_markup=kb_admin,
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} unblocked driver {driver_id}")
            
            elif action == "priority_toggle":
                # –ü–µ—Ä–µ–º–∏–∫–∞—á –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—ñ –≤–æ–¥—ñ—è (0/1)
                from app.storage.db_connection import db_manager
                new_priority = 0 if (driver.priority or 0) > 0 else 1
                async with db_manager.connect(config.database_path) as db:
                    await db.execute("UPDATE drivers SET priority = ? WHERE id = ?", (new_priority, driver_id))
                    await db.commit()

                await call.answer(
                    "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_priority else "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤–∏–º–∫–Ω–µ–Ω–æ",
                    show_alert=True,
                )

                # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º —Å—Ç–∞–Ω–æ–º –∫–Ω–æ–ø–∫–∏
                toggle_text = "‚≠ê –í–∏–º–∫–Ω—É—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç" if new_priority else "‚≠ê –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç"
                kb_updated = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"admin_driver:block:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={driver.tg_user_id}")
                        ],
                        [InlineKeyboardButton(text=toggle_text, callback_data=f"admin_driver:priority_toggle:{driver_id}")],
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_driver:stats:{driver_id}")],
                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:delete:{driver_id}")]
                    ]
                )

                text_updated = (
                    f"üë§ <b>{driver.full_name}</b> {'‚≠ê' if new_priority else ''} {'üü¢ –û–Ω–ª–∞–π–Ω' if driver.online else 'üî¥ –û—Ñ–ª–∞–π–Ω'}\n"
                    f"üì± {driver.phone}\n"
                    f"üèôÔ∏è {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n"
                    f"üéØ –ö–ª–∞—Å: {driver.car_class}\n"
                    f"‚≠ê –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if new_priority else '–í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                    f"üÜî ID: {driver.id}"
                )

                try:
                    await call.message.edit_text(text_updated, reply_markup=kb_updated, parse_mode="HTML")
                except Exception:
                    # –Ø–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (—Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è), –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–µ
                    await call.message.answer(text_updated, reply_markup=kb_updated, parse_mode="HTML")

                logger.info(f"Admin {call.from_user.id} toggled priority for driver {driver_id} to {new_priority}")

            elif action == "stats":
                # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ñ—è
                from app.storage.db_connection import db_manager
                
                async with db_manager.connect(config.database_path) as db:
                    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
                    async with db.execute(
                        "SELECT COUNT(*) FROM orders WHERE driver_id = ? AND status = 'completed'",
                        (driver_id,)
                    ) as cur:
                        completed_orders = (await cur.fetchone())[0]
                    
                    # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫
                    async with db.execute(
                        "SELECT SUM(fare_amount), SUM(commission) FROM orders WHERE driver_id = ? AND status = 'completed'",
                        (driver_id,)
                    ) as cur:
                        row = await cur.fetchone()
                        total_earnings = row[0] if row[0] else 0.0
                        total_commission = row[1] if row[1] else 0.0
                    
                    net_earnings = total_earnings - total_commission
                
                stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ñ—è</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {completed_orders}\n"
                    f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {total_earnings:.2f} –≥—Ä–Ω\n"
                    f"üí∏ –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á–µ–Ω–∞: {total_commission:.2f} –≥—Ä–Ω\n"
                    f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n\n"
                    f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üéØ –ö–ª–∞—Å –∞–≤—Ç–æ: {driver.car_class}\n"
                    f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {driver.created_at.strftime('%Y-%m-%d')}"
                )
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="close_stats")]
                    ]
                )
                
                await call.message.edit_text(stats_text, reply_markup=kb, parse_mode="HTML")
            
            elif action == "delete":
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:confirm_delete:{driver_id}"),
                            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="close_stats")
                        ]
                    ]
                )
                
                await call.message.edit_text(
                    f"‚ö†Ô∏è <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n"
                    f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è?\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"‚ùóÔ∏è –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            
            elif action == "confirm_delete":
                # –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è –∑ –ë–î
                from app.storage.db_connection import db_manager
                
                async with db_manager.connect(config.database_path) as db:
                    await db.execute("DELETE FROM drivers WHERE id = ?", (driver_id,))
                    await db.commit()
                
                await call.answer("üóëÔ∏è –í–æ–¥—ñ—è –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
                await call.message.edit_text(
                    f"üóëÔ∏è <b>–í–æ–¥—ñ–π –≤–∏–¥–∞–ª–µ–Ω–∏–π</b>\n\n"
                    f"–í–æ–¥—ñ—è {driver.full_name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏.",
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} deleted driver {driver_id}")
        
        except Exception as e:
            logger.error(f"Error in driver management: {e}")
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ", show_alert=True)
    
    @router.callback_query(F.data == "close_stats")
    async def close_stats(call: CallbackQuery) -> None:
        """–ó–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await call.message.delete()
    
    @router.callback_query(F.data == "settings:refresh")
    async def refresh_settings(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        from app.storage.db import get_online_drivers_count
        online_count = await get_online_drivers_count(config.database_path)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ–¥—ñ—ó–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            async with db.execute("SELECT status, COUNT(*) FROM drivers GROUP BY status") as cur:
                status_counts = dict(await cur.fetchall())
            
            async with db.execute("SELECT COUNT(*) FROM users") as cur:
                users_count = (await cur.fetchone())[0]
            
            async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                orders_count = (await cur.fetchone())[0]
        
        approved_count = status_counts.get("approved", 0)
        pending_count = status_counts.get("pending", 0)
        rejected_count = status_counts.get("rejected", 0)
        
        text = (
            "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
            f"   üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: {orders_count}\n\n"
            f"üöó <b>–í–æ–¥—ñ—ó:</b>\n"
            f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ: {approved_count}\n"
            f"   ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n"
            f"   ‚ùå –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {rejected_count}\n"
            f"   üü¢ –û–Ω–ª–∞–π–Ω: {online_count}\n\n"
            f"üåê <b>–ú—ñ—Å—Ç–∞:</b> {', '.join(AVAILABLE_CITIES)}\n"
            f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞:</b> {config.payment_card or '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üë• <b>–ì—Ä—É–ø–∞:</b> {'–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if config.driver_group_chat_id else '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üó∫Ô∏è <b>Google Maps:</b> {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' if config.google_maps_api_key else '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚ùå'}\n\n"
            f"üí° –î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ENV –∑–º—ñ–Ω–Ω—ñ –Ω–∞ Render"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="settings:refresh")]
            ]
        )
        
        await call.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ")
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    
    # ==================== WIZARD –ü–ï–†–®–û–ì–û –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ====================
    
    @router.message(SettingsStates.wizard_economy)
    async def wizard_step_economy(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 1: –ï–∫–æ–Ω–æ–º"""
        try:
            value = float(message.text.strip())
            if value < 0.5 or value > 5.0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0")
            return
        
        await state.update_data(economy_multiplier=value)
        await state.set_state(SettingsStates.wizard_standard)
        await message.answer(
            f"‚úÖ –ï–∫–æ–Ω–æ–º: x{value:.2f}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üöô <b>–ö–†–û–ö 2/14: –ö–ª–∞—Å –°–¢–ê–ù–î–ê–†–¢</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∫–ª–∞—Å—É –°—Ç–∞–Ω–¥–∞—Ä—Ç:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>1.3</code> (+30%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0:"
        )
    
    @router.message(SettingsStates.wizard_standard)
    async def wizard_step_standard(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 2: –°—Ç–∞–Ω–¥–∞—Ä—Ç"""
        try:
            value = float(message.text.strip())
            if value < 0.5 or value > 5.0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0")
            return
        
        await state.update_data(standard_multiplier=value)
        await state.set_state(SettingsStates.wizard_comfort)
        await message.answer(
            f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç: x{value:.2f}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üöò <b>–ö–†–û–ö 3/14: –ö–ª–∞—Å –ö–û–ú–§–û–†–¢</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∫–ª–∞—Å—É –ö–æ–º—Ñ–æ—Ä—Ç:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>1.6</code> (+60%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0:"
        )
    
    @router.message(SettingsStates.wizard_comfort)
    async def wizard_step_comfort(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 3: –ö–æ–º—Ñ–æ—Ä—Ç"""
        try:
            value = float(message.text.strip())
            if value < 0.5 or value > 5.0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0")
            return
        
        await state.update_data(comfort_multiplier=value)
        await state.set_state(SettingsStates.wizard_business)
        await message.answer(
            f"‚úÖ –ö–æ–º—Ñ–æ—Ä—Ç: x{value:.2f}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üèÜ <b>–ö–†–û–ö 4/14: –ö–ª–∞—Å –ë–Ü–ó–ù–ï–°</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –∫–ª–∞—Å—É –ë—ñ–∑–Ω–µ—Å:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>2.0</code> (+100%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0:"
        )
    
    @router.message(SettingsStates.wizard_business)
    async def wizard_step_business(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 4: –ë—ñ–∑–Ω–µ—Å"""
        try:
            value = float(message.text.strip())
            if value < 0.5 or value > 5.0:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0.5 –¥–æ 5.0")
            return
        
        await state.update_data(business_multiplier=value)
        await state.set_state(SettingsStates.wizard_night)
        await message.answer(
            f"‚úÖ –ë—ñ–∑–Ω–µ—Å: x{value:.2f}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üåô <b>–ö–†–û–ö 5/14: –ù–Ü–ß–ù–ò–ô –¢–ê–†–ò–§</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –¥–ª—è –Ω—ñ—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ—É (23:00-06:00):\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>50</code> (+50%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_night)
    async def wizard_step_night(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 5: –ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(night_percent=value)
        await state.set_state(SettingsStates.wizard_peak)
        await message.answer(
            f"‚úÖ –ù—ñ—á–Ω–∏–π: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üî• <b>–ö–†–û–ö 6/14: –ü–Ü–ö–û–í–ò–ô –ß–ê–°</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –¥–ª—è –ø—ñ–∫–æ–≤–æ–≥–æ —á–∞—Å—É (7-9, 17-19):\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>30</code> (+30%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_peak)
    async def wizard_step_peak(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 6: –ü—ñ–∫–æ–≤–∏–π —á–∞—Å"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(peak_hours_percent=value)
        await state.set_state(SettingsStates.wizard_weekend)
        await message.answer(
            f"‚úÖ –ü—ñ–∫–æ–≤–∏–π: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üéâ <b>–ö–†–û–ö 7/14: –í–ò–•–Ü–î–ù–Ü –î–ù–Ü</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö (–ü—Ç-–ù–¥ 18-23):\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>20</code> (+20%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_weekend)
    async def wizard_step_weekend(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 7: –í–∏—Ö—ñ–¥–Ω—ñ"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(weekend_percent=value)
        await state.set_state(SettingsStates.wizard_monday)
        await message.answer(
            f"‚úÖ –í–∏—Ö—ñ–¥–Ω—ñ: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üìÖ <b>–ö–†–û–ö 8/14: –ü–û–ù–ï–î–Ü–õ–û–ö –í–†–ê–ù–¶–Ü</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –¥–ª—è –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –≤—Ä–∞–Ω—Ü—ñ (7-10):\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>15</code> (+15%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_monday)
    async def wizard_step_monday(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 8: –ü–æ–Ω–µ–¥—ñ–ª–æ–∫"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(monday_morning_percent=value)
        await state.set_state(SettingsStates.wizard_weather)
        await message.answer(
            f"‚úÖ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üåßÔ∏è <b>–ö–†–û–ö 9/14: –ü–û–ì–û–î–ù–Ü –£–ú–û–í–ò</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –Ω–∞–¥–±–∞–≤–∫—É –∑–∞ –ø–æ–≥–æ–¥—É:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>0</code> (–≤–∏–º–∫–Ω–µ–Ω–æ, —É–≤—ñ–º–∫–Ω–µ—Ç–µ –∫–æ–ª–∏ –±—É–¥–µ –¥–æ—â)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_weather)
    async def wizard_step_weather(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 9: –ü–æ–≥–æ–¥–∞"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(weather_percent=value)
        await state.set_state(SettingsStates.wizard_no_drivers)
        await message.answer(
            f"‚úÖ –ü–æ–≥–æ–¥–∞: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üö´ <b>–ö–†–û–ö 10/14: –ù–ï–ú–ê–Ñ –í–û–î–Ü–á–í</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –∫–æ–ª–∏ –∑–æ–≤—Å—ñ–º –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>50</code> (+50%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_no_drivers)
    async def wizard_step_no_drivers(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 10: –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(no_drivers_percent=value)
        await state.set_state(SettingsStates.wizard_demand_very_high)
        await message.answer(
            f"‚úÖ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üî•üî•üî• <b>–ö–†–û–ö 11/14: –î–£–ñ–ï –í–ò–°–û–ö–ò–ô –ü–û–ü–ò–¢</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –∫–æ–ª–∏ &gt;3 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–æ–¥—ñ—è:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>40</code> (+40%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_demand_very_high)
    async def wizard_step_demand_very_high(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 11: –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(demand_very_high_percent=value)
        await state.set_state(SettingsStates.wizard_demand_high)
        await message.answer(
            f"‚úÖ –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üî•üî• <b>–ö–†–û–ö 12/14: –í–ò–°–û–ö–ò–ô –ü–û–ü–ò–¢</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –∫–æ–ª–∏ &gt;2 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–æ–¥—ñ—è:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>25</code> (+25%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_demand_high)
    async def wizard_step_demand_high(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 12: –í–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(demand_high_percent=value)
        await state.set_state(SettingsStates.wizard_demand_medium)
        await message.answer(
            f"‚úÖ –í–∏—Å–æ–∫–∏–π: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üî• <b>–ö–†–û–ö 13/14: –°–ï–†–ï–î–ù–Ü–ô –ü–û–ü–ò–¢</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–¥–±–∞–≤–∫—É –∫–æ–ª–∏ &gt;1.5 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–æ–¥—ñ—è:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>15</code> (+15%)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 200:"
        )
    
    @router.message(SettingsStates.wizard_demand_medium)
    async def wizard_step_demand_medium(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 13: –°–µ—Ä–µ–¥–Ω—ñ–π –ø–æ–ø–∏—Ç"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 200:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200")
            return
        
        await state.update_data(demand_medium_percent=value)
        await state.set_state(SettingsStates.wizard_demand_low)
        await message.answer(
            f"‚úÖ –°–µ—Ä–µ–¥–Ω—ñ–π: +{value:.0f}%\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "üíö <b>–ö–†–û–ö 14/14: –ù–ò–ó–¨–ö–ò–ô –ü–û–ü–ò–¢ (–ó–ù–ò–ñ–ö–ê)</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –ó–ù–ò–ñ–ö–£ –∫–æ–ª–∏ &lt;0.3 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–æ–¥—ñ—è:\n\n"
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> <code>10</code> (-10% –∑–Ω–∏–∂–∫–∞)\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 50:"
        )
    
    @router.message(SettingsStates.wizard_demand_low)
    async def wizard_step_demand_low(message: Message, state: FSMContext) -> None:
        """Wizard –∫—Ä–æ–∫ 14: –ù–∏–∑—å–∫–∏–π –ø–æ–ø–∏—Ç - –û–°–¢–ê–ù–ù–Ü–ô –ö–†–û–ö"""
        try:
            value = float(message.text.strip())
            if value < 0 or value > 50:
                raise ValueError()
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 50")
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
        data = await state.get_data()
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        from datetime import datetime, timezone
        pricing = PricingSettings(
            economy_multiplier=data['economy_multiplier'],
            standard_multiplier=data['standard_multiplier'],
            comfort_multiplier=data['comfort_multiplier'],
            business_multiplier=data['business_multiplier'],
            night_percent=data['night_percent'],
            peak_hours_percent=data['peak_hours_percent'],
            weekend_percent=data['weekend_percent'],
            monday_morning_percent=data['monday_morning_percent'],
            weather_percent=data['weather_percent'],
            no_drivers_percent=data['no_drivers_percent'],
            demand_very_high_percent=data['demand_very_high_percent'],
            demand_high_percent=data['demand_high_percent'],
            demand_medium_percent=data['demand_medium_percent'],
            demand_low_discount_percent=value,
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc)
        )
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –ë–î
        success = await upsert_pricing_settings(config.database_path, pricing)
        
        if success:
            await state.clear()
            await message.answer(
                "üéâ <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!</b>\n\n"
                "‚úÖ –í—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üìä <b>–í–ê–®–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:</b>\n\n"
                "üöó <b>–ö–ª–∞—Å–∏ –∞–≤—Ç–æ:</b>\n"
                f"‚Ä¢ –ï–∫–æ–Ω–æ–º: x{pricing.economy_multiplier:.2f}\n"
                f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç: x{pricing.standard_multiplier:.2f}\n"
                f"‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç: x{pricing.comfort_multiplier:.2f}\n"
                f"‚Ä¢ –ë—ñ–∑–Ω–µ—Å: x{pricing.business_multiplier:.2f}\n\n"
                "‚è∞ <b>–ß–∞—Å–æ–≤—ñ –Ω–∞—Ü—ñ–Ω–∫–∏:</b>\n"
                f"‚Ä¢ –ù—ñ—á–Ω–∏–π: +{pricing.night_percent:.0f}%\n"
                f"‚Ä¢ –ü—ñ–∫–æ–≤–∏–π: +{pricing.peak_hours_percent:.0f}%\n"
                f"‚Ä¢ –í–∏—Ö—ñ–¥–Ω—ñ: +{pricing.weekend_percent:.0f}%\n"
                f"‚Ä¢ –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: +{pricing.monday_morning_percent:.0f}%\n\n"
                "üåßÔ∏è <b>–ü–æ–≥–æ–¥–∞:</b> +" + f"{pricing.weather_percent:.0f}%\n\n"
                "üìä <b>–ü–æ–ø–∏—Ç:</b>\n"
                f"‚Ä¢ –ù–µ–º–∞—î –≤–æ–¥—ñ—ó–≤: +{pricing.no_drivers_percent:.0f}%\n"
                f"‚Ä¢ –î—É–∂–µ –≤–∏—Å–æ–∫–∏–π (&gt;3:1): +{pricing.demand_very_high_percent:.0f}%\n"
                f"‚Ä¢ –í–∏—Å–æ–∫–∏–π (&gt;2:1): +{pricing.demand_high_percent:.0f}%\n"
                f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π (&gt;1.5:1): +{pricing.demand_medium_percent:.0f}%\n"
                f"‚Ä¢ –ù–∏–∑—å–∫–∏–π (&lt;0.3:1): -{pricing.demand_low_discount_percent:.0f}%\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ü—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
                "—á–µ—Ä–µ–∑ –º–µ–Ω—é ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                reply_markup=admin_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–µ–Ω—é ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                reply_markup=admin_menu_keyboard()
            )
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
    create_pricing_handlers(
        router, config, is_admin, SettingsStates, 
        get_pricing_settings, upsert_pricing_settings, PricingSettings
    )
    
    return router
