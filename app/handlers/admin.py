from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import List

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

logger = logging.getLogger(__name__)

from app.config.config import AppConfig
from app.storage.db import (
    Tariff,
    get_latest_tariff,
    insert_tariff,
    fetch_recent_orders,
    fetch_pending_drivers,
    update_driver_status,
    get_driver_by_id,
    User,
    upsert_user,
)


CANCEL_TEXT = "–°–∫–∞—Å—É–≤–∞—Ç–∏"


def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")],
            [KeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ–∏"), KeyboardButton(text="üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
            [KeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å",
    )


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


class TariffStates(StatesGroup):
    base_fare = State()
    per_km = State()
    per_minute = State()
    minimum = State()


class BroadcastStates(StatesGroup):
    message = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="admin")
    
    def is_admin(user_id: int) -> bool:
        return user_id in set(config.bot.admin_ids)

    @router.message(Command("admin"))
    @router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return
        await message.answer(
            "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
            reply_markup=admin_menu_keyboard()
        )

    @router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_statistics(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        import aiosqlite
        
        async with aiosqlite.connect(config.database_path) as db:
            # Total orders
            async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                total_orders = (await cur.fetchone())[0]
            
            # Completed orders
            async with db.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'") as cur:
                completed_orders = (await cur.fetchone())[0]
            
            # Active drivers
            async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'approved'") as cur:
                active_drivers = (await cur.fetchone())[0]
            
            # Pending driver applications
            async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'pending'") as cur:
                pending_drivers = (await cur.fetchone())[0]
            
            # Total revenue
            async with db.execute("SELECT SUM(fare_amount) FROM orders WHERE status = 'completed'") as cur:
                row = await cur.fetchone()
                total_revenue = row[0] if row[0] else 0.0
            
            # Total commission
            async with db.execute("SELECT SUM(commission) FROM orders WHERE status = 'completed'") as cur:
                row = await cur.fetchone()
                total_commission = row[0] if row[0] else 0.0
            
            # Unpaid commissions
            async with db.execute("SELECT SUM(commission) FROM payments WHERE commission_paid = 0") as cur:
                row = await cur.fetchone()
                unpaid_commission = row[0] if row[0] else 0.0
        
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
            f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {completed_orders}\n"
            f"üöó –ê–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤: {active_drivers}\n"
            f"‚è≥ –í–æ–¥—ñ—ó–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_drivers}\n\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_revenue:.2f} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {total_commission:.2f} –≥—Ä–Ω\n"
            f"‚ö†Ô∏è –ù–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {unpaid_commission:.2f} –≥—Ä–Ω"
        )
        await message.answer(text, reply_markup=admin_menu_keyboard())

    @router.message(F.text == "üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")
    async def moderate_drivers(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        drivers = await fetch_pending_drivers(config.database_path, limit=20)
        if not drivers:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", reply_markup=admin_menu_keyboard())
            return
        
        for d in drivers:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"drv:approve:{d.id}"),
                        InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"drv:reject:{d.id}"),
                    ]
                ]
            )
            text = (
                f"<b>–ó–∞—è–≤–∫–∞ #{d.id}</b>\n\n"
                f"üë§ –ü–Ü–ë: {d.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {d.phone}\n"
                f"üöó –ê–≤—Ç–æ: {d.car_make} {d.car_model}\n"
                f"üî¢ –ù–æ–º–µ—Ä: {d.car_plate}\n"
                f"üìÖ –ü–æ–¥–∞–Ω–æ: {d.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
            await message.answer(text, reply_markup=kb)
            if d.license_photo_file_id:
                try:
                    await message.answer_photo(
                        d.license_photo_file_id,
                        caption=f"üìÑ –ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–∑–∞—è–≤–∫–∞ #{d.id})"
                    )
                except Exception:
                    pass

    @router.message(F.text == "üí∞ –¢–∞—Ä–∏—Ñ–∏")
    async def show_tariffs(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        tariff = await get_latest_tariff(config.database_path)
        if tariff:
            text = (
                "üí∞ <b>–ü–æ—Ç–æ—á–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏</b>\n\n"
                f"–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: {tariff.base_fare:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ –∫–º: {tariff.per_km:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É: {tariff.per_minute:.2f} –≥—Ä–Ω\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: {tariff.minimum:.2f} –≥—Ä–Ω\n\n"
                f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tariff.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
        else:
            text = "‚ö†Ô∏è –¢–∞—Ä–∏—Ñ–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏", callback_data="tariff:edit")]]
        )
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "tariff:edit")
    async def start_tariff_edit(call: CallbackQuery, state: FSMContext) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        await call.answer()
        await state.set_state(TariffStates.base_fare)
        await call.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É (–≥—Ä–Ω):", 
            reply_markup=cancel_keyboard()
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel_admin_action(message: Message, state: FSMContext) -> None:
        await state.clear()
        await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=admin_menu_keyboard())

    @router.message(TariffStates.base_fare)
    async def set_base_fare(message: Message, state: FSMContext) -> None:
        try:
            base_fare = float(message.text.strip())
            if base_fare < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50.00)")
            return
        
        await state.update_data(base_fare=base_fare)
        await state.set_state(TariffStates.per_km)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_km)
    async def set_per_km(message: Message, state: FSMContext) -> None:
        try:
            per_km = float(message.text.strip())
            if per_km < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 8.00)")
            return
        
        await state.update_data(per_km=per_km)
        await state.set_state(TariffStates.per_minute)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ —Ö–≤–∏–ª–∏–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_minute)
    async def set_per_minute(message: Message, state: FSMContext) -> None:
        try:
            per_minute = float(message.text.strip())
            if per_minute < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2.00)")
            return
        
        await state.update_data(per_minute=per_minute)
        await state.set_state(TariffStates.minimum)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.minimum)
    async def set_minimum(message: Message, state: FSMContext) -> None:
        try:
            minimum = float(message.text.strip())
            if minimum < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 60.00)")
            return
        
        data = await state.get_data()
        tariff = Tariff(
            id=None,
            base_fare=data["base_fare"],
            per_km=data["per_km"],
            per_minute=data["per_minute"],
            minimum=minimum,
            created_at=datetime.now(timezone.utc)
        )
        await insert_tariff(config.database_path, tariff)
        await state.clear()
        await message.answer(
            "‚úÖ –¢–∞—Ä–∏—Ñ–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", 
            reply_markup=admin_menu_keyboard()
        )

    @router.message(F.text == "üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    async def show_recent_orders(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        orders = await fetch_recent_orders(config.database_path, limit=10)
        if not orders:
            await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.", reply_markup=admin_menu_keyboard())
            return
        
        text = "<b>üìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
        for o in orders:
            status_emoji = {
                "pending": "‚è≥",
                "offered": "üì§",
                "accepted": "‚úÖ",
                "in_progress": "üöó",
                "completed": "‚úîÔ∏è",
                "cancelled": "‚ùå"
            }.get(o.status, "‚ùì")
            
            text += (
                f"{status_emoji} <b>‚Ññ{o.id}</b> ({o.status})\n"
                f"–ö–ª—ñ—î–Ω—Ç: {o.name} ({o.phone})\n"
                f"–ú–∞—Ä—à—Ä—É—Ç: {o.pickup_address[:30]}... ‚Üí {o.destination_address[:30]}...\n"
                f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {o.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            )
            if o.fare_amount:
                text += f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {o.fare_amount:.2f} –≥—Ä–Ω\n"
            text += "\n"
        
        await message.answer(text, reply_markup=admin_menu_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤ (approve/reject)
    @router.callback_query(F.data.startswith("drv:"))
    async def handle_driver_moderation(call: CallbackQuery) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        parts = (call.data or "").split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        action = parts[1]
        driver_id = int(parts[2])
        
        try:
            driver = await get_driver_by_id(config.database_path, driver_id)
            if not driver:
                await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            if action == "approve":
                await update_driver_status(config.database_path, driver_id, "approved")
                await call.answer("‚úÖ –í–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", show_alert=True)
                
                # Notify driver
                try:
                    from app.handlers.start import main_menu_keyboard
                    
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è", callback_data="open_driver_panel")]
                        ]
                    )
                    
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                        "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ —Ç–µ–ø–µ—Ä –≤–æ–¥—ñ–π –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                        "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start",
                        reply_markup=kb
                    )
                    
                    # –¢–∞–∫–æ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –º–µ–Ω—é –≤–æ–¥—ñ—è
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!</b>\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:",
                        reply_markup=main_menu_keyboard(is_registered=True, is_driver=True)
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{driver_id} –°–•–í–ê–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} approved driver {driver_id}")
            
            elif action == "reject":
                await update_driver_status(config.database_path, driver_id, "rejected")
                await call.answer("‚ùå –í–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=True)
                
                # Notify driver
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üòî <b>–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                        "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–¥—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚ùå <b>–ó–∞—è–≤–∫—É #{driver_id} –í–Ü–î–•–ò–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} rejected driver {driver_id}")
        
        except Exception as e:
            logger.error(f"Error in driver moderation: {e}")
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ", show_alert=True)

    @router.message(F.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
    async def start_broadcast(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        await state.set_state(BroadcastStates.message)
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
            reply_markup=cancel_keyboard()
        )

    @router.message(BroadcastStates.message)
    async def send_broadcast(message: Message, state: FSMContext) -> None:
        broadcast_text = message.text.strip()
        if not broadcast_text:
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        
        import aiosqlite
        
        try:
            async with aiosqlite.connect(config.database_path) as db:
                async with db.execute("SELECT DISTINCT user_id FROM users") as cur:
                    user_ids = [row[0] for row in await cur.fetchall()]
                async with db.execute("SELECT DISTINCT tg_user_id FROM drivers WHERE status = 'approved'") as cur:
                    driver_ids = [row[0] for row in await cur.fetchall()]
            
            all_ids = set(user_ids + driver_ids)
            success = 0
            failed = 0
            
            status_msg = await message.answer(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... 0/{len(all_ids)}")
            
            for idx, user_id in enumerate(all_ids, 1):
                try:
                    await message.bot.send_message(user_id, f"üì¢ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:</b>\n\n{broadcast_text}")
                    success += 1
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {user_id}: {e}")
                    failed += 1
                
                if idx % 10 == 0:
                    await status_msg.edit_text(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... {idx}/{len(all_ids)}")
            
            await state.clear()
            await status_msg.edit_text(
                f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–£—Å–ø—ñ—à–Ω–æ: {success}\n"
                f"–ü–æ–º–∏–ª–∫–∏: {failed}"
            )
            await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())
            
            logger.info(f"Admin {message.from_user.id} sent broadcast to {success} users")
        
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ", reply_markup=admin_menu_keyboard())

    return router
