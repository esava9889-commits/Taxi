from __future__ import annotations

import logging
from datetime import datetime, timezone
from typing import List

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

logger = logging.getLogger(__name__)

from app.config.config import AppConfig, AVAILABLE_CITIES
from app.storage.db import (
    Tariff,
    get_latest_tariff,
    insert_tariff,
    fetch_recent_orders,
    fetch_pending_drivers,
    update_driver_status,
    get_driver_by_id,
    User,
    upsert_user,
)


CANCEL_TEXT = "–°–∫–∞—Å—É–≤–∞—Ç–∏"


def admin_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")],
            [KeyboardButton(text="üí∞ –¢–∞—Ä–∏—Ñ–∏"), KeyboardButton(text="üöó –í–æ–¥—ñ—ó")],
            [KeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞"), KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å",
    )


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


class TariffStates(StatesGroup):
    base_fare = State()
    per_km = State()
    per_minute = State()
    minimum = State()
    commission = State()


class BroadcastStates(StatesGroup):
    message = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="admin")
    
    def is_admin(user_id: int) -> bool:
        return user_id in set(config.bot.admin_ids)

    @router.message(Command("admin"))
    @router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
            return
        await message.answer(
            "üîê <b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
            reply_markup=admin_menu_keyboard()
        )

    @router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def show_statistics(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        from app.storage.db_connection import db_manager
        
        try:
            async with db_manager.connect(config.database_path) as db:
                # Total orders
                async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                    total_orders = (await cur.fetchone())[0]
            
            # Completed orders
            async with db.execute("SELECT COUNT(*) FROM orders WHERE status = 'completed'") as cur:
                completed_orders = (await cur.fetchone())[0]
            
            # Active drivers
            async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'approved'") as cur:
                active_drivers = (await cur.fetchone())[0]
            
            # Pending driver applications
            async with db.execute("SELECT COUNT(*) FROM drivers WHERE status = 'pending'") as cur:
                pending_drivers = (await cur.fetchone())[0]
            
            # Total revenue
            async with db.execute("SELECT SUM(fare_amount) FROM orders WHERE status = 'completed'") as cur:
                row = await cur.fetchone()
                total_revenue = row[0] if row[0] else 0.0
            
                # Total commission
                async with db.execute("SELECT SUM(commission) FROM orders WHERE status = 'completed'") as cur:
                    row = await cur.fetchone()
                    total_commission = row[0] if row[0] else 0.0
                
                # Unpaid commissions
                async with db.execute("SELECT SUM(commission) FROM payments WHERE commission_paid = 0") as cur:
                    row = await cur.fetchone()
                    unpaid_commission = row[0] if row[0] else 0.0
                
                # Total users
                async with db.execute("SELECT COUNT(*) FROM users") as cur:
                    total_users = (await cur.fetchone())[0]
            
            text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
            f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: {completed_orders}\n"
            f"üöó –ê–∫—Ç–∏–≤–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤: {active_drivers}\n"
            f"‚è≥ –í–æ–¥—ñ—ó–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_drivers}\n\n"
            f"üíµ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_revenue:.2f} –≥—Ä–Ω\n"
            f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {total_commission:.2f} –≥—Ä–Ω\n"
            f"‚ö†Ô∏è –ù–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {unpaid_commission:.2f} –≥—Ä–Ω\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}"
            )
            
            await message.answer(text, reply_markup=admin_menu_keyboard())
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await message.answer(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ DATABASE_URL –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ Render.",
                reply_markup=admin_menu_keyboard()
            )

    @router.message(F.text == "üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤")
    async def moderate_drivers(message: Message) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        drivers = await fetch_pending_drivers(config.database_path, limit=20)
        if not drivers:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.", reply_markup=admin_menu_keyboard())
            return
        
        for d in drivers:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"drv:approve:{d.id}"),
                        InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"drv:reject:{d.id}"),
                    ]
                ]
            )
            text = (
                f"<b>–ó–∞—è–≤–∫–∞ #{d.id}</b>\n\n"
                f"üë§ –ü–Ü–ë: {d.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {d.phone}\n"
                f"üöó –ê–≤—Ç–æ: {d.car_make} {d.car_model}\n"
                f"üî¢ –ù–æ–º–µ—Ä: {d.car_plate}\n"
                f"üìÖ –ü–æ–¥–∞–Ω–æ: {d.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
            await message.answer(text, reply_markup=kb)
            if d.license_photo_file_id:
                try:
                    await message.answer_photo(
                        d.license_photo_file_id,
                        caption=f"üìÑ –ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–∑–∞—è–≤–∫–∞ #{d.id})"
                    )
                except Exception:
                    pass

    @router.message(F.text == "üí∞ –¢–∞—Ä–∏—Ñ–∏")
    async def show_tariffs(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        tariff = await get_latest_tariff(config.database_path)
        if tariff:
            text = (
                "üí∞ <b>–ü–æ—Ç–æ—á–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏</b>\n\n"
                f"–ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: {tariff.base_fare:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ –∫–º: {tariff.per_km:.2f} –≥—Ä–Ω\n"
                f"–¶—ñ–Ω–∞ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É: {tariff.per_minute:.2f} –≥—Ä–Ω\n"
                f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: {tariff.minimum:.2f} –≥—Ä–Ω\n"
                f"–ö–æ–º—ñ—Å—ñ—è —Å–µ—Ä–≤—ñ—Å—É: {tariff.commission_percent*100:.1f}%\n\n"
                f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tariff.created_at.strftime('%Y-%m-%d %H:%M')}"
            )
        else:
            text = "‚ö†Ô∏è –¢–∞—Ä–∏—Ñ–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ–∏", callback_data="tariff:edit")]]
        )
        await message.answer(text, reply_markup=kb)

    @router.callback_query(F.data == "tariff:edit")
    async def start_tariff_edit(call: CallbackQuery, state: FSMContext) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        await call.answer()
        await state.set_state(TariffStates.base_fare)
        await call.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å –±–∞–∑–æ–≤—É —Ü—ñ–Ω—É (–≥—Ä–Ω):", 
            reply_markup=cancel_keyboard()
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel_admin_action(message: Message, state: FSMContext) -> None:
        await state.clear()
        await message.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=admin_menu_keyboard())

    @router.message(TariffStates.base_fare)
    async def set_base_fare(message: Message, state: FSMContext) -> None:
        try:
            base_fare = float(message.text.strip())
            if base_fare < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 50.00)")
            return
        
        await state.update_data(base_fare=base_fare)
        await state.set_state(TariffStates.per_km)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ –∫—ñ–ª–æ–º–µ—Ç—Ä (–≥—Ä–Ω), –ø–æ—Ç—ñ–º –∑–¥–∞—Å—Ç–µ –∫–æ–º—ñ—Å—ñ—é (%):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_km)
    async def set_per_km(message: Message, state: FSMContext) -> None:
        try:
            per_km = float(message.text.strip())
            if per_km < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 8.00)")
            return
        
        await state.update_data(per_km=per_km)
        await state.set_state(TariffStates.per_minute)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∑–∞ —Ö–≤–∏–ª–∏–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.per_minute)
    async def set_per_minute(message: Message, state: FSMContext) -> None:
        try:
            per_minute = float(message.text.strip())
            if per_minute < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2.00)")
            return
        
        await state.update_data(per_minute=per_minute)
        await state.set_state(TariffStates.minimum)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–≥—Ä–Ω):", reply_markup=cancel_keyboard())

    @router.message(TariffStates.minimum)
    async def set_minimum(message: Message, state: FSMContext) -> None:
        try:
            minimum = float(message.text.strip())
            if minimum < 0:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 60.00)")
            return
        
        # –ó–∞–ø–∏—Ç –∫–æ–º—ñ—Å—ñ—ó –ø—ñ—Å–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        await state.update_data(minimum=minimum)
        await state.set_state(TariffStates.commission)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é —Å–µ—Ä–≤—ñ—Å—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2 –∞–±–æ 2.5):", reply_markup=cancel_keyboard())

    # –í–∏–¥–∞–ª–∏–ª–∏ callback-–µ—Ç–∞–ø, –≤–≤–æ–¥–∏–º–æ –∫–æ–º—ñ—Å—ñ—é –Ω–∞–ø—Ä—è–º—É —É —Å—Ç–∞–Ω—ñ TariffStates.commission

    @router.message(TariffStates.commission)
    async def set_commission_percent(message: Message, state: FSMContext) -> None:
        # –ü–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è –≤–≤–æ–¥—É –∫–æ–º—ñ—Å—ñ—ó –ø—ñ—Å–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        try:
            commission_percent = float(message.text.strip())
            if commission_percent < 0 or commission_percent > 50:
                raise ValueError()
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ (0-50), –Ω–∞–ø—Ä. 2.0")
            return
        data = await state.get_data()
        tariff = Tariff(
            id=None,
            base_fare=data["base_fare"],
            per_km=data["per_km"],
            per_minute=data["per_minute"],
            minimum=data["minimum"],
            commission_percent=commission_percent / 100.0,
            created_at=datetime.now(timezone.utc)
        )
        await insert_tariff(config.database_path, tariff)
        await state.clear()
        await message.answer("‚úÖ –¢–∞—Ä–∏—Ñ–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_menu_keyboard())

    @router.message(F.text == "üöó –í–æ–¥—ñ—ó")
    async def show_drivers_list(message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≤–æ–¥—ñ—ó–≤"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        from app.storage.db_connection import db_manager
        
        async with db_manager.connect(config.database_path) as db:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –≤–æ–¥—ñ—ó–≤
            async with db.execute(
                """
                SELECT id, tg_user_id, full_name, phone, car_make, car_model, car_plate, 
                       car_class, status, city, online, created_at
                FROM drivers
                ORDER BY 
                    CASE status
                        WHEN 'approved' THEN 1
                        WHEN 'pending' THEN 2
                        WHEN 'rejected' THEN 3
                        ELSE 4
                    END,
                    created_at DESC
                """
            ) as cur:
                drivers = await cur.fetchall()
        
        if not drivers:
            await message.answer(
                "üë• <b>–í–æ–¥—ñ—ó–≤ –Ω–µ–º–∞—î</b>\n\n"
                "–ü–æ–∫–∏ —â–æ –∂–æ–¥–µ–Ω –≤–æ–¥—ñ–π –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è.",
                reply_markup=admin_menu_keyboard(),
                parse_mode="HTML"
            )
            return
        
        # –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        approved_drivers = [d for d in drivers if d[8] == "approved"]
        pending_drivers = [d for d in drivers if d[8] == "pending"]
        rejected_drivers = [d for d in drivers if d[8] == "rejected"]
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–∂–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –æ–∫—Ä–µ–º–æ
        if approved_drivers:
            await message.answer(
                f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ñ –≤–æ–¥—ñ—ó ({len(approved_drivers)})</b>\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤–æ–¥—ñ—è –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
                parse_mode="HTML"
            )
            for d in approved_drivers:
                driver_id, tg_user_id, full_name, phone, car_make, car_model, car_plate, \
                    car_class, status, city, online, created_at = d
                
                online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if online else "üî¥ –û—Ñ–ª–∞–π–Ω"
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"admin_driver:block:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={tg_user_id}")
                        ],
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_driver:stats:{driver_id}")],
                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:delete:{driver_id}")]
                    ]
                )
                
                text = (
                    f"üë§ <b>{full_name}</b> {online_status}\n"
                    f"üì± {phone}\n"
                    f"üèôÔ∏è {city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {car_make} {car_model} ({car_plate})\n"
                    f"üéØ –ö–ª–∞—Å: {car_class}\n"
                    f"üÜî ID: {driver_id}"
                )
                
                await message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        if pending_drivers:
            await message.answer(
                f"‚è≥ <b>–ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ({len(pending_drivers)})</b>\n\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 'üë• –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—ó–≤' –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è",
                parse_mode="HTML"
            )
        
        if rejected_drivers:
            await message.answer(
                f"‚ùå <b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ ({len(rejected_drivers)})</b>",
                parse_mode="HTML"
            )
            for d in rejected_drivers:
                driver_id, tg_user_id, full_name, phone, car_make, car_model, car_plate, \
                    car_class, status, city, online, created_at = d
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data=f"admin_driver:unblock:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={tg_user_id}")
                        ],
                        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:delete:{driver_id}")]
                    ]
                )
                
                text = (
                    f"üë§ <b>{full_name}</b> üö´\n"
                    f"üì± {phone}\n"
                    f"üèôÔ∏è {city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üöó {car_make} {car_model} ({car_plate})\n"
                    f"üÜî ID: {driver_id}"
                )
                
                await message.answer(text, reply_markup=kb, parse_mode="HTML")
        
        await message.answer("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤ (approve/reject)
    @router.callback_query(F.data.startswith("drv:"))
    async def handle_driver_moderation(call: CallbackQuery) -> None:
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        parts = (call.data or "").split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        action = parts[1]
        driver_id = int(parts[2])
        
        try:
            driver = await get_driver_by_id(config.database_path, driver_id)
            if not driver:
                await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            if action == "approve":
                await update_driver_status(config.database_path, driver_id, "approved")
                await call.answer("‚úÖ –í–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", show_alert=True)
                
                # –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –Ω–µ –±–æ—Ç
                bot_info = await call.bot.get_me()
                if driver.tg_user_id == bot_info.id:
                    logger.warning(f"‚ö†Ô∏è Skipping notification for bot driver {driver_id}")
                    if call.message:
                        await call.message.edit_text(
                            f"‚ö†Ô∏è <b>–£–í–ê–ì–ê: –ó–∞—è–≤–∫—É #{driver_id} —Å—Ö–≤–∞–ª–µ–Ω–æ, –∞–ª–µ —Ü–µ –ë–û–¢!</b>\n\n"
                            f"tg_user_id = {driver.tg_user_id} (ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞)\n\n"
                            f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                            f"–í–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π –∑–∞–ø–∏—Å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n"
                            f"<code>DELETE FROM drivers WHERE id = {driver_id};</code>",
                            parse_mode="HTML"
                        )
                    return
                
                # Notify driver
                try:
                    from app.handlers.keyboards import main_menu_keyboard
                    
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è", callback_data="open_driver_panel")]
                        ]
                    )
                    
                    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –≥—Ä—É–ø—É
                    welcome_text = (
                        "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                        "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ —Ç–µ–ø–µ—Ä –≤–æ–¥—ñ–π –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                        "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                    )
                    
                    # –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤, —è–∫—â–æ –≤–æ–Ω–æ —î
                    if config.driver_group_invite_link:
                        welcome_text += (
                            f"üì± <b>–î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤:</b>\n"
                            f"{config.driver_group_invite_link}\n\n"
                            "‚ö†Ô∏è –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. "
                            "–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å!\n\n"
                        )
                    
                    welcome_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start"
                    
                    await call.bot.send_message(
                        driver.tg_user_id,
                        welcome_text,
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–∏–º–æ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∑ ReplyKeyboardMarkup
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–æ–¥—ñ–π —Ç–∞–∫–æ–∂ –∞–¥–º—ñ–Ω
                    is_driver_admin = driver.tg_user_id in config.bot.admin_ids
                    
                    from app.handlers.keyboards import main_menu_keyboard
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!</b>\n\n"
                        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                        reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_driver_admin),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚úÖ <b>–ó–∞—è–≤–∫—É #{driver_id} –°–•–í–ê–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} approved driver {driver_id}")
            
            elif action == "reject":
                await update_driver_status(config.database_path, driver_id, "rejected")
                await call.answer("‚ùå –í–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ", show_alert=True)
                
                # Notify driver
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üòî <b>–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
                        "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–¥—ñ—è –Ω–µ –±—É–ª–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver {driver.tg_user_id}: {e}")
                
                # Update message
                if call.message:
                    await call.message.edit_text(
                        f"‚ùå <b>–ó–∞—è–≤–∫—É #{driver_id} –í–Ü–î–•–ò–õ–ï–ù–û</b>\n\n"
                        f"üë§ –ü–Ü–ë: {driver.full_name}\n"
                        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"üöó –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})"
                    )
                
                logger.info(f"Admin {call.from_user.id} rejected driver {driver_id}")
        
        except Exception as e:
            logger.error(f"Error in driver moderation: {e}")
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ", show_alert=True)

    @router.message(F.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
    async def start_broadcast(message: Message, state: FSMContext) -> None:
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        await state.set_state(BroadcastStates.message)
        await message.answer(
            "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
            reply_markup=cancel_keyboard()
        )

    @router.message(BroadcastStates.message)
    async def send_broadcast(message: Message, state: FSMContext) -> None:
        broadcast_text = message.text.strip()
        if not broadcast_text:
            await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
            return
        
        from app.storage.db_connection import db_manager
        
        try:
            async with db_manager.connect(config.database_path) as db:
                async with db.execute("SELECT DISTINCT user_id FROM users") as cur:
                    user_ids = [row[0] for row in await cur.fetchall()]
                async with db.execute("SELECT DISTINCT tg_user_id FROM drivers WHERE status = 'approved'") as cur:
                    driver_ids = [row[0] for row in await cur.fetchall()]
            
            all_ids = set(user_ids + driver_ids)
            success = 0
            failed = 0
            
            status_msg = await message.answer(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... 0/{len(all_ids)}")
            
            for idx, user_id in enumerate(all_ids, 1):
                try:
                    await message.bot.send_message(user_id, f"üì¢ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:</b>\n\n{broadcast_text}")
                    success += 1
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {user_id}: {e}")
                    failed += 1
                
                if idx % 10 == 0:
                    await status_msg.edit_text(f"üì§ –†–æ–∑—Å–∏–ª–∫–∞... {idx}/{len(all_ids)}")
            
            await state.clear()
            await status_msg.edit_text(
                f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–£—Å–ø—ñ—à–Ω–æ: {success}\n"
                f"–ü–æ–º–∏–ª–∫–∏: {failed}"
            )
            await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=admin_menu_keyboard())
            
            logger.info(f"Admin {message.from_user.id} sent broadcast to {success} users")
        
        except Exception as e:
            logger.error(f"Error in broadcast: {e}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ", reply_markup=admin_menu_keyboard())

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏
    @router.callback_query(F.data.startswith("admin_driver:"))
    async def handle_driver_management(call: CallbackQuery) -> None:
        """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–æ–¥—ñ—è–º–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        parts = call.data.split(":")
        if len(parts) < 3:
            await call.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return
        
        action = parts[1]
        driver_id = int(parts[2])
        
        try:
            driver = await get_driver_by_id(config.database_path, driver_id)
            if not driver:
                await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return
            
            if action == "block":
                # –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—è (–∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ rejected)
                await update_driver_status(config.database_path, driver_id, "rejected")
                await call.answer("üö´ –í–æ–¥—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                
                # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è
                try:
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üö´ <b>–í–∞—à –∞–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ</b>\n\n"
                        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏.\n"
                        "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω.",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver about block: {e}")
                
                # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                await call.message.edit_text(
                    f"üö´ <b>–í–æ–¥—ñ–π –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: rejected",
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} blocked driver {driver_id}")
            
            elif action == "unblock":
                # –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—è (–∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ approved)
                await update_driver_status(config.database_path, driver_id, "approved")
                await call.answer("‚úÖ –í–æ–¥—ñ—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ", show_alert=True)
                
                # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è –∑ inline –∫–Ω–æ–ø–∫–æ—é
                try:
                    from app.handlers.keyboards import main_menu_keyboard
                    
                    kb_driver = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üöó –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è", callback_data="open_driver_panel")]
                        ]
                    )
                    
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "‚úÖ <b>–í–∞—à –∞–∫–∞—É–Ω—Ç —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!</b>\n\n"
                        "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–Ω–æ–≤–∏–≤ –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏.\n\n"
                        "üéâ –í–∏ –∑–Ω–æ–≤—É –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è:",
                        reply_markup=kb_driver,
                        parse_mode="HTML"
                    )
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è
                    is_driver_admin = driver.tg_user_id in config.bot.admin_ids
                    await call.bot.send_message(
                        driver.tg_user_id,
                        "üöó <b>–ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É:",
                        reply_markup=main_menu_keyboard(is_registered=True, is_driver=True, is_admin=is_driver_admin),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify driver about unblock: {e}")
                
                # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                kb_admin = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data=f"admin_driver:block:{driver_id}"),
                            InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç–∏", url=f"tg://user?id={driver.tg_user_id}")
                        ],
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_driver:stats:{driver_id}")]
                    ]
                )
                
                await call.message.edit_text(
                    f"‚úÖ <b>–í–æ–¥—ñ–π —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π!</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: <b>approved</b>\n"
                    f"–í–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.",
                    reply_markup=kb_admin,
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} unblocked driver {driver_id}")
            
            elif action == "stats":
                # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ñ—è
                from app.storage.db_connection import db_manager
                
                async with db_manager.connect(config.database_path) as db:
                    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
                    async with db.execute(
                        "SELECT COUNT(*) FROM orders WHERE driver_id = ? AND status = 'completed'",
                        (driver_id,)
                    ) as cur:
                        completed_orders = (await cur.fetchone())[0]
                    
                    # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫
                    async with db.execute(
                        "SELECT SUM(fare_amount), SUM(commission) FROM orders WHERE driver_id = ? AND status = 'completed'",
                        (driver_id,)
                    ) as cur:
                        row = await cur.fetchone()
                        total_earnings = row[0] if row[0] else 0.0
                        total_commission = row[1] if row[1] else 0.0
                    
                    net_earnings = total_earnings - total_commission
                
                stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥—ñ—è</b>\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {completed_orders}\n"
                    f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {total_earnings:.2f} –≥—Ä–Ω\n"
                    f"üí∏ –ö–æ–º—ñ—Å—ñ—è —Å–ø–ª–∞—á–µ–Ω–∞: {total_commission:.2f} –≥—Ä–Ω\n"
                    f"üíµ –ß–∏—Å—Ç–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫: {net_earnings:.2f} –≥—Ä–Ω\n\n"
                    f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üéØ –ö–ª–∞—Å –∞–≤—Ç–æ: {driver.car_class}\n"
                    f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {driver.created_at.strftime('%Y-%m-%d')}"
                )
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="close_stats")]
                    ]
                )
                
                await call.message.edit_text(stats_text, reply_markup=kb, parse_mode="HTML")
            
            elif action == "delete":
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"admin_driver:confirm_delete:{driver_id}"),
                            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="close_stats")
                        ]
                    ]
                )
                
                await call.message.edit_text(
                    f"‚ö†Ô∏è <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n"
                    f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è?\n\n"
                    f"üë§ {driver.full_name}\n"
                    f"üì± {driver.phone}\n"
                    f"üöó {driver.car_make} {driver.car_model}\n\n"
                    f"‚ùóÔ∏è –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            
            elif action == "confirm_delete":
                # –í–∏–¥–∞–ª–∏—Ç–∏ –≤–æ–¥—ñ—è –∑ –ë–î
                from app.storage.db_connection import db_manager
                
                async with db_manager.connect(config.database_path) as db:
                    await db.execute("DELETE FROM drivers WHERE id = ?", (driver_id,))
                    await db.commit()
                
                await call.answer("üóëÔ∏è –í–æ–¥—ñ—è –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=True)
                await call.message.edit_text(
                    f"üóëÔ∏è <b>–í–æ–¥—ñ–π –≤–∏–¥–∞–ª–µ–Ω–∏–π</b>\n\n"
                    f"–í–æ–¥—ñ—è {driver.full_name} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Å–∏—Å—Ç–µ–º–∏.",
                    parse_mode="HTML"
                )
                
                logger.info(f"Admin {call.from_user.id} deleted driver {driver_id}")
        
        except Exception as e:
            logger.error(f"Error in driver management: {e}")
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ", show_alert=True)
    
    @router.callback_query(F.data == "close_stats")
    async def close_stats(call: CallbackQuery) -> None:
        """–ó–∞–∫—Ä–∏—Ç–∏ –≤—ñ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await call.message.delete()
    
    @router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    async def show_settings(message: Message) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
        if not message.from_user or not is_admin(message.from_user.id):
            return
        
        from app.storage.db import get_online_drivers_count
        online_count = await get_online_drivers_count(config.database_path)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ–¥—ñ—ó–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            async with db.execute("SELECT status, COUNT(*) FROM drivers GROUP BY status") as cur:
                status_counts = dict(await cur.fetchall())
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            async with db.execute("SELECT COUNT(*) FROM users") as cur:
                users_count = (await cur.fetchone())[0]
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
            async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                orders_count = (await cur.fetchone())[0]
        
        approved_count = status_counts.get("approved", 0)
        pending_count = status_counts.get("pending", 0)
        rejected_count = status_counts.get("rejected", 0)
        
        text = (
            "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
            f"   üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: {orders_count}\n\n"
            f"üöó <b>–í–æ–¥—ñ—ó:</b>\n"
            f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ: {approved_count}\n"
            f"   ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n"
            f"   ‚ùå –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {rejected_count}\n"
            f"   üü¢ –û–Ω–ª–∞–π–Ω: {online_count}\n\n"
            f"üåê <b>–ú—ñ—Å—Ç–∞:</b> {', '.join(AVAILABLE_CITIES)}\n"
            f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞:</b> {config.payment_card or '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üë• <b>–ì—Ä—É–ø–∞:</b> {'–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if config.driver_group_chat_id else '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üó∫Ô∏è <b>Google Maps:</b> {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' if config.google_maps_api_key else '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚ùå'}\n\n"
            f"üí° –î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ENV –∑–º—ñ–Ω–Ω—ñ –Ω–∞ Render"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="settings:refresh")]
            ]
        )
        
        await message.answer(text, reply_markup=kb, parse_mode="HTML")
    
    @router.callback_query(F.data == "settings:refresh")
    async def refresh_settings(call: CallbackQuery) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        if not call.from_user or not is_admin(call.from_user.id):
            await call.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É", show_alert=True)
            return
        
        from app.storage.db import get_online_drivers_count
        online_count = await get_online_drivers_count(config.database_path)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–æ–¥—ñ—ó–≤ –∑–∞ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        from app.storage.db_connection import db_manager
        async with db_manager.connect(config.database_path) as db:
            async with db.execute("SELECT status, COUNT(*) FROM drivers GROUP BY status") as cur:
                status_counts = dict(await cur.fetchall())
            
            async with db.execute("SELECT COUNT(*) FROM users") as cur:
                users_count = (await cur.fetchone())[0]
            
            async with db.execute("SELECT COUNT(*) FROM orders") as cur:
                orders_count = (await cur.fetchone())[0]
        
        approved_count = status_counts.get("approved", 0)
        pending_count = status_counts.get("pending", 0)
        rejected_count = status_counts.get("rejected", 0)
        
        text = (
            "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"   üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {users_count}\n"
            f"   üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: {orders_count}\n\n"
            f"üöó <b>–í–æ–¥—ñ—ó:</b>\n"
            f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ: {approved_count}\n"
            f"   ‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n"
            f"   ‚ùå –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ: {rejected_count}\n"
            f"   üü¢ –û–Ω–ª–∞–π–Ω: {online_count}\n\n"
            f"üåê <b>–ú—ñ—Å—Ç–∞:</b> {', '.join(AVAILABLE_CITIES)}\n"
            f"üí≥ <b>–ö–∞—Ä—Ç–∫–∞:</b> {config.payment_card or '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üë• <b>–ì—Ä—É–ø–∞:</b> {'–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞' if config.driver_group_chat_id else '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞'}\n"
            f"üó∫Ô∏è <b>Google Maps:</b> {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' if config.google_maps_api_key else '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚ùå'}\n\n"
            f"üí° –î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ ENV –∑–º—ñ–Ω–Ω—ñ –Ω–∞ Render"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="settings:refresh")]
            ]
        )
        
        await call.answer("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ")
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    
    return router
