from __future__ import annotations

from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig, AVAILABLE_CITIES
from app.storage.db import (
    Driver,
    create_driver_application,
    fetch_pending_drivers,
    get_driver_by_tg_user_id,
    get_driver_by_id,
    update_driver_status,
)


CANCEL_TEXT = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


class DriverRegStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    car_make = State()
    car_model = State()
    car_plate = State()
    car_class = State()
    license_photo = State()
    confirm = State()


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver")

    # Public: entrypoint for driver registration
    @router.message(F.text == "üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º")
    @router.message(Command("register_driver"))
    async def start_driver_registration(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # Check if already a driver
        existing = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if existing:
            status_text = {
                "pending": "‚è≥ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ",
                "approved": "‚úÖ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
                "rejected": "‚ùå –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            }.get(existing.status, existing.status)
            
            await message.answer(
                f"–í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É!\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                f"{'–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' if existing.status == 'pending' else ''}"
            )
            return
        
        await state.set_state(DriverRegStates.name)
        await message.answer(
            "üöó <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—è</b>\n\n"
            "üìù –ö—Ä–æ–∫ 1/7: –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
            reply_markup=cancel_keyboard()
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        await state.clear()
        from app.handlers.start import main_menu_keyboard
        is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
        await message.answer(
            "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=False, is_driver=False, is_admin=is_admin)
        )

    @router.message(DriverRegStates.name)
    async def take_name(message: Message, state: FSMContext) -> None:
        full_name = message.text.strip() if message.text else ""
        if len(full_name) < 3:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ü–Ü–ë (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏).")
            return
        await state.update_data(full_name=full_name)
        await state.set_state(DriverRegStates.phone)
        await message.answer(
            "üì± <b>–ö—Ä–æ–∫ 2/7: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.phone)
    async def take_phone(message: Message, state: FSMContext) -> None:
        phone = message.text.strip() if message.text else ""
        if len(phone) < 7:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return
        await state.update_data(phone=phone)
        
        # City selection with inline buttons
        from app.handlers.start import city_selection_keyboard
        await state.set_state(DriverRegStates.city)
        await message.answer(
            "üèô <b>–ö—Ä–æ–∫ 3/7: –ú—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ –±—É–¥–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
            reply_markup=city_selection_keyboard()
        )

    @router.callback_query(F.data.startswith("city:"), DriverRegStates.city)
    async def take_city(call: CallbackQuery, state: FSMContext) -> None:
        city = call.data.split(":", 1)[1]
        await state.update_data(city=city)
        await call.answer(f"–û–±—Ä–∞–Ω–æ: {city}")
        
        await state.set_state(DriverRegStates.car_make)
        await call.message.answer(
            f"‚úÖ –ú—ñ—Å—Ç–æ: {city}\n\n"
            "üöó <b>–ö—Ä–æ–∫ 4/7: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Toyota, Volkswagen):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_make)
    async def take_car_make(message: Message, state: FSMContext) -> None:
        car_make = message.text.strip() if message.text else ""
        if len(car_make) < 2:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–∞—Ä–∫—É –∞–≤—Ç–æ.")
            return
        await state.update_data(car_make=car_make)
        await state.set_state(DriverRegStates.car_model)
        await message.answer(
            "üöô <b>–ö—Ä–æ–∫ 5/7: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Camry, Passat):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_model)
    async def take_car_model(message: Message, state: FSMContext) -> None:
        car_model = message.text.strip() if message.text else ""
        if len(car_model) < 2:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–æ–¥–µ–ª—å –∞–≤—Ç–æ.")
            return
        await state.update_data(car_model=car_model)
        await state.set_state(DriverRegStates.car_plate)
        await message.answer(
            "üî¢ <b>–ö—Ä–æ–∫ 6/7: –ù–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–ê1234–í–í):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_plate)
    async def take_car_plate(message: Message, state: FSMContext) -> None:
        car_plate = message.text.strip().upper()
        await state.update_data(car_plate=car_plate)
        await state.set_state(DriverRegStates.car_class)
        
        # –í–∏–±—ñ—Ä –∫–ª–∞—Å—É –∞–≤—Ç–æ
        from app.handlers.car_classes import CAR_CLASSES
        
        buttons = []
        for class_code, class_info in CAR_CLASSES.items():
            mult_percent = int((class_info['multiplier']-1)*100)
            mult_text = f"+{mult_percent}%" if mult_percent > 0 else "–±–∞–∑–æ–≤–∏–π"
            buttons.append([
                InlineKeyboardButton(
                    text=f"{class_info['name_uk']} ({mult_text})",
                    callback_data=f"driver_car_class:{class_code}"
                )
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            "üöó <b>–ö—Ä–æ–∫ 7/8: –ö–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ:\n"
            "‚Ä¢ üöó –ï–∫–æ–Ω–æ–º - –±–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ\n"
            "‚Ä¢ üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç - +30% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n"
            "‚Ä¢ üöò –ö–æ–º—Ñ–æ—Ä—Ç - +60% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n"
            "‚Ä¢ üèÜ –ë—ñ–∑–Ω–µ—Å - +100% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
            "–¶–µ –≤–ø–ª–∏–Ω–µ –Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫ —Ç–∞ –≤–∞—à –∑–∞—Ä–æ–±—ñ—Ç–æ–∫.",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("driver_car_class:"))
    async def save_driver_car_class(call: CallbackQuery, state: FSMContext) -> None:
        car_class = call.data.split(":", 1)[1]
        await state.update_data(car_class=car_class)
        await state.set_state(DriverRegStates.license_photo)
        
        from app.handlers.car_classes import get_car_class_name
        class_name = get_car_class_name(car_class)
        
        await call.answer()
        await call.message.answer(
            f"‚úÖ –ö–ª–∞—Å –∞–≤—Ç–æ: {class_name}\n\n"
            "üì∏ <b>–ö—Ä–æ–∫ 8/8: –§–æ—Ç–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /skip)",
            reply_markup=cancel_keyboard()
        )

    @router.message(Command("skip"), DriverRegStates.license_photo)
    async def skip_license(message: Message, state: FSMContext) -> None:
        await state.update_data(license_photo_file_id=None)
        await finalize_application(message, state)

    @router.message(DriverRegStates.license_photo, F.photo)
    async def take_license_photo(message: Message, state: FSMContext) -> None:
        file_id = message.photo[-1].file_id  # biggest size
        await state.update_data(license_photo_file_id=file_id)
        await finalize_application(message, state)

    async def finalize_application(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        
        from app.handlers.car_classes import get_car_class_name
        car_class = data.get("car_class", "economy")
        
        driver = Driver(
            id=None,
            tg_user_id=message.from_user.id if message.from_user else 0,
            full_name=str(data.get("full_name")),
            phone=str(data.get("phone")),
            car_make=str(data.get("car_make")),
            car_model=str(data.get("car_model")),
            car_plate=str(data.get("car_plate")),
            car_class=car_class,
            license_photo_file_id=(data.get("license_photo_file_id") or None),
            status="pending",
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        driver_id = await create_driver_application(config.database_path, driver)
        await state.clear()
        # Notify admin(s)
        for admin_id in set(config.bot.admin_ids):
            try:
                await message.bot.send_message(
                    admin_id,
                    (
                        "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤–æ–¥—ñ—è:\n"
                        f"ID –∑–∞—è–≤–∫–∏: {driver_id}\n"
                        f"–ü–Ü–ë: {driver.full_name}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"–ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})\n"
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                                    callback_data=f"drv:approve:{driver_id}",
                                ),
                                InlineKeyboardButton(
                                    text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                                    callback_data=f"drv:reject:{driver_id}",
                                ),
                            ]
                        ]
                    ),
                )
                if driver.license_photo_file_id:
                    await message.bot.send_photo(
                        admin_id,
                        driver.license_photo_file_id,
                        caption=f"–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–∑–∞—è–≤–∫–∞ #{driver_id})",
                    )
            except Exception:
                # Ignore delivery errors to some admins
                pass

        from app.handlers.start import main_menu_keyboard
        is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{driver_id}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
            "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å.",
            reply_markup=main_menu_keyboard(is_registered=False, is_driver=False, is_admin=is_admin)
        )

    # Admin moderation callbacks
    @router.callback_query(F.data.startswith("drv:"))
    async def on_driver_callback(call: CallbackQuery) -> None:
        data = (call.data or "").split(":")
        if len(data) != 3:
            await call.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
        _, action, sid = data
        try:
            driver_id = int(sid)
        except ValueError:
            await call.answer("–ü–æ–º–∏–ª–∫–∞ ID", show_alert=True)
            return
        # Only admins can moderate
        if not call.from_user or call.from_user.id not in set(config.bot.admin_ids):
            await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True)
            return

        if action == "approve":
            await update_driver_status(config.database_path, driver_id, "approved")
            await call.answer("–í–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
            drv = await get_driver_by_id(config.database_path, driver_id)
            if drv:
                try:
                    await call.message.bot.send_message(
                        drv.tg_user_id,
                        "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–∏ –∞–∫—Ç–∏–≤–Ω—ñ!",
                    )
                except Exception:
                    pass
        elif action == "reject":
            await update_driver_status(config.database_path, driver_id, "rejected")
            await call.answer("–ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
            drv = await get_driver_by_id(config.database_path, driver_id)
            if drv:
                try:
                    await call.message.bot.send_message(
                        drv.tg_user_id,
                        "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                    )
                except Exception:
                    pass
        else:
            await call.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –¥—ñ—è", show_alert=True)
            return

    # Helper: driver status check
    @router.message(Command("my_driver_status"))
    async def my_driver_status(message: Message) -> None:
        if not message.from_user:
            return
        drv = await get_driver_by_tg_user_id(
            config.database_path, message.from_user.id
        )
        if not drv:
            await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        await message.answer(
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {drv.status}\n–ê–≤—Ç–æ: {drv.car_make} {drv.car_model} ({drv.car_plate})"
        )

    # Admin commands
    @router.message(Command("pending_drivers"))
    async def list_pending_drivers(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        drivers = await fetch_pending_drivers(config.database_path, limit=20)
        if not drivers:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫, —â–æ –æ—á—ñ–∫—É—é—Ç—å.")
            return
        for d in drivers:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"drv:approve:{d.id}"),
                        InlineKeyboardButton(text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"drv:reject:{d.id}"),
                    ]
                ]
            )
            await message.answer(
                (
                    f"#{d.id} {d.full_name} ({d.phone})\n"
                    f"–ê–≤—Ç–æ: {d.car_make} {d.car_model} ({d.car_plate})\n"
                    f"–°—Ç–∞—Ç—É—Å: {d.status}"
                ),
                reply_markup=kb,
            )

    @router.message(Command("approve_driver"))
    async def approve_driver_cmd(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        parts = (message.text or "").split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /approve_driver <id>")
            return
        driver_id = int(parts[1])
        await update_driver_status(config.database_path, driver_id, "approved")
        await message.answer(f"–í–æ–¥—ñ—è #{driver_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        drv = await get_driver_by_id(config.database_path, driver_id)
        if drv:
            try:
                await message.bot.send_message(drv.tg_user_id, "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–∏ –∞–∫—Ç–∏–≤–Ω—ñ!")
            except Exception:
                pass

    @router.message(Command("reject_driver"))
    async def reject_driver_cmd(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        parts = (message.text or "").split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reject_driver <id>")
            return
        driver_id = int(parts[1])
        await update_driver_status(config.database_path, driver_id, "rejected")
        await message.answer(f"–ó–∞—è–≤–∫—É #{driver_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        drv = await get_driver_by_id(config.database_path, driver_id)
        if drv:
            try:
                await message.bot.send_message(drv.tg_user_id, "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")
            except Exception:
                pass

    return router
