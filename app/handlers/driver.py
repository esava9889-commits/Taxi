from __future__ import annotations

from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from app.config.config import AppConfig, AVAILABLE_CITIES
from app.storage.db import (
    Driver,
    create_driver_application,
    fetch_pending_drivers,
    get_driver_by_tg_user_id,
    get_driver_by_id,
    update_driver_status,
)


CANCEL_TEXT = "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"


def cancel_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_TEXT)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )


class DriverRegStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    car_make = State()
    car_model = State()
    car_plate = State()
    car_class = State()
    license_photo = State()
    confirm = State()


async def show_driver_application_status(message: Message, driver: Driver, config: AppConfig) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤–æ–¥—ñ—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    from datetime import datetime, timezone, timedelta
    
    if driver.status == "pending":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ (>3 –≥–æ–¥–∏–Ω–∏)
        application_time = driver.created_at
        now = datetime.now(timezone.utc)
        hours_waiting = (now - application_time).total_seconds() / 3600
        
        buttons = []
        
        if hours_waiting > 3:
            # –ë—ñ–ª—å—à–µ 3 –≥–æ–¥–∏–Ω ‚Üí –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–∫–∞—Å—É–≤–∞—Ç–∏
            text = (
                f"‚è≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ</b>\n\n"
                f"üìù –ü–Ü–ë: {driver.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                f"üìç –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n\n"
                f"‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è: {int(hours_waiting)} –≥–æ–¥\n\n"
                f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ —á–µ–∫–∞—î –≤–∂–µ –±—ñ–ª—å—à–µ 3 –≥–æ–¥–∏–Ω.</b>\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–µ–∫–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥\n"
                f"‚Ä¢ –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É —ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∫–ª—ñ—î–Ω—Ç"
            )
            buttons.append([InlineKeyboardButton(
                text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É", 
                callback_data=f"driver_cancel:{driver.id}"
            )])
        else:
            # –ú–µ–Ω—à–µ 3 –≥–æ–¥–∏–Ω ‚Üí —Ç—ñ–ª—å–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            hours_left = max(0, 3 - hours_waiting)
            text = (
                f"‚è≥ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ</b>\n\n"
                f"üìù –ü–Ü–ë: {driver.full_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                f"üìç –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model}\n\n"
                f"‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è: {int(hours_waiting * 60)} —Ö–≤\n"
                f"‚åõÔ∏è –ó–∞—á–µ–∫–∞–π—Ç–µ —â–µ ~{int(hours_left * 60)} —Ö–≤\n\n"
                f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
                f"‚ÑπÔ∏è –ó–∞–∑–≤–∏—á–∞–π —Ü–µ –∑–∞–π–º–∞—î –¥–æ 3 –≥–æ–¥–∏–Ω."
            )
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
        await message.answer(text, reply_markup=kb)
    
    elif driver.status == "rejected":
        # –í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚Üí –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–Ω–æ–≤—É
        text = (
            f"‚ùå <b>–í–∞—à—É –∑–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
            f"–ù–∞ –∂–∞–ª—å, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥—Ö–∏–ª–∏–≤ –≤–∞—à—É –∑–∞—è–≤–∫—É.\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ:\n"
            f"‚Ä¢ –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É —ñ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∫–ª—ñ—î–Ω—Ç\n"
            f"‚Ä¢ –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑'—è—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É —ñ —Å—Ç–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–æ–º", 
                    callback_data=f"driver_delete:{driver.id}"
                )]
            ]
        )
        await message.answer(text, reply_markup=kb)
    
    elif driver.status == "approved":
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚Üí –ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–æ–¥—ñ—è
        text = (
            f"‚úÖ <b>–í–∏ –≤–∂–µ –≤–æ–¥—ñ–π!</b>\n\n"
            f"üìù –ü–Ü–ë: {driver.full_name}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {driver.city or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"üöô –ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>'üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è'</b> –¥–ª—è —Ä–æ–±–æ—Ç–∏."
        )
        await message.answer(text)


def create_router(config: AppConfig) -> Router:
    router = Router(name="driver")

    # Public: entrypoint for driver registration
    @router.message(F.text == "üöó –°—Ç–∞—Ç–∏ –≤–æ–¥—ñ—î–º")
    @router.message(Command("register_driver"))
    async def start_driver_registration(message: Message, state: FSMContext) -> None:
        if not message.from_user:
            return
        
        # Check if already a driver
        existing = await get_driver_by_tg_user_id(config.database_path, message.from_user.id)
        if existing:
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –î–ï–¢–ê–õ–¨–ù–ò–ô —Å—Ç–∞—Ç—É—Å –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await show_driver_application_status(message, existing, config)
            return
        
        # –í–ê–ñ–õ–ò–í–ï –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç —Å—Ç–∞—î –≤–æ–¥—ñ—î–º
        from app.storage.db import get_user_by_id, delete_user
        import logging
        logger = logging.getLogger(__name__)
        
        user = await get_user_by_id(config.database_path, message.from_user.id)
        if user and user.role == "client":
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="driver_reg:confirm")],
                    [InlineKeyboardButton(text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="driver_reg:cancel")]
                ]
            )
            
            await message.answer(
                "‚ö†Ô∏è <b>–í–ê–ñ–õ–ò–í–û!</b>\n\n"
                "–í–∏ –∑–∞—Ä–∞–∑ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ <b>–∫–ª—ñ—î–Ω—Ç</b>.\n\n"
                "–Ø–∫—â–æ –≤–∏ —Å—Ç–∞–Ω–µ—Ç–µ <b>–≤–æ–¥—ñ—î–º</b>:\n"
                "‚Ä¢ –í–∏ –≤—Ç—Ä–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ –∫–ª—ñ—î–Ω—Ç–∞\n"
                "‚Ä¢ –ù–µ –∑–º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                "‚Ä¢ –ë—É–¥–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤–æ–¥—ñ–π\n\n"
                "‚ö†Ô∏è <b>–û–¥–Ω–∞ –ª—é–¥–∏–Ω–∞ = –æ–¥–Ω–∞ —Ä–æ–ª—å!</b>\n"
                "(–∞–±–æ –∫–ª—ñ—î–Ω—Ç, –∞–±–æ –≤–æ–¥—ñ–π)\n\n"
                "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤–æ–¥—ñ—è?",
                reply_markup=kb
            )
            return
        
        await state.set_state(DriverRegStates.name)
        await message.answer(
            "üöó <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—è</b>\n\n"
            "üìù –ö—Ä–æ–∫ 1/7: –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
            reply_markup=cancel_keyboard()
        )
    
    @router.callback_query(F.data == "driver_reg:confirm")
    async def driver_reg_confirm(call: CallbackQuery, state: FSMContext) -> None:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É –∑ –∫–ª—ñ—î–Ω—Ç–∞ –Ω–∞ –≤–æ–¥—ñ—è"""
        if not call.from_user:
            return
        
        from app.storage.db import delete_user
        import logging
        logger = logging.getLogger(__name__)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ users
        deleted = await delete_user(config.database_path, call.from_user.id)
        if deleted:
            logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ clients (—Å—Ç–∞—î –≤–æ–¥—ñ—î–º)")
        
        await call.answer("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—è")
        await call.message.delete()
        
        await state.set_state(DriverRegStates.name)
        await call.message.answer(
            "üöó <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–æ–¥—ñ—è</b>\n\n"
            "üìù –ö—Ä–æ–∫ 1/7: –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:",
            reply_markup=cancel_keyboard()
        )
    
    @router.callback_query(F.data == "driver_reg:cancel")
    async def driver_reg_cancel_callback(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–æ–¥—ñ—è"""
        if not call.from_user:
            return
        
        await call.answer("‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        await call.message.delete()
        
        from app.handlers.keyboards import main_menu_keyboard
        is_admin = call.from_user.id in config.bot.admin_ids
        
        await call.message.answer(
            "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤–æ–¥—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
            "–í–∏ –∑–∞–ª–∏—à–∞—î—Ç–µ—Å—å –∫–ª—ñ—î–Ω—Ç–æ–º.",
            reply_markup=main_menu_keyboard(is_registered=True, is_driver=False, is_admin=is_admin)
        )
    
    @router.callback_query(F.data.startswith("driver_cancel:"))
    async def cancel_pending_application(call: CallbackQuery) -> None:
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É —â–æ –æ—á—ñ–∫—É—î (>3 –≥–æ–¥)"""
        if not call.from_user:
            return
        
        driver_id = int(call.data.split(":", 1)[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∑–∞—è–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        driver = await get_driver_by_id(config.database_path, driver_id)
        if not driver or driver.tg_user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É
        import aiosqlite
        async with aiosqlite.connect(config.database_path) as db:
            await db.execute("DELETE FROM drivers WHERE id = ?", (driver_id,))
            await db.commit()
        
        await call.answer("‚úÖ –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        await call.message.delete()
        
        from app.handlers.keyboards import main_menu_keyboard
        is_admin = call.from_user.id in config.bot.admin_ids
        
        await call.message.answer(
            "‚ùå <b>–ó–∞—è–≤–∫—É –≤–æ–¥—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∫–ª—ñ—î–Ω—Ç\n"
            "‚Ä¢ –ü–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è",
            reply_markup=main_menu_keyboard(is_registered=False, is_driver=False, is_admin=is_admin)
        )
    
    @router.callback_query(F.data.startswith("driver_delete:"))
    async def delete_rejected_application(call: CallbackQuery) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω—É –∑–∞—è–≤–∫—É"""
        if not call.from_user:
            return
        
        driver_id = int(call.data.split(":", 1)[1])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ü–µ –∑–∞—è–≤–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        driver = await get_driver_by_id(config.database_path, driver_id)
        if not driver or driver.tg_user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
            return
        
        if driver.status != "rejected":
            await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞", show_alert=True)
            return
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É
        import aiosqlite
        async with aiosqlite.connect(config.database_path) as db:
            await db.execute("DELETE FROM drivers WHERE id = ?", (driver_id,))
            await db.commit()
        
        await call.answer("‚úÖ –ó–∞—è–≤–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ")
        await call.message.delete()
        
        from app.handlers.keyboards import main_menu_keyboard
        is_admin = call.from_user.id in config.bot.admin_ids
        
        await call.message.answer(
            "üóë <b>–ó–∞—è–≤–∫—É –≤–æ–¥—ñ—è –≤–∏–¥–∞–ª–µ–Ω–æ</b>\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –∫–ª—ñ—î–Ω—Ç.",
            reply_markup=main_menu_keyboard(
                is_registered=False, 
                is_driver=False, 
                is_admin=is_admin,
                has_driver_application=False
            )
        )
    
    @router.callback_query(F.data == "driver_status:check")
    async def check_driver_status(call: CallbackQuery) -> None:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤–æ–¥—ñ—è"""
        if not call.from_user:
            return
        
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver:
            await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await call.answer()
        await call.message.delete()
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        from aiogram import types
        await show_driver_application_status(
            types.Message(
                message_id=call.message.message_id,
                date=call.message.date,
                chat=call.message.chat,
                from_user=call.from_user,
                bot=call.bot
            ),
            driver,
            config
        )

    @router.message(F.text == CANCEL_TEXT)
    async def cancel(message: Message, state: FSMContext) -> None:
        await state.clear()
        from app.handlers.keyboards import main_menu_keyboard
        is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
        await message.answer(
            "‚ùå –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=main_menu_keyboard(is_registered=False, is_driver=False, is_admin=is_admin)
        )

    @router.message(DriverRegStates.name)
    async def take_name(message: Message, state: FSMContext) -> None:
        full_name = message.text.strip() if message.text else ""
        if len(full_name) < 3:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ü–Ü–ë (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏).")
            return
        await state.update_data(full_name=full_name)
        await state.set_state(DriverRegStates.phone)
        await message.answer(
            "üì± <b>–ö—Ä–æ–∫ 2/7: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.phone)
    async def take_phone(message: Message, state: FSMContext) -> None:
        phone = message.text.strip() if message.text else ""
        if len(phone) < 7:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
            return
        await state.update_data(phone=phone)
        
        # City selection with inline buttons
        from app.handlers.keyboards import driver_city_selection_keyboard
        await state.set_state(DriverRegStates.city)
        await message.answer(
            "üèô <b>–ö—Ä–æ–∫ 3/7: –ú—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ –±—É–¥–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏:",
            reply_markup=driver_city_selection_keyboard()
        )

    @router.callback_query(F.data.startswith("driver_city:"), DriverRegStates.city)
    async def take_city(call: CallbackQuery, state: FSMContext) -> None:
        city = call.data.split(":", 1)[1]
        await state.update_data(city=city)
        await call.answer(f"–û–±—Ä–∞–Ω–æ: {city}")
        
        await state.set_state(DriverRegStates.car_make)
        await call.message.answer(
            f"‚úÖ –ú—ñ—Å—Ç–æ: {city}\n\n"
            "üöó <b>–ö—Ä–æ–∫ 4/7: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–∞—Ä–∫—É –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Toyota, Volkswagen):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_make)
    async def take_car_make(message: Message, state: FSMContext) -> None:
        car_make = message.text.strip() if message.text else ""
        if len(car_make) < 2:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–∞—Ä–∫—É –∞–≤—Ç–æ.")
            return
        await state.update_data(car_make=car_make)
        await state.set_state(DriverRegStates.car_model)
        await message.answer(
            "üöô <b>–ö—Ä–æ–∫ 5/7: –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: Camry, Passat):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_model)
    async def take_car_model(message: Message, state: FSMContext) -> None:
        car_model = message.text.strip() if message.text else ""
        if len(car_model) < 2:
            await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –º–æ–¥–µ–ª—å –∞–≤—Ç–æ.")
            return
        await state.update_data(car_model=car_model)
        await state.set_state(DriverRegStates.car_plate)
        await message.answer(
            "üî¢ <b>–ö—Ä–æ–∫ 6/7: –ù–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫ –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–ê1234–í–í):",
            reply_markup=cancel_keyboard()
        )

    @router.message(DriverRegStates.car_plate)
    async def take_car_plate(message: Message, state: FSMContext) -> None:
        car_plate = message.text.strip().upper()
        await state.update_data(car_plate=car_plate)
        await state.set_state(DriverRegStates.car_class)
        
        # –í–∏–±—ñ—Ä –∫–ª–∞—Å—É –∞–≤—Ç–æ
        from app.handlers.car_classes import CAR_CLASSES
        
        buttons = []
        for class_code, class_info in CAR_CLASSES.items():
            mult_percent = int((class_info['multiplier']-1)*100)
            mult_text = f"+{mult_percent}%" if mult_percent > 0 else "–±–∞–∑–æ–≤–∏–π"
            buttons.append([
                InlineKeyboardButton(
                    text=f"{class_info['name_uk']} ({mult_text})",
                    callback_data=f"driver_car_class:{class_code}"
                )
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            "üöó <b>–ö—Ä–æ–∫ 7/8: –ö–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –≤–∞—à–æ–≥–æ –∞–≤—Ç–æ:\n"
            "‚Ä¢ üöó –ï–∫–æ–Ω–æ–º - –±–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ\n"
            "‚Ä¢ üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç - +30% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n"
            "‚Ä¢ üöò –ö–æ–º—Ñ–æ—Ä—Ç - +60% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n"
            "‚Ä¢ üèÜ –ë—ñ–∑–Ω–µ—Å - +100% –¥–æ —Ç–∞—Ä–∏—Ñ—É\n\n"
            "–¶–µ –≤–ø–ª–∏–Ω–µ –Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫ —Ç–∞ –≤–∞—à –∑–∞—Ä–æ–±—ñ—Ç–æ–∫.",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("driver_car_class:"))
    async def save_driver_car_class(call: CallbackQuery, state: FSMContext) -> None:
        car_class = call.data.split(":", 1)[1]
        await state.update_data(car_class=car_class)
        await state.set_state(DriverRegStates.license_photo)
        
        from app.handlers.car_classes import get_car_class_name
        class_name = get_car_class_name(car_class)
        
        await call.answer()
        await call.message.answer(
            f"‚úÖ –ö–ª–∞—Å –∞–≤—Ç–æ: {class_name}\n\n"
            "üì∏ <b>–ö—Ä–æ–∫ 8/8: –§–æ—Ç–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /skip)",
            reply_markup=cancel_keyboard()
        )

    @router.message(Command("skip"), DriverRegStates.license_photo)
    async def skip_license(message: Message, state: FSMContext) -> None:
        await state.update_data(license_photo_file_id=None)
        await finalize_application(message, state)

    @router.message(DriverRegStates.license_photo, F.photo)
    async def take_license_photo(message: Message, state: FSMContext) -> None:
        file_id = message.photo[-1].file_id  # biggest size
        await state.update_data(license_photo_file_id=file_id)
        await finalize_application(message, state)

    async def finalize_application(message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        
        from app.handlers.car_classes import get_car_class_name
        car_class = data.get("car_class", "economy")
        
        driver = Driver(
            id=None,
            tg_user_id=message.from_user.id if message.from_user else 0,
            full_name=str(data.get("full_name")),
            phone=str(data.get("phone")),
            car_make=str(data.get("car_make")),
            car_model=str(data.get("car_model")),
            car_plate=str(data.get("car_plate")),
            car_class=car_class,
            license_photo_file_id=(data.get("license_photo_file_id") or None),
            status="pending",
            created_at=datetime.now(timezone.utc),
            updated_at=datetime.now(timezone.utc),
        )
        driver_id = await create_driver_application(config.database_path, driver)
        await state.clear()
        # Notify admin(s)
        for admin_id in set(config.bot.admin_ids):
            try:
                await message.bot.send_message(
                    admin_id,
                    (
                        "–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤–æ–¥—ñ—è:\n"
                        f"ID –∑–∞—è–≤–∫–∏: {driver_id}\n"
                        f"–ü–Ü–ë: {driver.full_name}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
                        f"–ê–≤—Ç–æ: {driver.car_make} {driver.car_model} ({driver.car_plate})\n"
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                                    callback_data=f"drv:approve:{driver_id}",
                                ),
                                InlineKeyboardButton(
                                    text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                                    callback_data=f"drv:reject:{driver_id}",
                                ),
                            ]
                        ]
                    ),
                )
                if driver.license_photo_file_id:
                    await message.bot.send_photo(
                        admin_id,
                        driver.license_photo_file_id,
                        caption=f"–ü–æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è –≤–æ–¥—ñ—è (–∑–∞—è–≤–∫–∞ #{driver_id})",
                    )
            except Exception:
                # Ignore delivery errors to some admins
                pass

        from app.handlers.keyboards import main_menu_keyboard
        is_admin = message.from_user.id in config.bot.admin_ids if message.from_user else False
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å "–Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", 
                    callback_data="driver_status:check"
                )]
            ]
        )
        
        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–æ!</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{driver_id}\n"
            f"üìù –ü–Ü–ë: {data.get('full_name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
            f"üèô –ú—ñ—Å—Ç–æ: {data.get('city', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üöô –ê–≤—Ç–æ: {data.get('car_make')} {data.get('car_model')}\n\n"
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ</b>\n\n"
            f"–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"–ó–∞–∑–≤–∏—á–∞–π —Ü–µ –∑–∞–π–º–∞—î –¥–æ 3 –≥–æ–¥–∏–Ω.\n\n"
            f"–ú–∏ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å, –∫–æ–ª–∏ –∑–∞—è–≤–∫—É —Ä–æ–∑–≥–ª—è–Ω—É—Ç—å.",
            reply_markup=kb
        )

    # Admin moderation callbacks
    @router.callback_query(F.data.startswith("drv:"))
    async def on_driver_callback(call: CallbackQuery) -> None:
        data = (call.data or "").split(":")
        if len(data) != 3:
            await call.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ", show_alert=True)
            return
        _, action, sid = data
        try:
            driver_id = int(sid)
        except ValueError:
            await call.answer("–ü–æ–º–∏–ª–∫–∞ ID", show_alert=True)
            return
        # Only admins can moderate
        if not call.from_user or call.from_user.id not in set(config.bot.admin_ids):
            await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤", show_alert=True)
            return

        if action == "approve":
            await update_driver_status(config.database_path, driver_id, "approved")
            await call.answer("–í–æ–¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
            drv = await get_driver_by_id(config.database_path, driver_id)
            if drv:
                try:
                    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –≥—Ä—É–ø—É
                    welcome_text = (
                        "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                        "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ —Ç–µ–ø–µ—Ä –≤–æ–¥—ñ–π –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                        "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                        "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                        "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                    )
                    
                    # –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤, —è–∫—â–æ –≤–æ–Ω–æ —î
                    if config.driver_group_invite_link:
                        welcome_text += (
                            f"üì± <b>–î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤:</b>\n"
                            f"{config.driver_group_invite_link}\n\n"
                            "‚ö†Ô∏è –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. "
                            "–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å!\n\n"
                        )
                    
                    welcome_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è"
                    
                    await call.message.bot.send_message(
                        drv.tg_user_id,
                        welcome_text,
                    )
                except Exception:
                    pass
        elif action == "reject":
            await update_driver_status(config.database_path, driver_id, "rejected")
            await call.answer("–ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
            drv = await get_driver_by_id(config.database_path, driver_id)
            if drv:
                try:
                    await call.message.bot.send_message(
                        drv.tg_user_id,
                        "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.",
                    )
                except Exception:
                    pass
        else:
            await call.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –¥—ñ—è", show_alert=True)
            return

    # Helper: driver status check
    @router.message(Command("my_driver_status"))
    async def my_driver_status(message: Message) -> None:
        if not message.from_user:
            return
        drv = await get_driver_by_tg_user_id(
            config.database_path, message.from_user.id
        )
        if not drv:
            await message.answer("–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        await message.answer(
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {drv.status}\n–ê–≤—Ç–æ: {drv.car_make} {drv.car_model} ({drv.car_plate})"
        )

    # Admin commands
    @router.message(Command("pending_drivers"))
    async def list_pending_drivers(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        drivers = await fetch_pending_drivers(config.database_path, limit=20)
        if not drivers:
            await message.answer("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫, —â–æ –æ—á—ñ–∫—É—é—Ç—å.")
            return
        for d in drivers:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"drv:approve:{d.id}"),
                        InlineKeyboardButton(text="–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"drv:reject:{d.id}"),
                    ]
                ]
            )
            await message.answer(
                (
                    f"#{d.id} {d.full_name} ({d.phone})\n"
                    f"–ê–≤—Ç–æ: {d.car_make} {d.car_model} ({d.car_plate})\n"
                    f"–°—Ç–∞—Ç—É—Å: {d.status}"
                ),
                reply_markup=kb,
            )

    @router.message(Command("approve_driver"))
    async def approve_driver_cmd(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        parts = (message.text or "").split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /approve_driver <id>")
            return
        driver_id = int(parts[1])
        await update_driver_status(config.database_path, driver_id, "approved")
        await message.answer(f"–í–æ–¥—ñ—è #{driver_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        drv = await get_driver_by_id(config.database_path, driver_id)
        if drv:
            try:
                # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –≥—Ä—É–ø—É
                welcome_text = (
                    "üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                    "–í–∞—à—É –∑–∞—è–≤–∫—É —Å—Ö–≤–∞–ª–µ–Ω–æ! –í–∏ —Ç–µ–ø–µ—Ä –≤–æ–¥—ñ–π –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                    "‚úÖ –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ü—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤\n"
                    "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫\n"
                    "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—ó–∑–¥–æ–∫\n\n"
                )
                
                # –î–æ–¥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤, —è–∫—â–æ –≤–æ–Ω–æ —î
                if config.driver_group_invite_link:
                    welcome_text += (
                        f"üì± <b>–î–æ–ª—É—á–∞–π—Ç–µ—Å—å –¥–æ –≥—Ä—É–ø–∏ –≤–æ–¥—ñ—ó–≤:</b>\n"
                        f"{config.driver_group_invite_link}\n\n"
                        "‚ö†Ô∏è –í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. "
                        "–û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å!\n\n"
                    )
                
                welcome_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –≤–æ–¥—ñ—è"
                
                await message.bot.send_message(drv.tg_user_id, welcome_text)
            except Exception:
                pass

    @router.message(Command("reject_driver"))
    async def reject_driver_cmd(message: Message) -> None:
        if not message.from_user or message.from_user.id not in set(config.bot.admin_ids):
            return
        parts = (message.text or "").split()
        if len(parts) < 2 or not parts[1].isdigit():
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reject_driver <id>")
            return
        driver_id = int(parts[1])
        await update_driver_status(config.database_path, driver_id, "rejected")
        await message.answer(f"–ó–∞—è–≤–∫—É #{driver_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
        drv = await get_driver_by_id(config.database_path, driver_id)
        if drv:
            try:
                await message.bot.send_message(drv.tg_user_id, "–í–∞—à—É –∑–∞—è–≤–∫—É –≤–æ–¥—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")
            except Exception:
                pass

    return router
