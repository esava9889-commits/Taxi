"""–ñ–∏–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–æ–¥—ñ—è"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config.config import AppConfig
from app.storage.db import (
    get_order_by_id,
    get_driver_by_id,
)
from app.utils.maps import get_distance_and_duration

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="live_tracking")

    @router.callback_query(F.data.startswith("live_track:"))
    async def start_live_tracking(call: CallbackQuery) -> None:
        """–ü–æ—á–∞—Ç–∏ –∂–∏–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–æ–¥—ñ—è"""
        if not call.from_user or not call.message:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or not order.driver_id:
            await call.answer("‚ùå –í–æ–¥—ñ—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ", show_alert=True)
            return
        
        if order.user_id != call.from_user.id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        driver = await get_driver_by_id(config.database_path, order.driver_id)
        if not driver:
            await call.answer("‚ùå –í–æ–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await call.answer()
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ Live Location
        if driver.last_lat and driver.last_lon:
            try:
                # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∏–≤—É –ª–æ–∫–∞—Ü—ñ—é (–æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
                sent_msg = await call.bot.send_location(
                    call.from_user.id,
                    latitude=driver.last_lat,
                    longitude=driver.last_lon,
                    live_period=900,  # 15 —Ö–≤–∏–ª–∏–Ω live tracking
                )
                
                # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ ETA
                eta_text = ""
                if order.pickup_lat and order.pickup_lon and config.google_maps_api_key:
                    result = await get_distance_and_duration(
                        config.google_maps_api_key,
                        driver.last_lat, driver.last_lon,
                        order.pickup_lat, order.pickup_lon
                    )
                    if result:
                        distance_m, duration_s = result
                        km = distance_m / 1000.0
                        minutes = int(duration_s / 60.0)
                        eta_text = f"\n\nüìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º\n‚è±Ô∏è –ü—Ä–∏–±—É–¥–µ —á–µ—Ä–µ–∑: ~{minutes} —Ö–≤"
                
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Google Maps",
                            url=f"https://www.google.com/maps/dir/?api=1&destination={driver.last_lat},{driver.last_lon}"
                        )],
                        [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"live_track:{order_id}")]
                    ]
                )
                
                await call.bot.send_message(
                    call.from_user.id,
                    f"üìç <b>–ñ–∏–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–æ–¥—ñ—è</b>\n\n"
                    f"üöó {driver.full_name}\n"
                    f"üöô {driver.car_make} {driver.car_model} ({driver.car_plate}){eta_text}\n\n"
                    f"<i>–õ–æ–∫–∞—Ü—ñ—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</i>",
                    reply_markup=kb
                )
                
            except Exception as e:
                logger.error(f"Failed to send live location: {e}")
                await call.message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è")
        else:
            await call.message.answer(
                "‚ö†Ô∏è –í–æ–¥—ñ–π —â–µ –Ω–µ –Ω–∞–¥–∞–≤ —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ."
            )

    @router.callback_query(F.data.startswith("driver_arrived:"))
    async def driver_arrived(call: CallbackQuery) -> None:
        """–í–æ–¥—ñ–π –ø–æ–≤—ñ–¥–æ–º–ª—è—î —â–æ –ø—Ä–∏–±—É–≤"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":", 1)[1])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –≤–æ–¥—ñ–π —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import get_driver_by_tg_user_id
        driver = await get_driver_by_tg_user_id(config.database_path, call.from_user.id)
        if not driver or driver.id != order.driver_id:
            await call.answer("‚ùå –¶–µ –Ω–µ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            return
        
        await call.answer()
        
        # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
        from app.handlers.notifications import notify_client_driver_arrived
        await notify_client_driver_arrived(
            call.bot,
            order.user_id,
            order_id,
            driver.full_name
        )
        
        await call.message.edit_text(
            f"{call.message.text}\n\n"
            f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ —â–æ –≤–∏ –Ω–∞ –º—ñ—Å—Ü—ñ"
        )

    return router
