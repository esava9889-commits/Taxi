"""–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∞–≤—Ç–æ —Ç–∞ —Ç–∞—Ä–∏—Ñ–∏"""
from __future__ import annotations

from dataclasses import dataclass
from typing import Optional

# –ö–ª–∞—Å–∏ –∞–≤—Ç–æ —Ç–∞ —ó—Ö –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–æ —Ç–∞—Ä–∏—Ñ—É
CAR_CLASSES = {
    "economy": {
        "name_uk": "üöó –ï–∫–æ–Ω–æ–º",
        "name_ru": "üöó –≠–∫–æ–Ω–æ–º", 
        "name_en": "üöó Economy",
        "multiplier": 1.0,  # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
        "description_uk": "–ë—é–¥–∂–µ—Ç–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç",
        "description_ru": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
        "description_en": "Budget option"
    },
    "standard": {
        "name_uk": "üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "name_ru": "üöô –°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "name_en": "üöô Standard",
        "multiplier": 1.3,  # +30%
        "description_uk": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–µ –∞–≤—Ç–æ",
        "description_ru": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –∞–≤—Ç–æ",
        "description_en": "Comfortable car"
    },
    "comfort": {
        "name_uk": "üöò –ö–æ–º—Ñ–æ—Ä—Ç",
        "name_ru": "üöò –ö–æ–º—Ñ–æ—Ä—Ç",
        "name_en": "üöò Comfort",
        "multiplier": 1.6,  # +60%
        "description_uk": "–ü—Ä–µ–º—ñ—É–º –∫–ª–∞—Å",
        "description_ru": "–ü—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å",
        "description_en": "Premium class"
    },
    "business": {
        "name_uk": "üèÜ –ë—ñ–∑–Ω–µ—Å",
        "name_ru": "üèÜ –ë–∏–∑–Ω–µ—Å",
        "name_en": "üèÜ Business",
        "multiplier": 2.0,  # +100%
        "description_uk": "–õ—é–∫—Å–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å",
        "description_ru": "–õ—é–∫—Å–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å",
        "description_en": "Luxury service"
    }
}


def get_car_class_name(car_class: str, lang: str = "uk") -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
    if car_class not in CAR_CLASSES:
        return "üöó –ï–∫–æ–Ω–æ–º"
    
    key = f"name_{lang}"
    return CAR_CLASSES[car_class].get(key, CAR_CLASSES[car_class]["name_uk"])


def get_car_class_description(car_class: str, lang: str = "uk") -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
    if car_class not in CAR_CLASSES:
        return ""
    
    key = f"description_{lang}"
    return CAR_CLASSES[car_class].get(key, CAR_CLASSES[car_class]["description_uk"])


def get_car_class_multiplier(car_class: str) -> float:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
    if car_class not in CAR_CLASSES:
        return 1.0
    
    return CAR_CLASSES[car_class]["multiplier"]


def calculate_fare_with_class(base_fare: float, car_class: str) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–ª–∞—Å—É –∞–≤—Ç–æ"""
    multiplier = get_car_class_multiplier(car_class)
    return base_fare * multiplier
