"""–î–∏–Ω–∞–º—ñ—á–Ω–µ —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
from __future__ import annotations

import logging
from datetime import datetime
from typing import Tuple

from app.config.config import AppConfig

logger = logging.getLogger(__name__)


def get_surge_multiplier(city: str = "–ö–∏—ó–≤", night_percent: float = 50.0) -> Tuple[float, str]:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –º–Ω–æ–∂–Ω–∏–∫ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏—á–∏–Ω—É
    
    Args:
        city: –ú—ñ—Å—Ç–æ
        night_percent: % –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–∑ –ë–î)
    
    Returns:
        (multiplier, reason) - –º–Ω–æ–∂–Ω–∏–∫ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–∏
    """
    now = datetime.now()
    hour = now.hour
    day_of_week = now.weekday()  # 0 = Monday, 6 = Sunday
    
    multiplier = 1.0
    reasons = []
    
    # 1. –ü—ñ–∫–æ–≤–∏–π —á–∞—Å (—Ä–∞–Ω–æ–∫ —Ç–∞ –≤–µ—á—ñ—Ä)
    if (7 <= hour <= 9) or (17 <= hour <= 19):
        multiplier *= 1.3
        reasons.append("–ü—ñ–∫–æ–≤–∏–π —á–∞—Å")
    
    # 2. –ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–∑ –ë–î!)
    if hour >= 23 or hour < 6:
        night_mult = 1.0 + (night_percent / 100.0)  # 50% ‚Üí 1.5
        multiplier *= night_mult
        reasons.append(f"–ù—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ (+{night_percent:.0f}%)")
    
    # 3. –í–∏—Ö—ñ–¥–Ω—ñ (–ø'—è—Ç–Ω–∏—Ü—è-–Ω–µ–¥—ñ–ª—è –≤–≤–µ—á–µ—Ä—ñ)
    if day_of_week >= 4 and 18 <= hour <= 23:  # –ü—Ç-–ù–¥ –≤–µ—á—ñ—Ä
        multiplier *= 1.2
        reasons.append("–í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å")
    
    # 4. –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ (–≤—Å—ñ –ø–æ—Å–ø—ñ—à–∞—é—Ç—å)
    if day_of_week == 0 and 7 <= hour <= 10:
        multiplier *= 1.15
        reasons.append("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Ä–∞–Ω—Ü—ñ")
    
    # –û–±'—î–¥–Ω–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω–∏
    reason_text = " + ".join(reasons) if reasons else "–ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ"
    
    return multiplier, reason_text


def get_weather_multiplier(weather_percent: float = 0.0) -> Tuple[float, str]:
    """
    –ú–Ω–æ–∂–Ω–∏–∫ –∑–∞ –ø–æ–≥–æ–¥–æ—é
    
    Args:
        weather_percent: % –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ (–∑ –ë–î)
    
    Returns:
        (multiplier, reason) - –º–Ω–æ–∂–Ω–∏–∫ —Ç–∞ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω–∏
    """
    if weather_percent > 0:
        weather_mult = 1.0 + (weather_percent / 100.0)  # 20% ‚Üí 1.2
        return weather_mult, f"–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ (+{weather_percent:.0f}%)"
    
    return 1.0, ""


def get_demand_multiplier(online_drivers_count: int, pending_orders_count: int) -> Tuple[float, str]:
    """
    –ú–Ω–æ–∂–Ω–∏–∫ –∑–∞ –ø–æ–ø–∏—Ç–æ–º (–º–∞–ª–æ –≤–æ–¥—ñ—ó–≤, –±–∞–≥–∞—Ç–æ –∑–∞–º–æ–≤–ª–µ–Ω—å)
    """
    if online_drivers_count == 0:
        return 1.5, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤"
    
    # –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ –≤–æ–¥—ñ—ó–≤
    ratio = pending_orders_count / online_drivers_count if online_drivers_count > 0 else 0
    
    if ratio > 3:  # –ë—ñ–ª—å—à–µ 3 –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–∞ –≤–æ–¥—ñ—è
        return 1.4, "–î—É–∂–µ –≤–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç"
    elif ratio > 2:
        return 1.25, "–í–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç"
    elif ratio > 1.5:
        return 1.15, "–ü—ñ–¥–≤–∏—â–µ–Ω–∏–π –ø–æ–ø–∏—Ç"
    elif ratio < 0.3:  # –ú–∞–ª–æ –∑–∞–º–æ–≤–ª–µ–Ω—å - –∑–Ω–∏–∂–∫–∞
        return 0.9, "–ù–∏–∑—å–∫–∏–π –ø–æ–ø–∏—Ç (–∑–Ω–∏–∂–∫–∞ -10%)"
    
    return 1.0, ""


async def calculate_dynamic_price(
    base_fare: float,
    city: str = "–ö–∏—ó–≤",
    online_drivers: int = 10,
    pending_orders: int = 5,
    night_percent: float = 50.0,
    weather_percent: float = 0.0
) -> Tuple[float, str, float]:
    """
    –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
    
    Args:
        base_fare: –ë–∞–∑–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å
        city: –ú—ñ—Å—Ç–æ
        online_drivers: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤
        pending_orders: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á—ñ–∫—É—é—á–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        night_percent: % –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –Ω—ñ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–∑ –ë–î)
        weather_percent: % –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –ø–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ (–∑ –ë–î)
    
    Returns:
        (final_price, explanation, total_multiplier)
    """
    # 1. –ß–∞—Å –¥–æ–±–∏ —Ç–∞ –¥–µ–Ω—å —Ç–∏–∂–Ω—è
    time_mult, time_reason = get_surge_multiplier(city, night_percent)
    
    # 2. –ü–æ–≥–æ–¥–∞
    weather_mult, weather_reason = get_weather_multiplier(weather_percent)
    
    # 3. –ü–æ–ø–∏—Ç
    demand_mult, demand_reason = get_demand_multiplier(online_drivers, pending_orders)
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π –º–Ω–æ–∂–Ω–∏–∫
    total_multiplier = time_mult * weather_mult * demand_mult
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
    final_price = base_fare * total_multiplier
    
    # –ü–æ—è—Å–Ω–µ–Ω–Ω—è
    reasons = []
    if time_reason:
        reasons.append(f"‚Ä¢ {time_reason}: +{int((time_mult-1)*100)}%")
    if weather_reason:
        reasons.append(f"‚Ä¢ {weather_reason}: +{int((weather_mult-1)*100)}%")
    if demand_reason:
        change = int((demand_mult-1)*100)
        sign = "+" if change > 0 else ""
        reasons.append(f"‚Ä¢ {demand_reason}: {sign}{change}%")
    
    if not reasons:
        explanation = "–ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ"
    else:
        explanation = "\n".join(reasons)
    
    logger.info(f"Dynamic pricing: base={base_fare}, final={final_price}, multiplier={total_multiplier}")
    
    return final_price, explanation, total_multiplier


def get_surge_emoji(multiplier: float) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –µ–º–æ–¥–∑—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–ø–∏—Ç—É"""
    if multiplier >= 1.5:
        return "üî•üî•üî•"
    elif multiplier >= 1.3:
        return "üî•üî•"
    elif multiplier >= 1.15:
        return "üî•"
    elif multiplier < 1.0:
        return "üíö"  # –ó–Ω–∏–∂–∫–∞
    return ""
