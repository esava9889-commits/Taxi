"""–ú–æ–¥—É–ª—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç—ñ–≤ - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove

from app.config.config import AppConfig
from app.storage.db import User, upsert_user, get_user_by_id
from app.utils.validation import validate_phone_number, validate_name
from app.handlers.keyboards import main_menu_keyboard, contact_keyboard, city_selection_keyboard

logger = logging.getLogger(__name__)


class ClientRegStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞"""
    phone = State()
    city = State()


def create_registration_router(config: AppConfig) -> Router:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    router = Router(name="registration")
    
    @router.callback_query(F.data == "register:start")
    @router.message(F.text == "üì± –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å")
    async def start_registration(event, state: FSMContext) -> None:
        """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
        # –û–±—Ä–æ–±–∫–∞ —è–∫ callback, —Ç–∞–∫ —ñ message
        user_id = event.from_user.id if event.from_user else None
        if not user_id:
            return
        
        user = await get_user_by_id(config.database_path, user_id)
        if user and user.phone and user.city:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
            is_admin = user_id in config.bot.admin_ids
            from app.storage.db import get_driver_by_tg_user_id
            driver = await get_driver_by_tg_user_id(config.database_path, user_id)
            is_driver = driver is not None and driver.status == "approved"
            
            text = f"‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!\n\nüìç –ú—ñ—Å—Ç–æ: {user.city}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}"
            if isinstance(event, CallbackQuery):
                await event.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
                try:
                    await event.message.edit_text(text)
                except:
                    await event.message.answer(text)
                await event.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver, is_admin=is_admin))
            else:
                await event.answer(text, reply_markup=main_menu_keyboard(is_registered=True, is_driver=is_driver, is_admin=is_admin))
            return
        
        if isinstance(event, CallbackQuery):
            await event.answer()
        
        # –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞
        text = "üìç <b>–ö—Ä–æ–∫ 1/2: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞–∫—Å—ñ:"
        kb = city_selection_keyboard()
        
        await state.set_state(ClientRegStates.city)
        
        if isinstance(event, CallbackQuery):
            # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            await state.update_data(reg_message_id=event.message.message_id)
            try:
                await event.message.edit_text(text, reply_markup=kb)
            except:
                msg = await event.message.answer(text, reply_markup=kb)
                await state.update_data(reg_message_id=msg.message_id)
        else:
            msg = await event.answer(text, reply_markup=kb)
            await state.update_data(reg_message_id=msg.message_id)
    
    @router.callback_query(F.data.startswith("city:"), ClientRegStates.city)
    async def select_city(call: CallbackQuery, state: FSMContext) -> None:
        """–í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞"""
        city = call.data.split(":", 1)[1]
        await state.update_data(city=city)
        await call.answer(f"‚úÖ {city}")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        if reg_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, reg_message_id)
            except:
                pass
        
        text = (
            f"‚úÖ <b>–ú—ñ—Å—Ç–æ –æ–±—Ä–∞–Ω–æ:</b> {city}\n\n"
            "üì± <b>–ö—Ä–æ–∫ 2/2: –ù–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂—á–µ)\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É"
        )
        
        # –ö–Ω–æ–ø–∫–∏: –ù–∞–∑–∞–¥ + —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É", callback_data="phone:manual")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞", callback_data="register:back_to_city")]
            ]
        )
        
        await state.set_state(ClientRegStates.phone)
        
        msg = await call.message.answer(text, reply_markup=kb)
        await state.update_data(reg_message_id=msg.message_id)
        
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ contact keyboard
        contact_msg = await call.message.answer(
            "üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
            reply_markup=contact_keyboard()
        )
        await state.update_data(contact_message_id=contact_msg.message_id)
    
    @router.callback_query(F.data == "phone:manual", ClientRegStates.phone)
    async def phone_manual_entry(call: CallbackQuery, state: FSMContext) -> None:
        """–†—É—á–Ω–µ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä—É"""
        await call.answer()
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        contact_message_id = data.get("contact_message_id")
        
        if reg_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, reg_message_id)
            except:
                pass
        if contact_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, contact_message_id)
            except:
                pass
        
        city = data.get("city", "–ú—ñ—Å—Ç–æ")
        
        text = (
            f"‚úÖ <b>–ú—ñ—Å—Ç–æ:</b> {city}\n\n"
            "üì± <b>–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "<b>–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:</b>\n"
            "‚Ä¢ +380 67 123 45 67\n"
            "‚Ä¢ +380671234567\n"
            "‚Ä¢ 0671234567"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="register:back_to_phone")]
            ]
        )
        
        msg = await call.message.answer(text, reply_markup=kb)
        await state.update_data(reg_message_id=msg.message_id, contact_message_id=None)
        
        # –ü—Ä–∏–±—Ä–∞—Ç–∏ contact keyboard
        await call.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:", reply_markup=ReplyKeyboardRemove())
    
    @router.callback_query(F.data == "register:back_to_city", ClientRegStates.phone)
    async def back_to_city(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞"""
        await call.answer()
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        contact_message_id = data.get("contact_message_id")
        
        if reg_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, reg_message_id)
            except:
                pass
        if contact_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, contact_message_id)
            except:
                pass
        
        await state.set_state(ClientRegStates.city)
        
        text = "üìç <b>–ö—Ä–æ–∫ 1/2: –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ</b>\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤ —è–∫–æ–º—É –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞–∫—Å—ñ:"
        kb = city_selection_keyboard()
        
        msg = await call.message.answer(text, reply_markup=kb)
        await state.update_data(reg_message_id=msg.message_id, contact_message_id=None)
    
    @router.callback_query(F.data == "register:back_to_phone")
    async def back_to_phone_choice(call: CallbackQuery, state: FSMContext) -> None:
        """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        await call.answer()
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        if reg_message_id:
            try:
                await call.message.bot.delete_message(call.message.chat.id, reg_message_id)
            except:
                pass
        
        city = data.get("city", "–ú—ñ—Å—Ç–æ")
        
        text = (
            f"‚úÖ <b>–ú—ñ—Å—Ç–æ –æ–±—Ä–∞–Ω–æ:</b> {city}\n\n"
            "üì± <b>–ö—Ä–æ–∫ 2/2: –ù–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
            "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–æ–¥—ñ–π –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å.\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂—á–µ)\n"
            "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É"
        )
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É", callback_data="phone:manual")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞", callback_data="register:back_to_city")]
            ]
        )
        
        msg = await call.message.answer(text, reply_markup=kb)
        await state.update_data(reg_message_id=msg.message_id)
        
        # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ contact keyboard
        contact_msg = await call.message.answer(
            "üëá –ê–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=contact_keyboard()
        )
        await state.update_data(contact_message_id=contact_msg.message_id)
    
    @router.message(ClientRegStates.phone, F.contact)
    async def save_phone_contact(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç"""
        if not message.from_user or not message.contact:
            return
        
        data = await state.get_data()
        city = data.get("city")
        phone = message.contact.phone_number
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
        is_valid, cleaned_phone = validate_phone_number(phone)
        if not is_valid:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="register:back_to_phone")]
                ]
            )
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: +380 67 123 45 67",
                reply_markup=kb
            )
            logger.warning(f"Invalid phone number from contact: {phone}")
            return
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
        user_name = message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        is_valid_name, cleaned_name = validate_name(user_name)
        if not is_valid_name:
            cleaned_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            logger.warning(f"Invalid name: {user_name}, using default")
        
        user = User(
            user_id=message.from_user.id,
            full_name=cleaned_name,
            phone=cleaned_phone,
            role="client",
            city=city,
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        contact_message_id = data.get("contact_message_id")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ö—Ä–æ–∫ 2/2"
        if reg_message_id:
            try:
                await message.bot.delete_message(message.chat.id, reg_message_id)
            except:
                pass
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "üëá –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É"
        if contact_message_id:
            try:
                await message.bot.delete_message(message.chat.id, contact_message_id)
            except:
                pass
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        try:
            await message.delete()
        except:
            pass
        
        await state.clear()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
        is_admin = message.from_user.id in config.bot.admin_ids
        
        await message.answer(
            f"‚úÖ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {cleaned_name}!\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {cleaned_phone}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {city}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤–Ω–∏–∑—É üëá",
            reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin),
            parse_mode="HTML"
        )
        logger.info(f"User {message.from_user.id} registered in {city} with phone {cleaned_phone}")
    
    @router.message(ClientRegStates.phone)
    async def save_phone_text(message: Message, state: FSMContext) -> None:
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–µ–∫—Å—Ç–æ–º"""
        if not message.from_user:
            return
        
        phone = message.text.strip() if message.text else ""
        
        # –í–ê–õ–Ü–î–ê–¶–Ü–Ø: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
        is_valid, cleaned_phone = validate_phone_number(phone)
        if not is_valid:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="register:back_to_phone")]
                ]
            )
            await message.answer(
                "‚ùå <b>–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>\n\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n"
                "<b>–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:</b>\n"
                "‚Ä¢ +380 67 123 45 67\n"
                "‚Ä¢ +380671234567\n"
                "‚Ä¢ 0671234567\n\n"
                "‚ùóÔ∏è –ù–æ–º–µ—Ä –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10-12 —Ü–∏—Ñ—Ä",
                reply_markup=kb
            )
            logger.warning(f"Invalid phone number: {phone}")
            return
        
        data = await state.get_data()
        city = data.get("city")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
        user_name = message.from_user.full_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        is_valid_name, cleaned_name = validate_name(user_name)
        if not is_valid_name:
            cleaned_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            logger.warning(f"Invalid name: {user_name}, using default")
        
        user = User(
            user_id=message.from_user.id,
            full_name=cleaned_name,
            phone=cleaned_phone,
            role="client",
            city=city,
            created_at=datetime.now(timezone.utc),
        )
        await upsert_user(config.database_path, user)
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        data = await state.get_data()
        reg_message_id = data.get("reg_message_id")
        contact_message_id = data.get("contact_message_id")
        
        if reg_message_id:
            try:
                await message.bot.delete_message(message.chat.id, reg_message_id)
            except:
                pass
        if contact_message_id:
            try:
                await message.bot.delete_message(message.chat.id, contact_message_id)
            except:
                pass
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–º–µ—Ä–æ–º
        try:
            await message.delete()
        except:
            pass
        
        await state.clear()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω
        is_admin = message.from_user.id in config.bot.admin_ids
        
        await message.answer(
            f"‚úÖ <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {cleaned_name}!\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {cleaned_phone}\n"
            f"üìç –ú—ñ—Å—Ç–æ: {city}\n\n"
            "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–∞–∫—Å—ñ —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤–Ω–∏–∑—É üëá",
            reply_markup=main_menu_keyboard(is_registered=True, is_admin=is_admin),
            parse_mode="HTML"
        )
        logger.info(f"User {message.from_user.id} registered in {city} with phone {cleaned_phone}")
    
    return router
