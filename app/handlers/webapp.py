"""
–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram WebApp - —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞

–¶–µ–π –º–æ–¥—É–ª—å –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –≤–∏–±–∏—Ä–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π –∫–∞—Ä—Ç—ñ
–∑–∞–º—ñ—Å—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —Ç–µ–∫—Å—Ç–æ–º.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    1. –î–µ–ø–ª–æ–π index.html –Ω–∞ GitHub Pages / Netlify
    2. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ WEBAPP_URL –≤ .env
    3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—Å—Ç—å –∫–Ω–æ–ø–∫—É "üó∫ –û–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ"
"""
from __future__ import annotations

import json
import logging
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    WebAppInfo,
)

from app.config.config import AppConfig
from app.utils.maps import reverse_geocode

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="webapp")
    
    # URL –≤–∞—à–æ—ó WebApp (–∑–º—ñ–Ω—ñ—Ç—å –ø—ñ—Å–ª—è –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages)
    # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://–≤–∞—à-–ª–æ–≥—ñ–Ω.github.io/taxi-map/
    WEBAPP_URL = config.webapp_url if hasattr(config, 'webapp_url') else "https://yourusername.github.io/taxi-map/"
    
    @router.message(F.web_app_data)
    async def handle_webapp_data(message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –¥–∞–Ω–∏—Ö –∑ WebApp (–∫–∞—Ä—Ç–∏)
        """
        if not message.web_app_data:
            return
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑ WebApp
            data = json.loads(message.web_app_data.data)
            
            if data.get('type') == 'location':
                latitude = data.get('latitude')
                longitude = data.get('longitude')
                
                if not latitude or not longitude:
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
                    return
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (reverse geocoding)
                address = await reverse_geocode(latitude, longitude)
                
                if not address:
                    address = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                current_state = await state.get_state()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ —è–∫–æ–º—É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (pickup –∞–±–æ destination)
                state_data = await state.get_data()
                
                if current_state == "OrderStates:pickup" or state_data.get('waiting_for') == 'pickup':
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ
                    await state.update_data(
                        pickup_address=address,
                        pickup_lat=latitude,
                        pickup_lng=longitude,
                    )
                    
                    await message.answer(
                        f"‚úÖ <b>–ê–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                        f"–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å <b>–∫—É–¥–∏</b> —ó—Ö–∞—Ç–∏ üëá",
                    )
                    
                    # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
                    from app.handlers.order import OrderStates
                    await state.set_state(OrderStates.destination)
                    
                elif current_state == "OrderStates:destination" or state_data.get('waiting_for') == 'destination':
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                    await state.update_data(
                        dest_address=address,
                        dest_lat=latitude,
                        dest_lng=longitude,
                    )
                    
                    await message.answer(
                        f"‚úÖ <b>–ê–¥—Ä–µ—Å–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                        f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                    )
                    
                    # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –∑ order.py
                    data = await state.get_data()
                    
                    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏
                    from app.handlers.order import process_order_calculation
                    await process_order_calculation(message, state, config)
                else:
                    # –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω
                    await message.answer(
                        f"üìç <b>–û–±—Ä–∞–Ω–∞ –∞–¥—Ä–µ—Å–∞:</b>\n{address}\n\n"
                        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
                    )
                
                logger.info(
                    f"WebApp location received: {latitude}, {longitude} -> {address}"
                )
                
        except json.JSONDecodeError:
            logger.error(f"Failed to parse WebApp data: {message.web_app_data.data}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∏")
        except Exception as e:
            logger.error(f"Error handling WebApp data: {e}")
            await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    return router


def create_map_keyboard(webapp_url: str, button_text: str = "üó∫ –û–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ") -> InlineKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î INLINE –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ä—Ç–∏
    
    Args:
        webapp_url: URL WebApp –∑ –∫–∞—Ä—Ç–æ—é
        button_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    
    Returns:
        InlineKeyboardMarkup –∑ –∫–Ω–æ–ø–∫–æ—é WebApp
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text,
                    web_app=WebAppInfo(url=webapp_url)
                )
            ]
        ]
    )


def create_location_keyboard_with_map(webapp_url: Optional[str] = None) -> ReplyKeyboardMarkup:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é —Ç–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –∫–∞—Ä—Ç–æ—é
    
    Args:
        webapp_url: URL WebApp –∑ –∫–∞—Ä—Ç–æ—é (—è–∫—â–æ None - –∫–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç–∏ –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è)
    
    Returns:
        ReplyKeyboardMarkup
    """
    buttons = [
        [KeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
    ]
    
    # –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∫–∞—Ä—Ç–∏, —è–∫—â–æ URL –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    if webapp_url:
        buttons.append([
            KeyboardButton(
                text="üó∫ –û–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ",
                web_app=WebAppInfo(url=webapp_url)
            )
        ])
    
    buttons.extend([
        [KeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–º")],
        [KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")],
    ])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False,
    )
