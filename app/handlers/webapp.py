"""
–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Telegram WebApp - —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞

–¶–µ–π –º–æ–¥—É–ª—å –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –≤–∏–±–∏—Ä–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ–π –∫–∞—Ä—Ç—ñ
–∑–∞–º—ñ—Å—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —Ç–µ–∫—Å—Ç–æ–º.
"""
from __future__ import annotations

import json
import logging
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    WebAppInfo,
)

from app.config.config import AppConfig
from app.utils.maps import reverse_geocode

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="webapp")
    
    @router.message(F.web_app_data)
    async def handle_webapp_data(message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –¥–∞–Ω–∏—Ö –∑ WebApp (–∫–∞—Ä—Ç–∏)
        """
        logger.info("=" * 60)
        logger.info(f"üó∫ WEBAPP DATA RECEIVED from user {message.from_user.id}")
        logger.info("=" * 60)
        logger.info(f"üì¶ Message object: {message}")
        logger.info(f"üì¶ Message type: {message.content_type}")
        logger.info(f"üì¶ Has web_app_data: {hasattr(message, 'web_app_data')}")
        logger.info(f"üì¶ web_app_data is None: {message.web_app_data is None}")
        
        if not message.web_app_data:
            logger.error("=" * 60)
            logger.error("‚ùå ERROR: message.web_app_data is None!")
            logger.error("=" * 60)
            logger.error(f"Message dict: {message.model_dump()}")
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω–∏—Ö –∑ WebApp")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑ WebApp
            raw_data = message.web_app_data.data
            logger.info(f"üì¶ Raw WebApp data string: '{raw_data}'")
            logger.info(f"üì¶ Data type: {type(raw_data)}")
            logger.info(f"üì¶ Data length: {len(raw_data)}")
            
            logger.info("üîß Parsing JSON...")
            data = json.loads(raw_data)
            logger.info(f"‚úÖ Parsed JSON successfully: {data}")
            logger.info(f"üîç Data keys: {list(data.keys())}")
            logger.info(f"üîç Data type field: '{data.get('type')}'")
            
            if data.get('type') == 'location':
                logger.info("‚úÖ Data type is 'location'")
                
                latitude = data.get('latitude')
                longitude = data.get('longitude')
                
                logger.info(f"üìç Extracted coordinates:")
                logger.info(f"  - latitude: {latitude} (type: {type(latitude)})")
                logger.info(f"  - longitude: {longitude} (type: {type(longitude)})")
                
                if not latitude or not longitude:
                    logger.error(f"‚ùå Missing coordinates! lat={latitude}, lon={longitude}")
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
                    return
                
                logger.info("‚úÖ Coordinates are valid")
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (reverse geocoding)
                logger.info(f"üåç Calling reverse_geocode({latitude}, {longitude})...")
                address = await reverse_geocode("", latitude, longitude)
                logger.info(f"‚úÖ Reverse geocoding result: '{address}'")
                
                if not address:
                    address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
                    logger.warning(f"‚ö†Ô∏è No address found, using coordinates: {address}")
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                current_state = await state.get_state()
                state_data = await state.get_data()
                
                waiting_for = state_data.get('waiting_for')
                logger.info(f"üìç WebApp location received:")
                logger.info(f"  - Latitude: {latitude}")
                logger.info(f"  - Longitude: {longitude}")
                logger.info(f"  - Address: {address}")
                logger.info(f"  - Current state: {current_state}")
                logger.info(f"  - Waiting for: {waiting_for}")
                logger.info(f"  - All state data keys: {list(state_data.keys())}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ —è–∫–æ–º—É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (pickup –∞–±–æ destination)
                # –í–ê–ñ–õ–ò–í–û: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ waiting_for –ü–ï–†–®–ò–ú (–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–±!)
                if waiting_for == 'pickup':
                    # ===== PICKUP =====
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –ø–æ–¥–∞—á—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á—ñ —è–∫ –≤ order.py!)
                    await state.update_data(
                        pickup=address,  # ‚Üê –∫–ª—é—á —è–∫ –≤ order.py
                        pickup_lat=latitude,
                        pickup_lon=longitude,  # ‚Üê lon, –Ω–µ lng!
                        waiting_for=None,  # –û—á–∏—Å—Ç–∏—Ç–∏, —â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
                    )
                    
                    logger.info(f"‚úÖ WebApp pickup –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {address} ({latitude}, {longitude})")
                    logger.info(f"üì¶ State –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è pickup: {await state.get_data()}")
                    
                    # –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É - destination
                    from app.handlers.order import OrderStates
                    await state.set_state(OrderStates.destination)
                    
                    # –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è destination (—è–∫ –≤ order.py)
                    from app.storage.db import get_user_saved_addresses
                    saved_addresses = await get_user_saved_addresses(config.database_path, message.from_user.id)
                    
                    kb_buttons = [
                        [InlineKeyboardButton(text="üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", callback_data="order:dest:send_location")],
                        [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É —Ç–µ–∫—Å—Ç–æ–º", callback_data="order:dest:text")],
                    ]
                    
                    if saved_addresses:
                        kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
                    
                    kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
                    kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
                    
                    kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
                    
                    await message.answer(
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n{address}\n\n"
                        "üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                        "üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                        reply_markup=kb
                    )
                    
                elif waiting_for == 'destination':
                    # ===== DESTINATION =====
                    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á—ñ —è–∫ –≤ order.py!)
                    await state.update_data(
                        destination=address,  # ‚Üê –∫–ª—é—á —è–∫ –≤ order.py
                        dest_lat=latitude,
                        dest_lon=longitude,  # ‚Üê lon, –Ω–µ lng!
                        waiting_for=None,  # –û—á–∏—Å—Ç–∏—Ç–∏, —â–æ–± –Ω–µ –±—É–ª–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
                    )
                    
                    logger.info(f"‚úÖ WebApp destination –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {address} ({latitude}, {longitude})")
                    logger.info(f"üì¶ State –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è destination: {await state.get_data()}")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                    await message.answer(
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                        f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                    )
                    
                    # –û—Ç—Ä–∏–º–∞—Ç–∏ pickup –∑ state
                    pickup_address = state_data.get('pickup', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
                    
                    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏–±—ñ—Ä –∫–ª–∞—Å—ñ–≤ –∞–≤—Ç–æ (–≤–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ order.py)
                    from app.handlers.order import show_car_class_selection_with_prices
                    await show_car_class_selection_with_prices(message, state)
                    
                else:
                    # –ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —ñ –¥–∞–Ω—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    logger.error(f"‚ùå Unknown waiting_for state: {waiting_for}, current_state: {current_state}")
                    await message.answer(
                        f"‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞:</b> –Ω–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
                        f"üìç <b>–û–±—Ä–∞–Ω–∞ –∞–¥—Ä–µ—Å–∞:</b>\n{address}\n\n"
                        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}\n\n"
                        f"üîß –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
                        f"State: {current_state}\n"
                        f"Waiting for: {waiting_for}\n\n"
                        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É /order"
                    )
                
                logger.info(f"üìç WebApp location processed: {latitude}, {longitude} -> {address}")
                
        except json.JSONDecodeError as e:
            logger.error("=" * 60)
            logger.error("‚ùå JSON DECODE ERROR")
            logger.error("=" * 60)
            logger.error(f"Error: {e}")
            logger.error(f"Raw data that failed: '{message.web_app_data.data}'")
            logger.error("=" * 60)
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∏ (–Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON)")
        except Exception as e:
            logger.error("=" * 60)
            logger.error("‚ùå EXCEPTION in WebApp handler")
            logger.error("=" * 60)
            logger.error(f"Exception type: {type(e).__name__}")
            logger.error(f"Exception message: {e}", exc_info=True)
            logger.error("=" * 60)
            await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    return router
