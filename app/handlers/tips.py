"""–ß–∞–π–æ–≤—ñ –¥–ª—è –≤–æ–¥—ñ—ó–≤"""
from __future__ import annotations

import logging
from datetime import datetime, timezone

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from app.config.config import AppConfig
from app.storage.db import get_order_by_id, add_tip_to_order, get_driver_by_id

logger = logging.getLogger(__name__)


def create_router(config: AppConfig) -> Router:
    router = Router(name="tips")

    @router.callback_query(F.data.startswith("tip:show:"))
    async def show_tip_options(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–∞–π–æ–≤–∏—Ö"""
        if not call.from_user:
            return
        
        order_id = int(call.data.split(":", 2)[2])
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if order.status != "completed":
            await call.answer("‚ùå –ú–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —á–∞–π–æ–≤—ñ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ –∑–∞–ª–∏—à–µ–Ω—ñ —á–∞–π–æ–≤—ñ
        if hasattr(order, 'tip_amount') and order.tip_amount and order.tip_amount > 0:
            await call.answer(f"‚úÖ –í–∏ –≤–∂–µ –∑–∞–ª–∏—à–∏–ª–∏ —á–∞–π–æ–≤—ñ {order.tip_amount:.0f} –≥—Ä–Ω", show_alert=True)
            return
        
        await call.answer()
        
        # –í–∞—Ä—ñ–∞–Ω—Ç–∏ —á–∞–π–æ–≤–∏—Ö
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíµ 10 –≥—Ä–Ω", callback_data=f"tip:add:{order_id}:10"),
                    InlineKeyboardButton(text="üíµ 20 –≥—Ä–Ω", callback_data=f"tip:add:{order_id}:20"),
                ],
                [
                    InlineKeyboardButton(text="üíµ 50 –≥—Ä–Ω", callback_data=f"tip:add:{order_id}:50"),
                    InlineKeyboardButton(text="üíµ 100 –≥—Ä–Ω", callback_data=f"tip:add:{order_id}:100"),
                ],
                [InlineKeyboardButton(text="üí∞ –°–≤–æ—è —Å—É–º–∞", callback_data=f"tip:custom:{order_id}")],
                [InlineKeyboardButton(text="‚ùå –ë–µ–∑ —á–∞–π–æ–≤–∏—Ö", callback_data=f"tip:skip:{order_id}")]
            ]
        )
        
        await call.message.answer(
            "üíù <b>–ó–∞–ª–∏—à–∏—Ç–∏ —á–∞–π–æ–≤—ñ –≤–æ–¥—ñ—é?</b>\n\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏: {order.fare_amount:.2f} –≥—Ä–Ω\n\n"
            "üí° <i>–ß–∞–π–æ–≤—ñ –π–¥—É—Ç—å –≤–æ–¥—ñ—é –ø–æ–≤–Ω—ñ—Å—Ç—é (–±–µ–∑ –∫–æ–º—ñ—Å—ñ—ó)</i>",
            reply_markup=kb
        )

    @router.callback_query(F.data.startswith("tip:add:"))
    async def add_tip(call: CallbackQuery) -> None:
        """–î–æ–¥–∞—Ç–∏ —á–∞–π–æ–≤—ñ"""
        if not call.from_user:
            return
        
        parts = call.data.split(":")
        order_id = int(parts[2])
        tip_amount = float(parts[3])
        
        order = await get_order_by_id(config.database_path, order_id)
        
        if not order or order.user_id != call.from_user.id:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
            return
        
        # –î–æ–¥–∞—Ç–∏ —á–∞–π–æ–≤—ñ
        success = await add_tip_to_order(config.database_path, order_id, tip_amount)
        
        if success:
            await call.answer(f"‚úÖ –î—è–∫—É—î–º–æ! –ß–∞–π–æ–≤—ñ {tip_amount:.0f} –≥—Ä–Ω –¥–æ–¥–∞–Ω–æ", show_alert=True)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è
            if order.driver_id:
                driver = await get_driver_by_id(config.database_path, order.driver_id)
                if driver:
                    try:
                        await call.bot.send_message(
                            driver.tg_user_id,
                            f"üíù <b>–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —á–∞–π–æ–≤—ñ!</b>\n\n"
                            f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                            f"üí∞ –°—É–º–∞: {tip_amount:.0f} –≥—Ä–Ω\n\n"
                            f"–î—è–∫—É—î–º–æ –∑–∞ —á—É–¥–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å! ‚≠êÔ∏è"
                        )
                    except Exception as e:
                        logger.error(f"Failed to notify driver about tip: {e}")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await call.message.edit_text(
                f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ —á–∞–π–æ–≤—ñ!</b>\n\n"
                f"üí∞ –°—É–º–∞: {tip_amount:.0f} –≥—Ä–Ω\n"
                f"üöó –í–æ–¥—ñ–π –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
            )
        else:
            await call.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∞–π–æ–≤–∏—Ö", show_alert=True)

    @router.callback_query(F.data.startswith("tip:skip:"))
    async def skip_tip(call: CallbackQuery) -> None:
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —á–∞–π–æ–≤—ñ"""
        await call.answer()
        await call.message.edit_text("üëå –î–æ–±—Ä–µ, –¥—è–∫—É—î–º–æ –∑–∞ –ø–æ—ó–∑–¥–∫—É!")

    @router.callback_query(F.data.startswith("tip:custom:"))
    async def custom_tip(call: CallbackQuery) -> None:
        """–í–ª–∞—Å–Ω–∞ —Å—É–º–∞ —á–∞–π–æ–≤–∏—Ö"""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ FSM –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏
        await call.answer(
            "üí° –ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º—É —á–∞–π–æ–≤–∏—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 30)\n"
            "–ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è",
            show_alert=True
        )

    return router
