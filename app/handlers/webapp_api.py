"""
API endpoint –¥–ª—è WebApp –∫–∞—Ä—Ç–∏
–ü—Ä–∏–π–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –≤ FSM state –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""
from __future__ import annotations

import logging
from typing import Optional

from aiohttp import web
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from app.config.config import AppConfig
from app.utils.maps import reverse_geocode

logger = logging.getLogger(__name__)


async def webapp_location_handler(request: web.Request) -> web.Response:
    """
    API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ WebApp –∫–∞—Ä—Ç–∏
    
    POST /api/webapp/location
    Body: {
        "user_id": 123456,
        "latitude": 50.4501,
        "longitude": 30.5234,
        "type": "pickup" –∞–±–æ "destination"
    }
    """
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
        data = await request.json()
        
        user_id = data.get('user_id')
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        location_type = data.get('type')  # 'pickup' –∞–±–æ 'destination'
        
        logger.info("=" * 80)
        logger.info(f"üåê API: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ WebApp")
        logger.info(f"  - user_id: {user_id}")
        logger.info(f"  - latitude: {latitude}")
        logger.info(f"  - longitude: {longitude}")
        logger.info(f"  - type: {location_type}")
        logger.info("=" * 80)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not user_id or not latitude or not longitude or not location_type:
            logger.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
            return web.json_response(
                {"success": False, "error": "Missing required parameters"},
                status=400
            )
        
        if location_type not in ['pickup', 'destination']:
            logger.error(f"‚ùå API: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –ª–æ–∫–∞—Ü—ñ—ó: {location_type}")
            return web.json_response(
                {"success": False, "error": "Invalid location type"},
                status=400
            )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ reverse geocoding
        logger.info(f"üåç API: –í–∏–∫–æ–Ω—É—é reverse geocoding...")
        address = await reverse_geocode("", latitude, longitude)
        if not address:
            address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
        logger.info(f"‚úÖ API: –ê–¥—Ä–µ—Å–∞: {address}")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ bot —ñ storage
        bot: Bot = request.app['bot']
        storage = request.app['storage']  # storage –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ storage key –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        storage_key = StorageKey(
            bot_id=bot.id,
            chat_id=user_id,
            user_id=user_id
        )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π FSM context
        state = FSMContext(storage=storage, key=storage_key)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ state
        if location_type == 'pickup':
            await state.update_data(
                pickup=address,
                pickup_lat=latitude,
                pickup_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Pickup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        else:  # destination
            await state.update_data(
                destination=address,
                dest_lat=latitude,
                dest_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Destination –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ last_message_id –∑ state
            data = await state.get_data()
            last_message_id = data.get('last_message_id')
            
            if location_type == 'pickup':
                from app.handlers.order import OrderStates
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
                
                await state.set_state(OrderStates.destination)
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É destination
                from app.storage.db import get_user_saved_addresses
                saved_addresses = await get_user_saved_addresses(request.app['config'].database_path, user_id)
                
                kb_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç–∏
                if request.app['config'].webapp_url:
                    await state.update_data(waiting_for='destination')
                    kb_buttons.append([
                        InlineKeyboardButton(
                            text="üó∫ –û–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ (–∑ –ø–æ—à—É–∫–æ–º)",
                            web_app=WebAppInfo(url=f"{request.app['config'].webapp_url}?type=destination")
                        )
                    ])
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω—ñ
                if saved_addresses:
                    kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
                
                # –ù–∞–∑–∞–¥ + –°–∫–∞—Å—É–≤–∞—Ç–∏
                kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
                kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
                
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                                f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                                f"üó∫ <b>–ö–∞—Ä—Ç–∞ –∑ –ø–æ—à—É–∫–æ–º</b> - –∑–Ω–∞–π–¥—ñ—Ç—å –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É\n"
                                f"üìå <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ</b> - —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä\n\n"
                                f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        msg = await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                            f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                            f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                        await state.update_data(last_message_id=msg.message_id)
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î last_message_id, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
                    msg = await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                        f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                        f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                    await state.update_data(last_message_id=msg.message_id)
            else:  # destination
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è destination
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                                f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        msg = await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                            f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                            parse_mode="HTML"
                        )
                        last_message_id = msg.message_id
                        await state.update_data(last_message_id=last_message_id)
                else:
                    msg = await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                        f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                        parse_mode="HTML"
                    )
                    last_message_id = msg.message_id
                    await state.update_data(last_message_id=last_message_id)
                
                # –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                from app.utils.maps import get_distance_and_duration
                from app.storage.db import get_latest_tariff, get_pricing_settings, get_online_drivers_count, get_user_by_id
                from app.handlers.car_classes import calculate_fare_with_class, get_car_class_name, CAR_CLASSES
                from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ pickup –∑ state
                data = await state.get_data()
                pickup_lat = data.get("pickup_lat")
                pickup_lon = data.get("pickup_lon")
                
                # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
                distance_km = None
                duration_minutes = None
                
                if pickup_lat and pickup_lon and latitude and longitude:
                    logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({latitude},{longitude})")
                    result = await get_distance_and_duration("", pickup_lat, pickup_lon, latitude, longitude)
                    if result:
                        distance_m, duration_s = result
                        distance_km = distance_m / 1000.0
                        duration_minutes = duration_s / 60.0
                        await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
                        logger.info(f"‚úÖ –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º, —á–∞—Å: {duration_minutes:.0f} —Ö–≤")
                
                if not distance_km:
                    distance_km = 5.0
                    duration_minutes = 15
                    await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ
                tariff = await get_latest_tariff(request.app['config'].database_path)
                if not tariff:
                    await bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.", parse_mode="HTML")
                    return web.json_response({"success": False, "error": "Tariff not configured"}, status=500)
                
                # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ
                base_fare = max(
                    tariff.minimum,
                    tariff.base_fare + (distance_km * tariff.per_km) + (duration_minutes * tariff.per_minute)
                )
                
                # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
                pricing = await get_pricing_settings(request.app['config'].database_path)
                if pricing is None:
                    from app.storage.db import PricingSettings
                    pricing = PricingSettings()
                
                custom_multipliers = {
                    "economy": pricing.economy_multiplier,
                    "standard": pricing.standard_multiplier,
                    "comfort": pricing.comfort_multiplier,
                    "business": pricing.business_multiplier
                }
                
                # –ú—ñ—Å—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞
                user = await get_user_by_id(request.app['config'].database_path, user_id)
                client_city = user.city if user and user.city else None
                online_count = await get_online_drivers_count(request.app['config'].database_path, client_city)
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å–∏ –∑ —Ü—ñ–Ω–∞–º–∏
                from app.handlers.order import OrderStates
                await state.set_state(OrderStates.car_class)
                await state.update_data(base_fare=base_fare)
                
                kb_buttons = []
                for car_class_id, car_class_data in CAR_CLASSES.items():
                    class_fare = calculate_fare_with_class(base_fare, car_class_id, custom_multipliers)
                    final_fare, explanation, surge_mult = await calculate_dynamic_price(class_fare, client_city, online_count, 0)
                    
                    surge_emoji = get_surge_emoji(surge_mult)
                    class_name = get_car_class_name(car_class_id)  # –í–∂–µ –º—ñ—Å—Ç–∏—Ç—å –µ–º–æ–¥–∂—ñ + –Ω–∞–∑–≤—É
                    
                    button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω"
                    if surge_mult != 1.0:
                        button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω {surge_emoji}"
                    
                    kb_buttons.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"select_class:{car_class_id}"
                    )])
                
                kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
                kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
                
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞—Å–∞–º–∏
                pickup_address = data.get('pickup', 'üìç –ù–µ –≤–∫–∞–∑–∞–Ω–æ')
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b> {pickup_address}\n"
                                f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b> {address}\n\n"
                                f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                                f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                                f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b> {pickup_address}\n"
                            f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b> {address}\n\n"
                            f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                            f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                            f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                else:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b> {pickup_address}\n"
                        f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b> {address}\n\n"
                        f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                        f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                        f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                
            logger.info(f"‚úÖ API: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        except Exception as e:
            logger.error(f"‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—Ö—É
        return web.json_response({
            "success": True,
            "address": address,
            "message": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        })
        
    except Exception as e:
        logger.error(f"‚ùå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"üìú Traceback:", exc_info=True)
        return web.json_response(
            {"success": False, "error": str(e)},
            status=500
        )


def setup_webapp_api(app: web.Application, bot: Bot, config: AppConfig, storage) -> None:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ API endpoints –¥–ª—è WebApp
    """
    # –ó–±–µ—Ä–µ–≥—Ç–∏ bot, storage —ñ config –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ handlers
    app['bot'] = bot
    app['config'] = config
    app['storage'] = storage
    
    # –î–æ–¥–∞—Ç–∏ route
    app.router.add_post('/api/webapp/location', webapp_location_handler)
    
    logger.info("üåê API endpoint registered: POST /api/webapp/location")
