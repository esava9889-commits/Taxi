"""
API endpoint –¥–ª—è WebApp –∫–∞—Ä—Ç–∏
–ü—Ä–∏–π–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –≤ FSM state –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""
from __future__ import annotations

import logging
from typing import Optional

from aiohttp import web
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from app.config.config import AppConfig
from app.utils.maps import reverse_geocode

logger = logging.getLogger(__name__)


async def webapp_location_handler(request: web.Request) -> web.Response:
    """
    API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ WebApp –∫–∞—Ä—Ç–∏
    
    POST /api/webapp/location
    Body: {
        "user_id": 123456,
        "latitude": 50.4501,
        "longitude": 30.5234,
        "type": "pickup" –∞–±–æ "destination"
    }
    """
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
        data = await request.json()
        
        user_id = data.get('user_id')
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        location_type = data.get('type')  # 'pickup' –∞–±–æ 'destination'
        
        logger.info("=" * 80)
        logger.info(f"üåê API: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ WebApp")
        logger.info(f"  - user_id: {user_id}")
        logger.info(f"  - latitude: {latitude}")
        logger.info(f"  - longitude: {longitude}")
        logger.info(f"  - type: {location_type}")
        logger.info("=" * 80)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not user_id or not latitude or not longitude or not location_type:
            logger.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
            return web.json_response(
                {"success": False, "error": "Missing required parameters"},
                status=400
            )
        
        if location_type not in ['pickup', 'destination']:
            logger.error(f"‚ùå API: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –ª–æ–∫–∞—Ü—ñ—ó: {location_type}")
            return web.json_response(
                {"success": False, "error": "Invalid location type"},
                status=400
            )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ reverse geocoding
        logger.info(f"üåç API: –í–∏–∫–æ–Ω—É—é reverse geocoding...")
        address = await reverse_geocode("", latitude, longitude)
        if not address:
            address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
        logger.info(f"‚úÖ API: –ê–¥—Ä–µ—Å–∞: {address}")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ bot —ñ storage
        bot: Bot = request.app['bot']
        storage = bot.fsm.storage
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ storage key –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        storage_key = StorageKey(
            bot_id=bot.id,
            chat_id=user_id,
            user_id=user_id
        )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π FSM context
        state = FSMContext(storage=storage, key=storage_key)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ state
        if location_type == 'pickup':
            await state.update_data(
                pickup=address,
                pickup_lat=latitude,
                pickup_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Pickup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        else:  # destination
            await state.update_data(
                destination=address,
                dest_lat=latitude,
                dest_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Destination –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            if location_type == 'pickup':
                from app.handlers.order import OrderStates
                await state.set_state(OrderStates.destination)
                
                await bot.send_message(
                    user_id,
                    f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                    f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                    f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                    parse_mode="HTML"
                )
            else:  # destination
                await bot.send_message(
                    user_id,
                    f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                    f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                    parse_mode="HTML"
                )
                
                # –í–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ
                # (—Ü–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∫—Ä–æ—Ü—ñ)
                
            logger.info(f"‚úÖ API: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        except Exception as e:
            logger.error(f"‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—Ö—É
        return web.json_response({
            "success": True,
            "address": address,
            "message": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        })
        
    except Exception as e:
        logger.error(f"‚ùå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"üìú Traceback:", exc_info=True)
        return web.json_response(
            {"success": False, "error": str(e)},
            status=500
        )


def setup_webapp_api(app: web.Application, bot: Bot, config: AppConfig) -> None:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ API endpoints –¥–ª—è WebApp
    """
    # –ó–±–µ—Ä–µ–≥—Ç–∏ bot –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ handlers
    app['bot'] = bot
    app['config'] = config
    
    # –î–æ–¥–∞—Ç–∏ route
    app.router.add_post('/api/webapp/location', webapp_location_handler)
    
    logger.info("üåê API endpoint registered: POST /api/webapp/location")
