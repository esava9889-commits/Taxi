"""
API endpoint –¥–ª—è WebApp –∫–∞—Ä—Ç–∏
–ü—Ä–∏–π–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –≤ FSM state –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""
from __future__ import annotations

import logging
from typing import Optional

import json
import aiohttp
from aiohttp import web
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey

from app.config.config import AppConfig
from app.utils.maps import reverse_geocode, _wait_for_nominatim

logger = logging.getLogger(__name__)


def validate_coordinates(lat: float, lon: float) -> bool:
    """
    –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    
    Args:
        lat: –®–∏—Ä–æ—Ç–∞
        lon: –î–æ–≤–≥–æ—Ç–∞
    
    Returns:
        True —è–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ, False —ñ–Ω–∞–∫—à–µ
    """
    if not isinstance(lat, (int, float)) or not isinstance(lon, (int, float)):
        return False
    return -90 <= lat <= 90 and -180 <= lon <= 180


async def webapp_location_handler(request: web.Request) -> web.Response:
    """
    ‚ö†Ô∏è DEPRECATED: –¶–µ–π endpoint –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è!
    
    –ó–∞–º—ñ—Å—Ç—å –Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ webapp_order_handler (/api/webapp/order),
    —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±–∏–¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–¥—Ä–∞–∑—É (pickup + destination).
    
    –°—Ç–∞—Ä–∏–π API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–µ—Ç–∞–ø–Ω–æ.
    
    POST /api/webapp/location (DEPRECATED)
    Body: {
        "user_id": 123456,
        "latitude": 50.4501,
        "longitude": 30.5234,
        "type": "pickup" –∞–±–æ "destination"
    }
    """
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
        data = await request.json()
        
        user_id = data.get('user_id')
        latitude = data.get('latitude')
        longitude = data.get('longitude')
        location_type = data.get('type')  # 'pickup' –∞–±–æ 'destination'
        
        logger.info("=" * 80)
        logger.info(f"üåê API: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ WebApp")
        logger.info(f"  - user_id: {user_id}")
        logger.info(f"  - latitude: {latitude}")
        logger.info(f"  - longitude: {longitude}")
        logger.info(f"  - type: {location_type}")
        logger.info("=" * 80)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if not user_id or latitude is None or longitude is None or not location_type:
            logger.error("‚ùå API: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
            return web.json_response(
                {"success": False, "error": "Missing required parameters"},
                status=400
            )
        
        if location_type not in ['pickup', 'destination']:
            logger.error(f"‚ùå API: –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –ª–æ–∫–∞—Ü—ñ—ó: {location_type}")
            return web.json_response(
                {"success": False, "error": "Invalid location type"},
                status=400
            )
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not validate_coordinates(latitude, longitude):
            logger.error(f"‚ùå API: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: lat={latitude}, lon={longitude}")
            return web.json_response(
                {"success": False, "error": "Invalid coordinates (must be -90<=lat<=90, -180<=lon<=180)"},
                status=400
            )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ reverse geocoding
        logger.info(f"üåç API: –í–∏–∫–æ–Ω—É—é reverse geocoding...")
        address = await reverse_geocode("", latitude, longitude)
        if not address:
            address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
        logger.info(f"‚úÖ API: –ê–¥—Ä–µ—Å–∞: {address}")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ bot —ñ storage
        bot: Bot = request.app['bot']
        storage = request.app['storage']  # storage –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ storage key –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        storage_key = StorageKey(
            bot_id=bot.id,
            chat_id=user_id,
            user_id=user_id
        )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π FSM context
        state = FSMContext(storage=storage, key=storage_key)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ state
        if location_type == 'pickup':
            await state.update_data(
                pickup=address,
                pickup_lat=latitude,
                pickup_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Pickup –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        else:  # destination
            await state.update_data(
                destination=address,
                dest_lat=latitude,
                dest_lon=longitude,
                waiting_for=None
            )
            logger.info(f"‚úÖ API: Destination –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ state –¥–ª—è user {user_id}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ last_message_id –∑ state
            data = await state.get_data()
            last_message_id = data.get('last_message_id')
            
            if location_type == 'pickup':
                from app.handlers.order import OrderStates
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
                
                await state.set_state(OrderStates.destination)
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É destination
                from app.storage.db import get_user_saved_addresses
                saved_addresses = await get_user_saved_addresses(request.app['config'].database_path, user_id)
                
                kb_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç–∏ –∑ –ø–µ—Ä–µ–¥–∞—á–µ—é pickup –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if request.app['config'].webapp_url:
                    await state.update_data(waiting_for='destination')
                    # –ü–µ—Ä–µ–¥–∞—Ç–∏ pickup –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
                    data = await state.get_data()
                    pickup_lat = data.get('pickup_lat')
                    pickup_lon = data.get('pickup_lon')
                    url = f"{request.app['config'].webapp_url}?type=destination"
                    if pickup_lat and pickup_lon:
                        url += f"&pickup_lat={pickup_lat}&pickup_lon={pickup_lon}"
                    kb_buttons.append([
                        InlineKeyboardButton(
                            text="üó∫ –û–±—Ä–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ (–∑ –ø–æ—à—É–∫–æ–º)",
                            web_app=WebAppInfo(url=url)
                        )
                    ])
                
                # –ó–±–µ—Ä–µ–∂–µ–Ω—ñ
                if saved_addresses:
                    kb_buttons.append([InlineKeyboardButton(text="üìå –í–∏–±—Ä–∞—Ç–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö", callback_data="order:dest:saved")])
                
                # –ù–∞–∑–∞–¥ + –°–∫–∞—Å—É–≤–∞—Ç–∏
                kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:back:pickup")])
                kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
                
                kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
                
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                                f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                                f"üó∫ <b>–ö–∞—Ä—Ç–∞ –∑ –ø–æ—à—É–∫–æ–º</b> - –∑–Ω–∞–π–¥—ñ—Ç—å –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É\n"
                                f"üìå <b>–ó–±–µ—Ä–µ–∂–µ–Ω—ñ</b> - —à–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä\n\n"
                                f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        # –Ø–∫—â–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        msg = await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                            f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                            f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                        await state.update_data(last_message_id=msg.message_id)
                else:
                    # –Ø–∫—â–æ –Ω–µ–º–∞—î last_message_id, —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ
                    msg = await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\nüìç {address}\n\n"
                        f"üìç <b>–ö—É–¥–∏ —ó–¥–µ–º–æ?</b>\n\n"
                        f"üí° –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–±:",
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                    await state.update_data(last_message_id=msg.message_id)
            else:  # destination
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è destination
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                                f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        msg = await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                            f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                            parse_mode="HTML"
                        )
                        last_message_id = msg.message_id
                        await state.update_data(last_message_id=last_message_id)
                else:
                    msg = await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\nüìç {address}\n\n"
                        f"‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏...",
                        parse_mode="HTML"
                    )
                    last_message_id = msg.message_id
                    await state.update_data(last_message_id=last_message_id)
                
                # –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                from app.utils.maps import get_distance_and_duration
                from app.storage.db import get_latest_tariff, get_pricing_settings, get_online_drivers_count, get_user_by_id
                from app.handlers.car_classes import calculate_base_fare, calculate_fare_with_class, get_car_class_name, CAR_CLASSES
                from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
                from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ pickup –∑ state
                data = await state.get_data()
                pickup_lat = data.get("pickup_lat")
                pickup_lon = data.get("pickup_lon")
                
                # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
                distance_km = None
                duration_minutes = None
                
                if pickup_lat and pickup_lon and latitude and longitude:
                    logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({latitude},{longitude})")
                    result = await get_distance_and_duration("", pickup_lat, pickup_lon, latitude, longitude)
                    if result:
                        distance_m, duration_s = result
                        distance_km = distance_m / 1000.0
                        duration_minutes = duration_s / 60.0
                        await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
                        logger.info(f"‚úÖ –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º, —á–∞—Å: {duration_minutes:.0f} —Ö–≤")
                
                if not distance_km:
                    # –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
                    logger.error(f"‚ùå OSRM –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è user {user_id}: ({pickup_lat},{pickup_lon}) ‚Üí ({latitude},{longitude})")
                    await bot.send_message(
                        user_id,
                        "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å</b>\n\n"
                        "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "‚Ä¢ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ\n"
                        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è\n"
                        "‚Ä¢ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n\n"
                        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /order —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É",
                        parse_mode="HTML"
                    )
                    return web.json_response(
                        {"success": False, "error": "Could not calculate distance between points"},
                        status=400
                    )
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ
                tariff = await get_latest_tariff(request.app['config'].database_path)
                if not tariff:
                    await bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.", parse_mode="HTML")
                    return web.json_response({"success": False, "error": "Tariff not configured"}, status=500)
                
                # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ helper —Ñ—É–Ω–∫—Ü—ñ—é)
                base_fare = calculate_base_fare(tariff, distance_km, duration_minutes)
                
                # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
                pricing = await get_pricing_settings(request.app['config'].database_path)
                if pricing is None:
                    from app.storage.db import PricingSettings
                    pricing = PricingSettings()
                
                custom_multipliers = {
                    "economy": pricing.economy_multiplier,
                    "standard": pricing.standard_multiplier,
                    "comfort": pricing.comfort_multiplier,
                    "business": pricing.business_multiplier
                }
                
                # –ú—ñ—Å—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞
                user = await get_user_by_id(request.app['config'].database_path, user_id)
                client_city = user.city if user and user.city else None
                online_count = await get_online_drivers_count(request.app['config'].database_path, client_city)
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å pending orders –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–ø–∏—Ç—É
                from app.storage.db import get_pending_orders
                pending_orders = await get_pending_orders(request.app['config'].database_path, client_city)
                pending_count = len(pending_orders)
                
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞—Å–∏ –∑ —Ü—ñ–Ω–∞–º–∏
                from app.handlers.order import OrderStates
                await state.set_state(OrderStates.car_class)
                await state.update_data(base_fare=base_fare)
                
                kb_buttons = []
                for car_class_id, car_class_data in CAR_CLASSES.items():
                    class_fare = calculate_fare_with_class(base_fare, car_class_id, custom_multipliers)
                    
                    # –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (—è–∫ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É!)
                    final_fare, explanation, surge_mult = await calculate_dynamic_price(
                        class_fare, client_city, online_count, pending_count,
                        pricing.night_percent, pricing.weather_percent,
                        pricing.peak_hours_percent, pricing.weekend_percent,
                        pricing.monday_morning_percent, pricing.no_drivers_percent,
                        pricing.demand_very_high_percent, pricing.demand_high_percent,
                        pricing.demand_medium_percent, pricing.demand_low_discount_percent
                    )
                    
                    surge_emoji = get_surge_emoji(surge_mult)
                    class_name = get_car_class_name(car_class_id)  # –í–∂–µ –º—ñ—Å—Ç–∏—Ç—å –µ–º–æ–¥–∂—ñ + –Ω–∞–∑–≤—É
                    
                    button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω"
                    if surge_mult != 1.0:
                        button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω {surge_emoji}"
                    
                    kb_buttons.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"select_class:{car_class_id}"
                    )])
                
                kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
                kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
                
                # –†–ï–î–ê–ì–£–í–ê–¢–ò –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞—Å–∞–º–∏
                pickup_address = data.get('pickup', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
                if last_message_id:
                    try:
                        await bot.edit_message_text(
                            chat_id=user_id,
                            message_id=last_message_id,
                            text=f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n{pickup_address}\n\n"
                                f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n{address}\n\n"
                                f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                                f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                                f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        await bot.send_message(
                            user_id,
                            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n{pickup_address}\n\n"
                            f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n{address}\n\n"
                            f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                            f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                            f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                            reply_markup=kb,
                            parse_mode="HTML"
                        )
                else:
                    await bot.send_message(
                        user_id,
                        f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n{pickup_address}\n\n"
                        f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n{address}\n\n"
                        f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
                        f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
                        f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>",
                        reply_markup=kb,
                        parse_mode="HTML"
                    )
                
            logger.info(f"‚úÖ API: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        except Exception as e:
            logger.error(f"‚ùå API: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—Ö—É
        return web.json_response({
            "success": True,
            "address": address,
            "message": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
        })
        
    except Exception as e:
        logger.error(f"‚ùå API: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"üìú Traceback:", exc_info=True)
        return web.json_response(
            {"success": False, "error": str(e)},
            status=500
        )


async def webapp_order_handler(request: web.Request) -> web.Response:
    """
    –ù–û–í–ò–ô API: –ü—Ä–∏–π–º–∞—î –æ–±–∏–¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–¥—Ä–∞–∑—É (pickup + destination)
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–¥—Å—Ç–∞–Ω—å —ñ –ø–æ–∫–∞–∑—É—î –∫–ª–∞—Å–∏ –∞–≤—Ç–æ
    """
    try:
        bot = request.app['bot']
        config = request.app['config']
        storage = request.app['storage']
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ
        data = await request.json()
        user_id = data.get('user_id')
        pickup_lat = data.get('pickup_lat')
        pickup_lon = data.get('pickup_lon')
        dest_lat = data.get('dest_lat')
        dest_lon = data.get('dest_lon')
        
        logger.info("=" * 80)
        logger.info("üåê API ORDER: –û—Ç—Ä–∏–º–∞–Ω–æ –æ–±–∏–¥–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏")
        logger.info(f"  - user_id: {user_id}")
        logger.info(f"  - pickup: {pickup_lat}, {pickup_lon}")
        logger.info(f"  - destination: {dest_lat}, {dest_lon}")
        logger.info("=" * 80)
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not validate_coordinates(pickup_lat, pickup_lon):
            logger.error(f"‚ùå API ORDER: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ pickup –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {pickup_lat}, {pickup_lon}")
            return web.json_response(
                {"success": False, "error": "Invalid pickup coordinates"},
                status=400
            )
        
        if not validate_coordinates(dest_lat, dest_lon):
            logger.error(f"‚ùå API ORDER: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ destination –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {dest_lat}, {dest_lon}")
            return web.json_response(
                {"success": False, "error": "Invalid destination coordinates"},
                status=400
            )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ FSM context
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.storage.base import StorageKey
        
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)
        
        # Reverse geocoding –¥–ª—è –æ–±–æ—Ö —Ç–æ—á–æ–∫
        from app.utils.maps import reverse_geocode
        logger.info("üåç API: –í–∏–∫–æ–Ω—É—é reverse geocoding...")
        
        pickup_address = await reverse_geocode("", pickup_lat, pickup_lon)
        if not pickup_address:
            pickup_address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {pickup_lat:.6f}, {pickup_lon:.6f}"
        
        dest_address = await reverse_geocode("", dest_lat, dest_lon)
        if not dest_address:
            dest_address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {dest_lat:.6f}, {dest_lon:.6f}"
        
        logger.info(f"‚úÖ Pickup: {pickup_address}")
        logger.info(f"‚úÖ Destination: {dest_address}")
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ state
        from app.handlers.order import OrderStates
        await state.set_state(OrderStates.car_class)
        await state.update_data(
            pickup=pickup_address,
            pickup_lat=pickup_lat,
            pickup_lon=pickup_lon,
            destination=dest_address,
            dest_lat=dest_lat,
            dest_lon=dest_lon,
            waiting_for=None
        )
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –ü–†–ê–í–ò–õ–¨–ù–û (—Ç—É—Ç!)
        from app.utils.maps import get_distance_and_duration
        distance_km = None
        duration_minutes = None
        
        logger.info(f"üìè –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤—ñ–¥—Å—Ç–∞–Ω—å: ({pickup_lat},{pickup_lon}) ‚Üí ({dest_lat},{dest_lon})")
        result = await get_distance_and_duration("", pickup_lat, pickup_lon, dest_lat, dest_lon)
        if result:
            distance_m, duration_s = result
            distance_km = distance_m / 1000.0
            duration_minutes = duration_s / 60.0
            await state.update_data(distance_km=distance_km, duration_minutes=duration_minutes)
            logger.info(f"‚úÖ –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º, —á–∞—Å: {duration_minutes:.0f} —Ö–≤")
        
        if not distance_km:
            # –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å
            logger.error(f"‚ùå OSRM –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è user {user_id}: ({pickup_lat},{pickup_lon}) ‚Üí ({dest_lat},{dest_lon})")
            await bot.send_message(
                user_id,
                "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å</b>\n\n"
                "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ\n"
                "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è\n"
                "‚Ä¢ –ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏\n\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /order —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É",
                parse_mode="HTML"
            )
            return web.json_response(
                {"success": False, "error": "Could not calculate distance between points"},
                status=400
            )
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü—ñ–Ω–∏ –¥–ª—è –∫–ª–∞—Å—ñ–≤
        from app.storage.db import get_latest_tariff, get_pricing_settings, get_online_drivers_count, get_user_by_id
        from app.handlers.car_classes import calculate_base_fare, calculate_fare_with_class, get_car_class_name, CAR_CLASSES
        from app.handlers.dynamic_pricing import calculate_dynamic_price, get_surge_emoji
        from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
        
        tariff = await get_latest_tariff(config.database_path)
        if not tariff:
            await bot.send_message(user_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.", parse_mode="HTML")
            return web.json_response({"success": False, "error": "Tariff not configured"}, status=500)
        
        # –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ helper —Ñ—É–Ω–∫—Ü—ñ—é)
        base_fare = calculate_base_fare(tariff, distance_km, duration_minutes)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è
        pricing = await get_pricing_settings(config.database_path)
        if pricing is None:
            from app.storage.db import PricingSettings
            pricing = PricingSettings()
            logger.warning("‚ö†Ô∏è PricingSettings not found in DB, using defaults")
        else:
            logger.info(f"‚úÖ PricingSettings loaded: night={pricing.night_percent}%, peak={pricing.peak_hours_percent}%, weather={pricing.weather_percent}%")
        
        custom_multipliers = {
            "economy": pricing.economy_multiplier,
            "standard": pricing.standard_multiplier,
            "comfort": pricing.comfort_multiplier,
            "business": pricing.business_multiplier
        }
        
        # –ú—ñ—Å—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞
        user = await get_user_by_id(config.database_path, user_id)
        client_city = user.city if user and user.city else None
        online_count = await get_online_drivers_count(config.database_path, client_city)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ base_fare
        await state.update_data(base_fare=base_fare)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å pending orders –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø–æ–ø–∏—Ç—É
        from app.storage.db import get_pending_orders
        pending_orders = await get_pending_orders(config.database_path, client_city)
        pending_count = len(pending_orders)
        
        logger.info(f"üìä Pricing context: city={client_city}, online_drivers={online_count}, pending_orders={pending_count}")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∑ –∫–ª–∞—Å–∞–º–∏
        kb_buttons = []
        for car_class_id, car_class_data in CAR_CLASSES.items():
            class_fare = calculate_fare_with_class(base_fare, car_class_id, custom_multipliers)
            
            # –ü–†–ê–í–ò–õ–¨–ù–ò–ô —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            final_fare, explanation, surge_mult = await calculate_dynamic_price(
                class_fare, client_city, online_count, pending_count,
                pricing.night_percent, pricing.weather_percent,
                pricing.peak_hours_percent, pricing.weekend_percent,
                pricing.monday_morning_percent, pricing.no_drivers_percent,
                pricing.demand_very_high_percent, pricing.demand_high_percent,
                pricing.demand_medium_percent, pricing.demand_low_discount_percent
            )
            
            surge_emoji = get_surge_emoji(surge_mult)
            class_name = get_car_class_name(car_class_id)
            
            button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω"
            if surge_mult != 1.0:
                button_text = f"{class_name}: {final_fare:.0f} –≥—Ä–Ω {surge_emoji}"
            
            kb_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"select_class:{car_class_id}"
            )])
        
        kb_buttons.append([InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ last_message_id —ñ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        data_state = await state.get_data()
        last_message_id = data_state.get('last_message_id')
        
        msg_text = (
            f"‚úÖ <b>–ú—ñ—Å—Ü–µ –ø–æ–¥–∞—á—ñ:</b>\n{pickup_address}\n\n"
            f"‚úÖ <b>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</b>\n{dest_address}\n\n"
            f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {distance_km:.1f} –∫–º\n"
            f"‚è± –ß–∞—Å –≤ –¥–æ—Ä–æ–∑—ñ: ~{int(duration_minutes)} —Ö–≤\n\n"
            f"üöó <b>–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>"
        )
        
        if last_message_id:
            try:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=last_message_id,
                    text=msg_text,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏: {e}")
                await bot.send_message(user_id, msg_text, reply_markup=kb, parse_mode="HTML")
        else:
            await bot.send_message(user_id, msg_text, reply_markup=kb, parse_mode="HTML")
        
        logger.info("‚úÖ API ORDER: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return web.json_response({
            "success": True,
            "pickup_address": pickup_address,
            "dest_address": dest_address,
            "distance_km": distance_km,
            "duration_minutes": int(duration_minutes)
        })
        
    except Exception as e:
        logger.error(f"‚ùå API ORDER: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(f"üìú Traceback:", exc_info=True)
        return web.json_response({"success": False, "error": str(e)}, status=500)

NOMINATIM_SEARCH_URL = "https://nominatim.openstreetmap.org/search"
NOMINATIM_USER_AGENT = "TaxiBot WebApp/1.0 (support@taxi-bot.example)"


async def webapp_geocode_proxy(request: web.Request) -> web.Response:
    """Proxy –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Nominatim –∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –±–æ–∫—É (—ñ–∑ User-Agent —Ç–∞ rate limit)."""
    try:
        # –ó—ñ–±—Ä–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ query string
        params = dict(request.rel_url.query)

        # –Ø–∫—â–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ JSON —Ç—ñ–ª–æ (POST), –æ–±'—î–¥–Ω–∞—Ç–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if request.can_read_body and request.method in {"POST", "PUT", "PATCH"}:
            try:
                payload = await request.json()
                if isinstance(payload, dict):
                    for key, value in payload.items():
                        if value is not None and value != "":
                            params[str(key)] = str(value)
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è Proxy geocode: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON —Ç—ñ–ª–æ")

        query = params.get("q") or params.get("query")
        if not query or not str(query).strip():
            return web.json_response({"error": "Missing required parameter 'q'"}, status=400)

        query = str(query).strip()
        proxy_params = {
            "q": query,
            "format": "json",
            "addressdetails": params.get("addressdetails", "1"),
            "limit": params.get("limit", "8"),
        }

        if params.get("countrycodes"):
            proxy_params["countrycodes"] = params["countrycodes"]

        # –ë–∞–∂–∞–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        proxy_params["accept-language"] = params.get("accept-language", "uk")

        debug_info = {
            "query": query,
            "params": proxy_params
        }
        logger.info(f"üõ∞Ô∏è Proxy geocode: {debug_info}")

        # –ü–æ–≤–∞–∂–∞—î–º–æ rate limit Nominatim (1 –∑–∞–ø–∏—Ç/—Å–µ–∫)
        await _wait_for_nominatim()

        headers = {
            "User-Agent": NOMINATIM_USER_AGENT,
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(NOMINATIM_SEARCH_URL, params=proxy_params, headers=headers, timeout=15) as resp:
                body_text = await resp.text()

                if resp.status != 200:
                    logger.warning(
                        "‚ö†Ô∏è Proxy geocode: Nominatim status %s, body: %s",
                        resp.status,
                        body_text[:200]
                    )
                    return web.json_response(
                        {
                            "error": "Nominatim request failed",
                            "status": resp.status,
                            "body": body_text[:500]
                        },
                        status=resp.status
                    )

                try:
                    data = await resp.json(content_type=None)
                except Exception as e:  # noqa: BLE001
                    logger.error("‚ùå Proxy geocode: JSON decode error %s", e)
                    logger.debug("‚ùå Proxy geocode body: %s", body_text[:500])
                    return web.json_response(
                        {
                            "error": "Invalid JSON from Nominatim",
                            "status": resp.status
                        },
                        status=502
                    )

        if not isinstance(data, list):
            logger.warning("‚ö†Ô∏è Proxy geocode: unexpected response type: %s", type(data))
            return web.json_response(
                {
                    "error": "Unexpected response format",
                    "status": 502
                },
                status=502
            )

        logger.info(f"‚úÖ Proxy geocode: '{query}' ‚Üí {len(data)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–∏)")
        return web.json_response(data)

    except Exception as e:  # noqa: BLE001
        logger.error("‚ùå Proxy geocode: critical error: %s", e, exc_info=True)
        return web.json_response({"error": str(e)}, status=500)


async def webapp_calculate_price_handler(request: web.Request) -> web.Response:
    """
    API endpoint –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Ü—ñ–Ω–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ
    
    POST /api/webapp/calculate-price
    Body: {
        "user_id": 123456,
        "distance_km": 5.2,
        "duration_minutes": 15
    }
    
    Returns: {
        "success": true,
        "price": 120.50,
        "base_fare": 100.00,
        "multiplier": 1.205,
        "explanation": "‚Ä¢ –ü—ñ–∫–æ–≤–∏–π —á–∞—Å: +30%\n‚Ä¢ –í–∏—Å–æ–∫–∏–π –ø–æ–ø–∏—Ç: +25%"
    }
    """
    try:
        data = await request.json()
        user_id = data.get("user_id")
        distance_km = data.get("distance_km")
        duration_minutes = data.get("duration_minutes")
        
        if not user_id or distance_km is None or duration_minutes is None:
            return web.json_response({
                "success": False,
                "error": "Missing required fields: user_id, distance_km, duration_minutes"
            }, status=400)
        
        # –Ü–º–ø–æ—Ä—Ç–∏
        from app.storage.db import (
            get_latest_tariff, get_pricing_settings, get_online_drivers_count, 
            get_user_by_id, get_pending_orders, PricingSettings
        )
        from app.handlers.car_classes import calculate_base_fare, calculate_fare_with_class
        from app.handlers.dynamic_pricing import calculate_dynamic_price
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ
        tariff = await get_latest_tariff(request.app['config'].database_path)
        if not tariff:
            return web.json_response({
                "success": False,
                "error": "Tariff not configured"
            }, status=500)
        
        # –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ (–±–µ–∑ –∫–ª–∞—Å—É –∞–≤—Ç–æ —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∏)
        base_fare = calculate_base_fare(tariff, distance_km, duration_minutes)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–æ—É—Ç–≤–æ—Ä–µ–Ω–Ω—è (—Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤—Å—ñ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)
        pricing = await get_pricing_settings(request.app['config'].database_path)
        if pricing is None:
            pricing = PricingSettings()
        
        # –ú—ñ—Å—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_user_by_id(request.app['config'].database_path, user_id)
        client_city = user.city if user and user.city else None
        online_count = await get_online_drivers_count(request.app['config'].database_path, client_city)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –†–ï–ê–õ–¨–ù–£ –∫—ñ–ª—å–∫—ñ—Å—Ç—å pending orders (—Ç–∞–∫ —Å–∞–º–æ —è–∫ —É –±–æ—Ç—ñ)
        pending_orders = await get_pending_orders(request.app['config'].database_path, client_city)
        pending_orders_count = len(pending_orders)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –º–Ω–æ–∂–Ω–∏–∫—ñ–≤ –∫–ª–∞—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ calculate_fare_with_class
        custom_multipliers = {
            "economy": pricing.economy_multiplier,
            "standard": pricing.standard_multiplier,
            "comfort": pricing.comfort_multiplier,
            "business": pricing.business_multiplier
        }
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è Economy –∫–ª–∞—Å—É (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∫–ª–∞—Å –Ω–∞ –∫–∞—Ä—Ç—ñ)
        # –¢–û–ß–ù–û –¢–ê–ö –°–ê–ú–û –Ø–ö –£ –ë–û–¢–Ü (order.py —Ä—è–¥–∫–∏ 195-203)
        economy_fare = calculate_fare_with_class(base_fare, "economy", custom_multipliers)
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω—É —Ü—ñ–Ω—É –∑ –ü–†–ê–í–ò–õ–¨–ù–ò–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑ pricing (–Ω–µ –∑ tariff!)
        final_price, explanation, total_multiplier = await calculate_dynamic_price(
            economy_fare,  # –¶—ñ–Ω–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º economy –∫–ª–∞—Å—É
            city=client_city or "–ö–∏—ó–≤",
            online_drivers=online_count,
            pending_orders=pending_orders_count,
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pricing.night_percent –∑–∞–º—ñ—Å—Ç—å tariff.night_tariff_percent
            night_percent=pricing.night_percent,  # –ó –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ (45%, –∞ –Ω–µ 50%)
            weather_percent=pricing.weather_percent,  # –ó –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
            peak_hours_percent=pricing.peak_hours_percent,
            weekend_percent=pricing.weekend_percent,
            monday_morning_percent=pricing.monday_morning_percent,
            no_drivers_percent=pricing.no_drivers_percent,
            demand_very_high_percent=pricing.demand_very_high_percent,
            demand_high_percent=pricing.demand_high_percent,
            demand_medium_percent=pricing.demand_medium_percent,
            demand_low_discount_percent=pricing.demand_low_discount_percent
        )
        
        logger.info(f"üí∞ Price calculated for user {user_id}: base={base_fare:.2f}, economy={economy_fare:.2f}, final={final_price:.2f}, multiplier={total_multiplier:.2f}")
        
        return web.json_response({
            "success": True,
            "price": round(final_price, 2),
            "base_fare": round(base_fare, 2),
            "economy_fare": round(economy_fare, 2),
            "multiplier": round(total_multiplier, 2),
            "explanation": explanation,
            "car_class": "economy"  # –í–∫–∞–∑—É—î–º–æ –∫–ª–∞—Å –∞–≤—Ç–æ –¥–ª—è —è–∫–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error calculating price: {e}", exc_info=True)
        return web.json_response({
            "success": False,
            "error": str(e)
        }, status=500)


async def webapp_get_user_city_handler(request: web.Request) -> web.Response:
    """
    API endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –π–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    
    POST /api/webapp/get-user-city
    Body: {
        "user_id": 123456
    }
    
    Response: {
        "success": True,
        "city": "–ö–∏—ó–≤",
        "coordinates": {
            "lat": 50.4501,
            "lon": 30.5234,
            "city": "–ö–∏—ó–≤"
        }
    }
    """
    try:
        data = await request.json()
        user_id = data.get('user_id')
        
        if not user_id:
            return web.json_response({
                "success": False,
                "error": "Missing user_id"
            }, status=400)
        
        logger.info(f"üèôÔ∏è Getting city for user {user_id}")
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
        from app.storage.db import get_user_by_id
        user = await get_user_by_id(request.app['config'].database_path, user_id)
        
        if not user or not user.city:
            logger.warning(f"‚ö†Ô∏è User {user_id} has no city")
            return web.json_response({
                "success": False,
                "error": "User city not found"
            }, status=404)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º—ñ—Å—Ç –£–∫—Ä–∞—ó–Ω–∏
        city_coordinates = {
            "–ö–∏—ó–≤": {"lat": 50.4501, "lon": 30.5234},
            "–•–∞—Ä–∫—ñ–≤": {"lat": 49.9935, "lon": 36.2304},
            "–û–¥–µ—Å–∞": {"lat": 46.4825, "lon": 30.7233},
            "–î–Ω—ñ–ø—Ä–æ": {"lat": 48.4647, "lon": 35.0462},
            "–î–æ–Ω–µ—Ü—å–∫": {"lat": 48.0159, "lon": 37.8028},
            "–ó–∞–ø–æ—Ä—ñ–∂–∂—è": {"lat": 47.8388, "lon": 35.1396},
            "–õ—å–≤—ñ–≤": {"lat": 49.8397, "lon": 24.0297},
            "–ö—Ä–∏–≤–∏–π –†—ñ–≥": {"lat": 47.9088, "lon": 33.3443},
            "–ú–∏–∫–æ–ª–∞—ó–≤": {"lat": 46.9750, "lon": 31.9946},
            "–ú–∞—Ä—ñ—É–ø–æ–ª—å": {"lat": 47.0956, "lon": 37.5431},
            "–õ—É–≥–∞–Ω—Å—å–∫": {"lat": 48.5740, "lon": 39.3078},
            "–í—ñ–Ω–Ω–∏—Ü—è": {"lat": 49.2328, "lon": 28.4681},
            "–ú–∞–∫—ñ—ó–≤–∫–∞": {"lat": 48.0479, "lon": 37.9772},
            "–°—ñ–º—Ñ–µ—Ä–æ–ø–æ–ª—å": {"lat": 44.9521, "lon": 34.1024},
            "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å": {"lat": 44.6167, "lon": 33.5254},
            "–•–µ—Ä—Å–æ–Ω": {"lat": 46.6354, "lon": 32.6169},
            "–ü–æ–ª—Ç–∞–≤–∞": {"lat": 49.5883, "lon": 34.5514},
            "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": {"lat": 51.4982, "lon": 31.2893},
            "–ß–µ—Ä–∫–∞—Å–∏": {"lat": 49.4444, "lon": 32.0598},
            "–ñ–∏—Ç–æ–º–∏—Ä": {"lat": 50.2547, "lon": 28.6587},
            "–°—É–º–∏": {"lat": 50.9077, "lon": 34.7981},
            "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π": {"lat": 49.4229, "lon": 26.9871},
            "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ": {"lat": 48.2921, "lon": 25.9358},
            "–†—ñ–≤–Ω–µ": {"lat": 50.6199, "lon": 26.2516},
            "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π": {"lat": 48.5079, "lon": 32.2623},
            "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫": {"lat": 48.9226, "lon": 24.7111},
            "–ö–∞–º'—è–Ω—Å—å–∫–µ": {"lat": 48.5132, "lon": 34.6031},
            "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": {"lat": 49.5535, "lon": 25.5948},
            "–õ—É—Ü—å–∫": {"lat": 50.7472, "lon": 25.3254},
            "–ë—ñ–ª–∞ –¶–µ—Ä–∫–≤–∞": {"lat": 49.8097, "lon": 30.1127},
            "–ö—Ä–∞–º–∞—Ç–æ—Ä—Å—å–∫": {"lat": 48.7233, "lon": 37.5562},
            "–ú–µ–ª—ñ—Ç–æ–ø–æ–ª—å": {"lat": 46.8489, "lon": 35.3675},
            "–£–∂–≥–æ—Ä–æ–¥": {"lat": 48.6208, "lon": 22.2879},
        }
        
        city = user.city
        coordinates = city_coordinates.get(city)
        
        if not coordinates:
            # –Ø–∫—â–æ –º—ñ—Å—Ç–∞ –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ö–∏—ó–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            logger.warning(f"‚ö†Ô∏è City '{city}' not found in coordinates map, using Kyiv")
            coordinates = city_coordinates["–ö–∏—ó–≤"]
            city = "–ö–∏—ó–≤"
        
        logger.info(f"‚úÖ City found: {city} ({coordinates['lat']}, {coordinates['lon']})")
        
        return web.json_response({
            "success": True,
            "city": city,
            "coordinates": {
                "lat": coordinates["lat"],
                "lon": coordinates["lon"],
                "city": city
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error getting user city: {e}", exc_info=True)
        return web.json_response({
            "success": False,
            "error": str(e)
        }, status=500)


def setup_webapp_api(app: web.Application, bot: Bot, config: AppConfig, storage) -> None:
    """
    –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ API endpoints –¥–ª—è WebApp
    """
    # –ó–±–µ—Ä–µ–≥—Ç–∏ bot, storage —ñ config –≤ app –¥–ª—è –¥–æ—Å—Ç—É–ø—É –≤ handlers
    app['bot'] = bot
    app['config'] = config
    app['storage'] = storage
    
    # –î–æ–¥–∞—Ç–∏ routes
    # webapp_location_handler –í–ò–î–ê–õ–ï–ù–û - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ webapp_order_handler
    app.router.add_post('/api/webapp/order', webapp_order_handler)
    app.router.add_get('/api/webapp/geocode', webapp_geocode_proxy)
    app.router.add_post('/api/webapp/geocode', webapp_geocode_proxy)
    app.router.add_post('/api/webapp/calculate-price', webapp_calculate_price_handler)
    app.router.add_post('/api/webapp/get-user-city', webapp_get_user_city_handler)
    
    logger.info("üåê API endpoint registered: POST /api/webapp/order")
    logger.info("üåê API endpoint registered: GET/POST /api/webapp/geocode")
    logger.info("üåê API endpoint registered: POST /api/webapp/calculate-price")
    logger.info("üåê API endpoint registered: POST /api/webapp/get-user-city")
