"""–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
import re
from typing import Optional, Tuple


def validate_phone_number(phone: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É.
    
    –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏:
        +380671234567
        380671234567
        +38 067 123 45 67
        +38(067)123-45-67
    
    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–∏–π?, –æ—á–∏—â–µ–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ None)
    """
    if not phone:
        return False, None
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º +
    cleaned = re.sub(r'[^\d+]', '', phone.strip())
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (SQL injection)
    if re.search(r'[;<>\'\"\\]', phone):
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ (–º—ñ–Ω—ñ–º—É–º 10 —Ü–∏—Ñ—Ä, –º–∞–∫—Å–∏–º—É–º 15)
    digits_only = cleaned.replace('+', '')
    
    if len(digits_only) < 10 or len(digits_only) > 15:
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ + –∞–±–æ —Ü–∏—Ñ—Ä–∏
    if not cleaned[0] in ('+', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'):
        return False, None
    
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ +380 –∞–±–æ 380 –∞–±–æ 0
    if cleaned.startswith('+380') or cleaned.startswith('380'):
        if len(digits_only) != 12:
            return False, None
    elif cleaned.startswith('0'):
        if len(digits_only) != 10:
            return False, None
        # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ 0671234567 ‚Üí +380671234567
        cleaned = '+38' + cleaned
    
    return True, cleaned


def validate_address(address: str, min_length: int = 3, max_length: int = 200) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏.
    
    Args:
        address: –ê–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        min_length: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∞–¥—Ä–µ—Å–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∞–¥—Ä–µ—Å–∏
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–∞?, –æ—á–∏—â–µ–Ω–∞ –∞–¥—Ä–µ—Å–∞ –∞–±–æ None)
    """
    if not address:
        return False, None
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    cleaned = address.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if len(cleaned) < min_length or len(cleaned) > max_length:
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (SQL injection, XSS)
    if re.search(r'[<>\'\"\\;]', cleaned):
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ (SQL injection)
    dangerous_patterns = [
        r'--',           # SQL –∫–æ–º–µ–Ω—Ç–∞—Ä
        r'/\*',          # SQL –∫–æ–º–µ–Ω—Ç–∞—Ä
        r'\*/',          # SQL –∫–æ–º–µ–Ω—Ç–∞—Ä
        r'union\s+select',  # SQL injection
        r'drop\s+table',    # SQL injection
        r'<script',         # XSS
        r'javascript:',     # XSS
    ]
    
    for pattern in dangerous_patterns:
        if re.search(pattern, cleaned, re.IGNORECASE):
            return False, None
    
    # –Ø–∫—â–æ —Ü–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (üìç lat, lon) - –¥–æ–∑–≤–æ–ª–∏—Ç–∏
    if cleaned.startswith('üìç'):
        return True, cleaned
    
    return True, cleaned


def validate_name(name: str, min_length: int = 2, max_length: int = 100) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    
    Args:
        name: –Ü–º'—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        min_length: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —ñ–º–µ–Ω—ñ
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —ñ–º–µ–Ω—ñ
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–µ?, –æ—á–∏—â–µ–Ω–µ —ñ–º'—è –∞–±–æ None)
    """
    if not name:
        return False, None
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    cleaned = name.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if len(cleaned) < min_length or len(cleaned) > max_length:
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    if re.search(r'[<>\'\"\\;]', cleaned):
        return False, None
    
    # –Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –±—É–∫–≤—É
    if not re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê]', cleaned):
        return False, None
    
    return True, cleaned


def validate_comment(comment: str, max_length: int = 500) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è.
    
    Args:
        comment: –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–∏–π?, –æ—á–∏—â–µ–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ None)
    """
    if not comment:
        return True, None  # –ö–æ–º–µ–Ω—Ç–∞—Ä –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    cleaned = comment.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    if len(cleaned) > max_length:
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    if re.search(r'[<>\\;]', cleaned):
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ SQL injection
    dangerous_patterns = [
        r'--',
        r'/\*',
        r'\*/',
        r'union\s+select',
        r'drop\s+table',
    ]
    
    for pattern in dangerous_patterns:
        if re.search(pattern, cleaned, re.IGNORECASE):
            return False, None
    
    return True, cleaned


def sanitize_html(text: str) -> str:
    """
    –í–∏–¥–∞–ª–∏—Ç–∏ HTML —Ç–µ–≥–∏ –∑ —Ç–µ–∫—Å—Ç—É.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—ó
    
    Returns:
        –¢–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–µ–≥—ñ–≤
    """
    if not text:
        return ""
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ HTML —Ç–µ–≥–∏
    cleaned = re.sub(r'<[^>]+>', '', text)
    
    # –ó–∞–º—ñ–Ω–∏—Ç–∏ HTML entities
    html_entities = {
        '&lt;': '<',
        '&gt;': '>',
        '&amp;': '&',
        '&quot;': '"',
        '&#39;': "'",
    }
    
    for entity, char in html_entities.items():
        cleaned = cleaned.replace(entity, char)
    
    return cleaned


def validate_car_plate(plate: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.
    
    –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–º–µ—Ä–∏: AA1234BB –∞–±–æ AI1234AA
    
    Args:
        plate: –ù–æ–º–µ—Ä–Ω–∏–π –∑–Ω–∞–∫ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–∏–π?, –æ—á–∏—â–µ–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ None)
    """
    if not plate:
        return False, None
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    cleaned = plate.strip().upper()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ (–º—ñ–Ω—ñ–º—É–º 6, –º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤)
    if len(cleaned) < 6 or len(cleaned) > 10:
        return False, None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏
    if re.search(r'[<>\'\"\\;]', cleaned):
        return False, None
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É (–ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏)
    if not re.match(r'^[A-Z0-9\s-]+$', cleaned):
        return False, None
    
    return True, cleaned


def validate_card_number(card: str) -> Tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏.
    
    Args:
        card: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
    
    Returns:
        Tuple[bool, Optional[str]]: (–≤–∞–ª—ñ–¥–Ω–∏–π?, —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä –∞–±–æ None)
    """
    if not card:
        return False, None
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–µ-—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
    digits_only = re.sub(r'\D', '', card.strip())
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ (13-19 —Ü–∏—Ñ—Ä –¥–ª—è –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –∫–∞—Ä—Ç–æ–∫)
    if len(digits_only) < 13 or len(digits_only) > 19:
        return False, None
    
    # –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
    def luhn_check(card_number: str) -> bool:
        def digits_of(n):
            return [int(d) for d in str(n)]
        
        digits = digits_of(card_number)
        odd_digits = digits[-1::-2]
        even_digits = digits[-2::-2]
        checksum = sum(odd_digits)
        for d in even_digits:
            checksum += sum(digits_of(d * 2))
        return checksum % 10 == 0
    
    if not luhn_check(digits_only):
        return False, None
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —è–∫ 1234 5678 9012 3456
    formatted = ' '.join([digits_only[i:i+4] for i in range(0, len(digits_only), 4)])
    
    return True, formatted
