"""
–ú–æ–¥—É–ª—å –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞
–ú—ñ—Å—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
"""
from typing import Optional


# ============ –ö–û–õ–¨–û–†–û–í–Ü –ï–ú–û–î–ó–Ü –î–õ–Ø –°–¢–ê–¢–£–°–Ü–í ============

def get_status_emoji(status: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—å–æ—Ä–æ–≤–µ –µ–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    
    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
    Returns:
        –ï–º–æ–¥–∑—ñ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º
    """
    status_map = {
        'pending': 'üîµ',       # –°–∏–Ω—ñ–π = –æ—á—ñ–∫—É—î
        'accepted': 'üü¢',      # –ó–µ–ª–µ–Ω–∏–π = –ø—Ä–∏–π–Ω—è—Ç–æ
        'in_progress': 'üü°',   # –ñ–æ–≤—Ç–∏–π = –≤ –¥–æ—Ä–æ–∑—ñ
        'completed': '‚ö™',     # –ë—ñ–ª–∏–π = –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        'cancelled': 'üî¥',     # –ß–µ—Ä–≤–æ–Ω–∏–π = —Å–∫–∞—Å–æ–≤–∞–Ω–æ
        'searching': 'üîµ',     # –°–∏–Ω—ñ–π = –ø–æ—à—É–∫ –≤–æ–¥—ñ—è
    }
    return status_map.get(status, '‚ö´')


def get_status_text_with_emoji(status: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –µ–º–æ–¥–∑—ñ
    
    Args:
        status: –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
    """
    emoji = get_status_emoji(status)
    status_texts = {
        'pending': f'{emoji} –û—á—ñ–∫—É—î –≤–æ–¥—ñ—è',
        'accepted': f'{emoji} –í–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤',
        'in_progress': f'{emoji} –í–æ–¥—ñ–π —ó–¥–µ',
        'completed': f'{emoji} –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        'cancelled': f'{emoji} –°–∫–∞—Å–æ–≤–∞–Ω–æ',
        'searching': f'{emoji} –ü–æ—à—É–∫ –≤–æ–¥—ñ—è',
    }
    return status_texts.get(status, f'{emoji} {status}')


# ============ –ö–ê–†–ú–ê –ó –ö–û–õ–¨–û–†–ê–ú–ò ============

def get_karma_emoji(karma: int) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª—å–æ—Ä–æ–≤–µ –µ–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–≤–Ω—è –∫–∞—Ä–º–∏
    
    Args:
        karma: –ó–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ä–º–∏ (0-100)
        
    Returns:
        –ö–æ–ª—å–æ—Ä–æ–≤–µ —Å–µ—Ä—Ü–µ
    """
    if karma >= 90:
        return 'üíö'  # –ó–µ–ª–µ–Ω–µ —Å–µ—Ä—Ü–µ - –≤—ñ–¥–º—ñ–Ω–Ω–æ
    elif karma >= 70:
        return 'üíõ'  # –ñ–æ–≤—Ç–µ —Å–µ—Ä—Ü–µ - –¥–æ–±—Ä–µ
    elif karma >= 50:
        return 'üß°'  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–µ —Å–µ—Ä—Ü–µ - —Å–µ—Ä–µ–¥–Ω—å–æ
    else:
        return '‚ù§Ô∏è'  # –ß–µ—Ä–≤–æ–Ω–µ —Å–µ—Ä—Ü–µ - –Ω–∏–∑—å–∫–æ


def format_karma(karma: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –∫–∞—Ä–º—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –µ–º–æ–¥–∑—ñ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–æ–º
    
    Args:
        karma: –ó–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ä–º–∏ (0-100)
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∫–∞—Ä–º–∞
    """
    emoji = get_karma_emoji(karma)
    bar = create_progress_bar(karma, 100, length=10)
    return f"{emoji} –ö–∞—Ä–º–∞: {bar} {karma}/100"


def get_karma_level_text(karma: int) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å —Ä—ñ–≤–Ω—è –∫–∞—Ä–º–∏
    
    Args:
        karma: –ó–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ä–º–∏ (0-100)
        
    Returns:
        –û–ø–∏—Å —Ä—ñ–≤–Ω—è
    """
    if karma >= 90:
        return "–Ü–¥–µ–∞–ª—å–Ω–æ"
    elif karma >= 70:
        return "–î–æ–±—Ä–µ"
    elif karma >= 50:
        return "–°–µ—Ä–µ–¥–Ω—å–æ"
    else:
        return "–ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"


# ============ –ü–†–û–ì–†–ï–°-–ë–ê–†–ò ============

def create_progress_bar(value: int, max_value: int, length: int = 10, filled_char: str = '‚ñì', empty_char: str = '‚ñë') -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    
    Args:
        value: –ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        max_value: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
        length: –î–æ–≤–∂–∏–Ω–∞ –±–∞—Ä—É
        filled_char: –°–∏–º–≤–æ–ª –∑–∞–ø–æ–≤–Ω–µ–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        empty_char: –°–∏–º–≤–æ–ª –ø–æ—Ä–æ–∂–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏
        
    Returns:
        –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    """
    if max_value == 0:
        return empty_char * length
    
    filled = int((value / max_value) * length)
    filled = max(0, min(filled, length))  # –û–±–º–µ–∂–∏—Ç–∏ –≤—ñ–¥ 0 –¥–æ length
    return filled_char * filled + empty_char * (length - filled)


def create_earnings_bar(cash: float, card: float, length: int = 10) -> tuple[str, str]:
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –¥–ª—è –≥–æ—Ç—ñ–≤–∫–∏ —Ç–∞ –∫–∞—Ä—Ç–∫–∏
    
    Args:
        cash: –°—É–º–∞ –≥–æ—Ç—ñ–≤–∫–æ—é
        card: –°—É–º–∞ –∫–∞—Ä—Ç–∫–æ—é
        length: –î–æ–≤–∂–∏–Ω–∞ –±–∞—Ä—ñ–≤
        
    Returns:
        Tuple (cash_bar, card_bar)
    """
    total = cash + card
    if total == 0:
        return ('‚ñë' * length, '‚ñë' * length)
    
    cash_bar = create_progress_bar(int(cash), int(total), length)
    card_bar = create_progress_bar(int(card), int(total), length)
    
    return (cash_bar, card_bar)


# ============ –ê–ù–Ü–ú–û–í–ê–ù–Ü –ï–ú–û–î–ó–Ü –î–õ–Ø –ü–†–û–¶–ï–°–Ü–í ============

def get_process_emoji(process_type: str) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∞–Ω—ñ–º–æ–≤–∞–Ω–µ –µ–º–æ–¥–∑—ñ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É
    
    Args:
        process_type: –¢–∏–ø –ø—Ä–æ—Ü–µ—Å—É
        
    Returns:
        –ï–º–æ–¥–∑—ñ –ø—Ä–æ—Ü–µ—Å—É
    """
    process_map = {
        'searching': 'üîç',      # –ü–æ—à—É–∫ –≤–æ–¥—ñ—è
        'calculating': '‚ö°',    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
        'processing': 'üîÑ',    # –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        'waiting': '‚è≥',       # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
        'loading': '‚è≥',       # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        'geocoding': 'üó∫Ô∏è',    # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
    }
    return process_map.get(process_type, '‚è≥')


def format_process_message(process_type: str, message: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –∑ –µ–º–æ–¥–∑—ñ
    
    Args:
        process_type: –¢–∏–ø –ø—Ä–æ—Ü–µ—Å—É
        message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    emoji = get_process_emoji(process_type)
    return f"{emoji} {message}"


# ============ –ö–ê–†–¢–û–ß–ö–ò –ó –†–ê–ú–ö–ê–ú–ò ============

def create_box(title: str, content: str, width: int = 25) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –∫–∞—Ä—Ç–æ—á–∫—É –∑ —Ä–∞–º–∫–æ—é –Ω–∞–≤–∫–æ–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        content: –í–º—ñ—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        width: –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞
    """
    # –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ —à–∏—Ä–∏–Ω—É –ø—ñ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç
    lines = content.split('\n')
    max_content_len = max(len(line) for line in lines) if lines else 0
    actual_width = max(width, max_content_len + 4, len(title) + 4)
    
    # –í–µ—Ä—Ö–Ω—è —Ä–∞–º–∫–∞ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    top = f"‚îè{'‚îÅ' * (actual_width - 2)}‚îì\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∏–π)
    title_padding = actual_width - len(title) - 2
    left_pad = title_padding // 2
    right_pad = title_padding - left_pad
    header = f"‚îÉ{' ' * left_pad}{title}{' ' * right_pad}‚îÉ\n"
    
    # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫
    separator = f"‚î£{'‚îÅ' * (actual_width - 2)}‚î´\n"
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    content_lines = []
    for line in lines:
        padding = actual_width - len(line) - 2
        content_lines.append(f"‚îÉ {line}{' ' * padding}‚îÉ\n")
    
    # –ù–∏–∂–Ω—è —Ä–∞–º–∫–∞
    bottom = f"‚îó{'‚îÅ' * (actual_width - 2)}‚îõ"
    
    return top + header + separator + ''.join(content_lines) + bottom


def create_simple_box(content: str, width: int = 25) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    
    Args:
        content: –í–º—ñ—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        width: –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞
    """
    lines = content.split('\n')
    max_content_len = max(len(line) for line in lines) if lines else 0
    actual_width = max(width, max_content_len + 4)
    
    # –í–µ—Ä—Ö–Ω—è —Ä–∞–º–∫–∞
    top = f"‚îè{'‚îÅ' * (actual_width - 2)}‚îì\n"
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    content_lines = []
    for line in lines:
        padding = actual_width - len(line) - 2
        content_lines.append(f"‚îÉ {line}{' ' * padding}‚îÉ\n")
    
    # –ù–∏–∂–Ω—è —Ä–∞–º–∫–∞
    bottom = f"‚îó{'‚îÅ' * (actual_width - 2)}‚îõ"
    
    return top + ''.join(content_lines) + bottom


def create_section_divider(title: Optional[str] = None, width: int = 30) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ —Å–µ–∫—Ü—ñ–π
    
    Args:
        title: –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü—ñ—ó
        width: –®–∏—Ä–∏–Ω–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
    """
    if title:
        # –¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_with_spaces = f" {title} "
        padding = width - len(title_with_spaces)
        left_pad = padding // 2
        right_pad = padding - left_pad
        return f"{'‚îÅ' * left_pad}{title_with_spaces}{'‚îÅ' * right_pad}"
    else:
        return '‚îÅ' * width


# ============ –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ó–ê–†–û–ë–Ü–¢–ö–£ (–Ü–ù–§–û–ì–†–ê–§–Ü–ö–ê) ============

def format_earnings_infographic(
    total: float,
    cash: float,
    card: float,
    commission: float,
    trips_count: int,
    hours_worked: float
) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫—É –∑–∞—Ä–æ–±—ñ—Ç–∫—É –¥–ª—è –≤–æ–¥—ñ—è
    
    Args:
        total: –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫
        cash: –ì–æ—Ç—ñ–≤–∫–∞
        card: –ö–∞—Ä—Ç–∫–∞
        commission: –ö–æ–º—ñ—Å—ñ—è
        trips_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫
        hours_worked: –í—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ –≥–æ–¥–∏–Ω
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —ñ–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫–∞
    """
    net = total - commission
    
    # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏ –¥–ª—è –≥–æ—Ç—ñ–≤–∫–∏ —Ç–∞ –∫–∞—Ä—Ç–∫–∏
    cash_bar, card_bar = create_earnings_bar(cash, card, length=10)
    
    # –°–µ—Ä–µ–¥–Ω—ñ–π –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑–∞ –≥–æ–¥–∏–Ω—É
    per_hour = net / hours_worked if hours_worked > 0 else 0
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ–≥—Ä–∞—Ñ—ñ–∫–∏
    infographic = f"""üìä <b>–ó–ê–†–û–ë–Ü–¢–û–ö –°–¨–û–ì–û–î–ù–Ü</b>

üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π:</b>     {total:>7.0f} –≥—Ä–Ω
{create_section_divider(width=25)}
üíµ –ì–æ—Ç—ñ–≤–∫–∞:        {cash:>7.0f} –≥—Ä–Ω {cash_bar}
üí≥ –ö–∞—Ä—Ç–∫–∞:         {card:>7.0f} –≥—Ä–Ω {card_bar}
{create_section_divider(width=25)}
üìâ –ö–æ–º—ñ—Å—ñ—è:        {commission:>7.0f} –≥—Ä–Ω
{create_section_divider(width=25)}
‚úÖ <b>–ß–∏—Å—Ç–∏–π:</b>       {net:>7.0f} –≥—Ä–Ω

üöï –ü–æ—ó–∑–¥–æ–∫: <b>{trips_count}</b> | ‚è±Ô∏è –ì–æ–¥–∏–Ω–∏: <b>{hours_worked:.1f}</b>
üí∞ –ó–∞ –≥–æ–¥–∏–Ω—É: <b>~{per_hour:.0f} –≥—Ä–Ω/–≥–æ–¥</b>"""
    
    return infographic


def format_driver_stats(
    total_trips: int,
    rating: float,
    karma: int,
    completed_today: int = 0
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥—ñ—è –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        total_trips: –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫
        rating: –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥—ñ—è
        karma: –ö–∞—Ä–º–∞ –≤–æ–¥—ñ—è
        completed_today: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ—ó–∑–¥–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    # –ó—ñ—Ä–∫–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É
    stars = '‚≠ê' * int(rating)
    empty_stars = '‚òÜ' * (5 - int(rating))
    rating_visual = f"{stars}{empty_stars} {rating:.1f}"
    
    # –ö–∞—Ä–º–∞ –∑ –∫–æ–ª—å–æ—Ä–æ–º
    karma_formatted = format_karma(karma)
    
    stats = f"""üìä <b>–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üöï <b>–ü–æ—ó–∑–¥–æ–∫ –∑–∞–≥–∞–ª–æ–º:</b> {total_trips}
üìÖ <b>–°—å–æ–≥–æ–¥–Ω—ñ:</b> {completed_today}

{rating_visual}

{karma_formatted}
{get_karma_level_text(karma)}"""
    
    return stats


# ============ –†–ï–ô–¢–ò–ù–ì –ó –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ñ–Æ ============

def format_rating_stars(rating: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–π—Ç–∏–Ω–≥ –∑—ñ—Ä–∫–∞–º–∏
    
    Args:
        rating: –†–µ–π—Ç–∏–Ω–≥ (0-5)
        
    Returns:
        –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    """
    full_stars = int(rating)
    stars = '‚≠ê' * full_stars
    empty = '‚òÜ' * (5 - full_stars)
    return f"{stars}{empty} {rating:.1f}"


# ============ –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ó –í–Ü–ó–£–ê–õ–¨–ù–ò–ú–ò –ï–õ–ï–ú–ï–ù–¢–ê–ú–ò ============

def format_order_status_message(
    order_id: int,
    status: str,
    pickup: str,
    destination: str,
    price: float,
    driver_name: Optional[str] = None,
    driver_phone: Optional[str] = None,
    car_info: Optional[str] = None
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
    
    Args:
        order_id: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        status: –°—Ç–∞—Ç—É—Å
        pickup: –ó–≤—ñ–¥–∫–∏
        destination: –ö—É–¥–∏
        price: –¶—ñ–Ω–∞
        driver_name: –Ü–º'—è –≤–æ–¥—ñ—è (–æ–ø—Ü—ñ–π–Ω–æ)
        driver_phone: –¢–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥—ñ—è (–æ–ø—Ü—ñ–π–Ω–æ)
        car_info: –Ü–Ω—Ñ–æ –ø—Ä–æ –∞–≤—Ç–æ (–æ–ø—Ü—ñ–π–Ω–æ)
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    status_text = get_status_text_with_emoji(status)
    
    message = f"""<b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>

{status_text}

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
   üÖ∞Ô∏è  {pickup}
   üÖ±Ô∏è  {destination}

üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> {price:.0f} –≥—Ä–Ω"""
    
    if driver_name and status in ['accepted', 'in_progress']:
        message += f"""

{create_section_divider('–í–û–î–Ü–ô', 25)}
üë§ {driver_name}"""
        
        if car_info:
            message += f"\nüöó {car_info}"
        
        if driver_phone:
            message += f"\nüì± {driver_phone}"
    
    return message
