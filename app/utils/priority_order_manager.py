"""–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å"""
from __future__ import annotations

import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import List, Optional

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–∞–π–º–µ—Ä—ñ–≤ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
# order_id -> task
_priority_timers: dict[int, asyncio.Task] = {}


class PriorityOrderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏"""
    
    @staticmethod
    async def send_to_priority_drivers(
        bot: Bot,
        order_id: int,
        drivers: List,  # List[Driver]
        order_details: dict,
        db_path: str,
        city_group_id: int
    ) -> bool:
        """
        –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º –≤–æ–¥—ñ—è–º
        
        Returns:
            True —è–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º –≤–æ–¥—ñ—è–º
            False —è–∫—â–æ –Ω–µ–º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤
        """
        from app.storage.db import Driver
        
        # –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –≤–æ–¥—ñ—ó–≤ –∑ priority > 0
        priority_drivers = [d for d in drivers if hasattr(d, 'priority') and d.priority > 0]
        
        if not priority_drivers:
            logger.info(f"üì¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: –Ω–µ–º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É")
            return False
        
        logger.info(f"‚≠ê –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(priority_drivers)} –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤")
        
        # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ priority (DESC)
        priority_drivers.sort(key=lambda d: d.priority, reverse=True)
        
        # –í–∑—è—Ç–∏ —Ç–æ–ø-5 –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤
        top_drivers = priority_drivers[:5]
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–¥—ñ—ó–≤
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                    callback_data=f"accept_order:{order_id}"
                )]
            ]
        )
        
        # –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message_text = _build_priority_message(order_id, order_details)
        
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–∂–Ω–æ–º—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –≤–æ–¥—ñ—é
        sent_count = 0
        for driver in top_drivers:
            try:
                await bot.send_message(
                    chat_id=driver.tg_user_id,
                    text=message_text,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
                sent_count += 1
                logger.info(f"üì® –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –≤–æ–¥—ñ—é {driver.full_name} (ID: {driver.id})")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤–æ–¥—ñ—é {driver.id}: {e}")
        
        if sent_count > 0:
            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É
            await PriorityOrderManager.start_priority_timer(
                bot, order_id, db_path, city_group_id, order_details
            )
            logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–∞ 60 —Å–µ–∫—É–Ω–¥")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∂–æ–¥–Ω–æ–º—É –≤–æ–¥—ñ—é")
            return False
    
    @staticmethod
    async def start_priority_timer(
        bot: Bot,
        order_id: int,
        db_path: str,
        city_group_id: int,
        order_details: dict
    ):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ —î
        if order_id in _priority_timers:
            _priority_timers[order_id].cancel()
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞–¥–∞—á—É
        task = asyncio.create_task(
            _priority_timeout_handler(bot, order_id, db_path, city_group_id, order_details)
        )
        _priority_timers[order_id] = task
    
    @staticmethod
    def cancel_priority_timer(order_id: int):
        """–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∫–æ–ª–∏ –≤–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤ –∞–±–æ –≤—ñ–¥—Ö–∏–ª–∏–≤)"""
        if order_id in _priority_timers:
            _priority_timers[order_id].cancel()
            _priority_timers.pop(order_id, None)  # –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")


async def _priority_timeout_handler(
    bot: Bot,
    order_id: int,
    db_path: str,
    city_group_id: int,
    order_details: dict
):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–∞–π–º–∞—É—Ç—É –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        # –ß–µ–∫–∞—Ç–∏ 60 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        from app.storage.db import get_order_by_id
        order = await get_order_by_id(db_path, order_id)
        
        if not order:
            logger.warning(f"‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è —Ç–∞–π–º–∞—É—Ç—É")
            return
        
        # –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—Å–µ —â–µ pending - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
        if order.status == "pending":
            logger.info(f"‚è∞ –¢–ê–ô–ú–ê–£–¢! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–º–∏ –≤–æ–¥—ñ—è–º–∏, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø—É")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
            await _send_to_group(bot, order_id, city_group_id, order_details)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
            await _notify_priority_drivers_timeout(bot, order_id, order_details.get('priority_driver_ids', []))
        else:
            logger.info(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å {order.status}, —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞ (–±–µ–∑–ø–µ—á–Ω–æ)
        _priority_timers.pop(order_id, None)
            
    except asyncio.CancelledError:
        logger.info(f"‚è∞ –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ (–≤–æ–¥—ñ–π –ø—Ä–∏–π–Ω—è–≤/–≤—ñ–¥—Ö–∏–ª–∏–≤)")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–∞–π–º–µ—Ä—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}: {e}")


async def _send_to_group(bot: Bot, order_id: int, city_group_id: int, order_details: dict):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É –≤–æ–¥—ñ—ó–≤"""
    try:
        from app.handlers.driver_panel import clean_address
        
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                    callback_data=f"accept_order:{order_id}"
                )]
            ]
        )
        
        # ‚≠ê –ü–ï–†–ï–¢–í–û–†–ò–¢–ò –ö–û–û–†–î–ò–ù–ê–¢–ò –í –ê–î–†–ï–°–ò (–¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤)
        from app.utils.maps import reverse_geocode
        
        pickup_display = order_details.get('pickup', '')
        destination_display = order_details.get('destination', '')
        
        pickup_lat = order_details.get('pickup_lat')
        pickup_lon = order_details.get('pickup_lon')
        dest_lat = order_details.get('dest_lat')
        dest_lon = order_details.get('dest_lon')
        
        # –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≥–µ–æ–∫–æ–¥—É–≤–∞—Ç–∏ –≤ –∞–¥—Ä–µ—Å—É
        if pickup_lat and pickup_lon:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            if '.' in str(pickup_display) and any(char.isdigit() for char in str(pickup_display)):
                logger.info(f"üîÑ [PRIORITY] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ pickup, –≥–µ–æ–∫–æ–¥—É—é: {pickup_display}")
                try:
                    readable_address = await reverse_geocode("", float(pickup_lat), float(pickup_lon))
                    if readable_address:
                        pickup_display = readable_address
                        logger.info(f"‚úÖ [PRIORITY] Pickup –≥–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ: {pickup_display}")
                except Exception as e:
                    logger.error(f"‚ùå [PRIORITY] –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è pickup: {e}")
        
        if dest_lat and dest_lon:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            if '.' in str(destination_display) and any(char.isdigit() for char in str(destination_display)):
                logger.info(f"üîÑ [PRIORITY] –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ destination, –≥–µ–æ–∫–æ–¥—É—é: {destination_display}")
                try:
                    readable_address = await reverse_geocode("", float(dest_lat), float(dest_lon))
                    if readable_address:
                        destination_display = readable_address
                        logger.info(f"‚úÖ [PRIORITY] Destination –≥–µ–æ–∫–æ–¥–æ–≤–∞–Ω–æ: {destination_display}")
                except Exception as e:
                    logger.error(f"‚ùå [PRIORITY] –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è destination: {e}")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤—ñ–¥ Plus Codes
        clean_pickup = clean_address(pickup_display)
        clean_destination = clean_address(destination_display)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
        route_link = ""
        
        if pickup_lat and pickup_lon and dest_lat and dest_lon:
            route_link = (
                f"\nüó∫Ô∏è <a href='https://www.google.com/maps/dir/?api=1"
                f"&origin={pickup_lat},{pickup_lon}"
                f"&destination={dest_lat},{dest_lon}"
                f"&travelmode=driving'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ Google Maps</a>"
            )
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é
        distance_info = ""
        if order_details.get('distance_m'):
            km = order_details.get('distance_m') / 1000.0
            minutes = (order_details.get('duration_s') or 0) / 60.0
            distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n"
        
        # –í–∞—Ä—Ç—ñ—Å—Ç—å
        fare_text = ""
        if order_details.get('estimated_fare'):
            fare_text = f"üí∞ <b>–í–ê–†–¢–Ü–°–¢–¨: {int(order_details['estimated_fare'])} –≥—Ä–Ω</b> üí∞\n"
        
        # –ö–ª–∞—Å –∞–≤—Ç–æ
        car_class = order_details.get('car_class', 'economy')
        from app.handlers.car_classes import get_car_class_name
        car_class_name = get_car_class_name(car_class)
        
        # –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
        from app.handlers.order import mask_phone_number
        masked_phone = mask_phone_number(order_details.get('phone', ''), show_last_digits=2)
        
        group_message = (
            f"üöñ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
            f"üë§ –ö–ª—ñ—î–Ω—Ç: {order_details.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {masked_phone}\n\n"
            f"üìç –ó–≤—ñ–¥–∫–∏: {clean_pickup}\n"
            f"üìç –ö—É–¥–∏: {clean_destination}\n\n"
            f"{distance_info}"
            f"üöó –ö–ª–∞—Å –∞–≤—Ç–æ: {car_class_name}\n"
            f"{fare_text}\n"
            f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order_details.get('comment', '–ù–µ–º–∞—î')}\n"
            f"{route_link}"
        )
        
        sent_msg = await bot.send_message(
            chat_id=city_group_id,
            text=group_message,
            reply_markup=kb,
            parse_mode="HTML"
        )
        
        # –û–Ω–æ–≤–∏—Ç–∏ group_message_id –≤ –ë–î
        from app.storage.db_connection import db_manager
        async with db_manager.connect(order_details.get('db_path')) as db:
            await db.execute(
                "UPDATE orders SET group_message_id = ? WHERE id = ?",
                (sent_msg.message_id, order_id)
            )
            await db.commit()
        
        logger.info(f"üì¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É {city_group_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –≤ –≥—Ä—É–ø—É: {e}")


async def _notify_priority_drivers_timeout(bot: Bot, order_id: int, driver_ids: List[int]):
    """–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ"""
    for driver_id in driver_ids:
        try:
            await bot.send_message(
                chat_id=driver_id,
                text=f"‚è∞ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ (—á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–∏–Ω—É–≤)",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤–æ–¥—ñ—è {driver_id}: {e}")


def _build_priority_message(order_id: int, order_details: dict) -> str:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏—Ö –≤–æ–¥—ñ—ó–≤"""
    from app.handlers.driver_panel import clean_address
    from app.handlers.car_classes import get_car_class_name
    
    # ‚ö†Ô∏è –£–í–ê–ì–ê: —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –ù–ï –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ async reverse_geocode
    # –¢–æ–º—É –∞–¥—Ä–µ—Å–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∂–µ –≥–µ–æ–∫–æ–¥–æ–≤–∞–Ω—ñ –¥–æ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É
    # –Ø–∫—â–æ —Ç—É—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ñ —è–∫ —î
    
    clean_pickup = clean_address(order_details.get('pickup', ''))
    clean_destination = clean_address(order_details.get('destination', ''))
    
    # –î–∏—Å—Ç–∞–Ω—Ü—ñ—è
    distance_info = ""
    if order_details.get('distance_m'):
        km = order_details.get('distance_m') / 1000.0
        minutes = (order_details.get('duration_s') or 0) / 60.0
        distance_info = f"üìè –í—ñ–¥—Å—Ç–∞–Ω—å: {km:.1f} –∫–º (~{int(minutes)} —Ö–≤)\n"
    
    # –í–∞—Ä—Ç—ñ—Å—Ç—å
    fare_text = ""
    if order_details.get('estimated_fare'):
        fare_text = f"üí∞ <b>–í–ê–†–¢–Ü–°–¢–¨: {int(order_details['estimated_fare'])} –≥—Ä–Ω</b> üí∞\n"
    
    # –ö–ª–∞—Å –∞–≤—Ç–æ
    car_class = order_details.get('car_class', 'economy')
    car_class_name = get_car_class_name(car_class)
    
    # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
    route_link = ""
    pickup_lat = order_details.get('pickup_lat')
    pickup_lon = order_details.get('pickup_lon')
    dest_lat = order_details.get('dest_lat')
    dest_lon = order_details.get('dest_lon')
    
    if pickup_lat and pickup_lon and dest_lat and dest_lon:
        route_link = (
            f"\nüó∫Ô∏è <a href='https://www.google.com/maps/dir/?api=1"
            f"&origin={pickup_lat},{pickup_lon}"
            f"&destination={dest_lat},{dest_lon}"
            f"&travelmode=driving'>–í—ñ–¥–∫—Ä–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞ Google Maps</a>"
        )
    
    return (
        f"‚≠ê <b>–ü–†–Ü–û–†–ò–¢–ï–¢–ù–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b> ‚≠ê\n\n"
        f"<i>–£ –≤–∞—Å —î 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω–Ω—è!</i>\n\n"
        f"üë§ –ö–ª—ñ—î–Ω—Ç: {order_details.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_details.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üìç –ó–≤—ñ–¥–∫–∏: {clean_pickup}\n"
        f"üìç –ö—É–¥–∏: {clean_destination}\n\n"
        f"{distance_info}"
        f"üöó –ö–ª–∞—Å –∞–≤—Ç–æ: {car_class_name}\n"
        f"{fare_text}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order_details.get('comment', '–ù–µ–º–∞—î')}\n"
        f"{route_link}\n\n"
        f"‚è∞ –Ø–∫—â–æ –≤–∏ –Ω–µ –ø—Ä–∏–π–º—ñ—Ç–µ –∞–±–æ –Ω–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ö–≤–∏–ª–∏–Ω–∏,\n"
        f"–≤–æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑'—è–≤–∏—Ç—å—Å—è –≤ –∑–∞–≥–∞–ª—å–Ω—ñ–π –≥—Ä—É–ø—ñ."
    )
