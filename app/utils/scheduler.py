from __future__ import annotations

import asyncio
from datetime import datetime, time, timezone
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from aiogram import Bot


async def commission_reminder_task(bot: Bot, db_path: str) -> None:
    """
    Background task that sends daily commission reminders at 20:00
    
    –ù–∞–≥–∞–¥—É—î –≤–æ–¥—ñ—è–º –ø—Ä–æ –Ω–µ—Å–ø–ª–∞—á–µ–Ω—É –∫–æ–º—ñ—Å—ñ—é —â–æ–¥–Ω—è –æ 20:00.
    –ö–∞—Ä—Ç–∫–∞ –∞–¥–º—ñ–Ω–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –ë–î (app_settings) - –Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –∫–∞–±—ñ–Ω–µ—Ç—ñ –∞–¥–º—ñ–Ω–∞.
    """
    from app.storage.db_connection import db_manager
    import logging
    logger = logging.getLogger(__name__)
    
    while True:
        now = datetime.now(timezone.utc)
        
        # Check if it's 20:00 (8 PM)
        target_time = time(20, 0)  # 20:00
        
        if now.hour == target_time.hour and now.minute == target_time.minute:
            # Send reminders to all drivers with unpaid commission
            try:
                # ‚≠ê –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É –∞–¥–º—ñ–Ω–∞ –∑ –ë–î (–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –∫–∞–±—ñ–Ω–µ—Ç—ñ –∞–¥–º—ñ–Ω–∞)
                admin_payment_card = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
                try:
                    async with db_manager.connect(db_path) as db:
                        row = await db.fetchone("SELECT value FROM app_settings WHERE key = 'admin_payment_card'")
                        if row:
                            admin_payment_card = row[0]
                            logger.info(f"üí≥ –ö–∞—Ä—Ç–∫–∞ –∞–¥–º—ñ–Ω–∞ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {admin_payment_card}")
                        else:
                            logger.warning("‚ö†Ô∏è –ö–∞—Ä—Ç–∫–∞ –∞–¥–º—ñ–Ω–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –≤ –ë–î! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'")
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∞–¥–º—ñ–Ω–∞: {e}")
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–æ–¥—ñ—ó–≤
                async with db_manager.connect(db_path) as db:
                    # Get all approved drivers
                    async with db.execute(
                        "SELECT DISTINCT tg_user_id FROM drivers WHERE status = 'approved'"
                    ) as cur:
                        driver_ids = [row[0] for row in await cur.fetchall()]
                
                logger.info(f"üì¢ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é {len(driver_ids)} –≤–æ–¥—ñ—è–º...")
                
                sent_count = 0
                for driver_id in driver_ids:
                    try:
                        from app.storage.db import get_driver_unpaid_commission
                        
                        unpaid = await get_driver_unpaid_commission(db_path, driver_id)
                        
                        if unpaid > 0:
                            await bot.send_message(
                                driver_id,
                                f"‚è∞ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>\n\n"
                                f"üí∞ –£ –≤–∞—Å —î –Ω–µ—Å–ø–ª–∞—á–µ–Ω–∞ –∫–æ–º—ñ—Å—ñ—è: {unpaid:.2f} –≥—Ä–Ω\n\n"
                                f"üìå <b>–ü–µ—Ä–µ—Ä–∞—Ö—É–π—Ç–µ –∫–æ–º—ñ—Å—ñ—é –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫:</b>\n"
                                f"<code>{admin_payment_card}</code>\n\n"
                                f"–ü—ñ—Å–ª—è –ø–µ—Ä–µ–∫–∞–∑—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver ‚Üí üí≥ –ö–æ–º—ñ—Å—ñ—è ‚Üí '‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤ –∫–æ–º—ñ—Å—ñ—é'"
                            )
                            sent_count += 1
                            logger.info(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥—ñ—é {driver_id}: {unpaid:.2f} –≥—Ä–Ω")
                    except Exception as e:
                        # Ignore errors for individual drivers
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—é {driver_id}: {e}")
                        pass
                
                logger.info(f"üìä –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {sent_count} –∑ {len(driver_ids)} –≤–æ–¥—ñ—ó–≤")
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ task –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é: {e}")
            
            # Sleep for 1 minute to avoid sending multiple times in the same minute
            await asyncio.sleep(60)
        else:
            # Check every minute
            await asyncio.sleep(60)


async def start_scheduler(bot: Bot, db_path: str) -> None:
    """
    Start all scheduled tasks
    
    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        bot: Bot instance
        db_path: –®–ª—è—Ö –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        
    ‚ö†Ô∏è payment_card –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω - –∫–∞—Ä—Ç–∫–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –ë–î!
    """
    # Start commission reminder task (–∫–∞—Ä—Ç–∫–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    asyncio.create_task(commission_reminder_task(bot, db_path))
    
    # ‚ùå –í–ò–ú–ö–ù–ï–ù–û: Location tracking task (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ–∂–Ω—ñ 5 —Ö–≤)
    # –í–æ–¥—ñ–π –¥—ñ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é –¢–Ü–õ–¨–ö–ò –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    # from app.utils.location_tracker import location_reminder_task
    # asyncio.create_task(location_reminder_task(bot, db_path))
