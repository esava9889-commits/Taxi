"""
–ú–µ–Ω–µ–¥–∂–µ—Ä Live Location –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–æ–¥—ñ—ó–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î –≥–µ–æ–ø–æ–∑–∏—Ü—ñ—é –≤–æ–¥—ñ—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
"""
import asyncio
import logging
from typing import Dict, Optional
from datetime import datetime, timezone

logger = logging.getLogger(__name__)


class LiveLocationManager:
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö live locations"""
    
    # –°–ª–æ–≤–Ω–∏–∫: order_id -> {"message_id": int, "user_id": int, "driver_id": int, "task": asyncio.Task}
    active_locations: Dict[int, dict] = {}
    
    @classmethod
    async def start_tracking(
        cls,
        bot,
        order_id: int,
        user_id: int,
        driver_id: int,
        message_id: int,
        db_path: str
    ) -> None:
        """
        –ü–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–æ–¥—ñ—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
        Args:
            bot: Telegram bot instance
            order_id: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            user_id: Telegram ID –∫–ª—ñ—î–Ω—Ç–∞
            driver_id: DB ID –≤–æ–¥—ñ—è
            message_id: ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ live location
            db_path: –®–ª—è—Ö –¥–æ –ë–î
        """
        # –ó—É–ø–∏–Ω–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —è–∫—â–æ —î
        await cls.stop_tracking(order_id)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É
        task = asyncio.create_task(
            cls._update_location_loop(bot, order_id, user_id, driver_id, message_id, db_path)
        )
        
        cls.active_locations[order_id] = {
            "message_id": message_id,
            "user_id": user_id,
            "driver_id": driver_id,
            "task": task,
            "started_at": datetime.now(timezone.utc)
        }
        
        logger.info(f"üìç Live location tracking started for order #{order_id}, message_id={message_id}")
    
    @classmethod
    async def stop_tracking(cls, order_id: int) -> None:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        if order_id not in cls.active_locations:
            logger.debug(f"üìç Order #{order_id} not in active locations, nothing to stop")
            return
        
        location_data = cls.active_locations[order_id]
        task = location_data.get("task")
        
        if task and not task.done():
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
        del cls.active_locations[order_id]
        logger.info(f"üìç Live location tracking stopped for order #{order_id}")
    
    @classmethod
    async def _update_location_loop(
        cls,
        bot,
        order_id: int,
        user_id: int,
        driver_id: int,
        message_id: int,
        db_path: str
    ) -> None:
        """
        –§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó –∫–æ–∂–Ω—ñ 20 —Å–µ–∫—É–Ω–¥
        """
        from app.storage.db import get_driver_by_id, get_order_by_id
        
        try:
            update_count = 0
            max_updates = 45  # 45 –æ–Ω–æ–≤–ª–µ–Ω—å √ó 20 —Å–µ–∫ = 15 —Ö–≤–∏–ª–∏–Ω
            
            while update_count < max_updates:
                await asyncio.sleep(20)  # –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—ñ 20 —Å–µ–∫—É–Ω–¥
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –∞–∫—Ç–∏–≤–Ω–µ
                order = await get_order_by_id(db_path, order_id)
                if not order or order.status not in ["accepted", "in_progress"]:
                    logger.info(f"üìç Order #{order_id} is no longer active, stopping location updates")
                    break
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ª–æ–∫–∞—Ü—ñ—é –≤–æ–¥—ñ—è
                driver = await get_driver_by_id(db_path, driver_id)
                if not driver or not driver.last_lat or not driver.last_lon:
                    logger.warning(f"‚ö†Ô∏è Driver {driver_id} has no location, skipping update")
                    continue
                
                # –û–Ω–æ–≤–∏—Ç–∏ live location
                try:
                    await bot.edit_message_live_location(
                        chat_id=user_id,
                        message_id=message_id,
                        latitude=driver.last_lat,
                        longitude=driver.last_lon
                    )
                    update_count += 1
                    logger.debug(f"üìç Live location updated for order #{order_id} ({update_count}/{max_updates})")
                except Exception as e:
                    error_msg = str(e).lower()
                    if "message is not modified" in error_msg:
                        # –õ–æ–∫–∞—Ü—ñ—è –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                        pass
                    elif "message to edit not found" in error_msg:
                        # –ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        logger.warning(f"‚ö†Ô∏è Live location message deleted by client for order #{order_id}")
                        break
                    else:
                        logger.error(f"‚ùå Error updating live location for order #{order_id}: {e}")
            
            logger.info(f"üìç Live location tracking completed for order #{order_id} after {update_count} updates")
            
        except asyncio.CancelledError:
            logger.info(f"üìç Live location tracking cancelled for order #{order_id}")
            raise
        except Exception as e:
            logger.error(f"‚ùå Fatal error in live location loop for order #{order_id}: {e}", exc_info=True)
        finally:
            # –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            if order_id in cls.active_locations:
                del cls.active_locations[order_id]
    
    @classmethod
    def get_active_count(cls) -> int:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—å"""
        return len(cls.active_locations)
    
    @classmethod
    async def stop_all(cls) -> None:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è (–¥–ª—è shutdown)"""
        order_ids = list(cls.active_locations.keys())
        for order_id in order_ids:
            await cls.stop_tracking(order_id)
        logger.info(f"üìç All live location tracking stopped ({len(order_ids)} orders)")
