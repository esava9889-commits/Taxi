"""–°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤–æ–¥—ñ—ó–≤"""
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from aiogram import Bot

logger = logging.getLogger(__name__)


async def location_reminder_task(bot, db_path: str) -> None:
    """
    –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–æ–¥—ñ—è–º –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó.
    
    –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–≤—ñ—Ä—è—î –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤:
    - –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    - –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 20 —Ö–≤–∏–ª–∏–Ω - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ–¥—ñ—è –≤ –æ—Ñ–ª–∞–π–Ω
    """
    from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
    import aiosqlite
    
    while True:
        try:
            # –ß–µ–∫–∞—Ç–∏ 5 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
            await asyncio.sleep(300)  # 300 —Å–µ–∫—É–Ω–¥ = 5 —Ö–≤–∏–ª–∏–Ω
            
            logger.info("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ–π –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤...")
            
            now = datetime.now(timezone.utc)
            
            async with aiosqlite.connect(db_path) as db:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –æ–Ω–ª–∞–π–Ω –≤–æ–¥—ñ—ó–≤
                async with db.execute(
                    """
                    SELECT id, tg_user_id, full_name, last_seen_at, last_lat, last_lon
                    FROM drivers
                    WHERE status = 'approved' AND online = 1
                    """
                ) as cur:
                    drivers = await cur.fetchall()
            
            for driver_id, tg_user_id, full_name, last_seen_str, last_lat, last_lon in drivers:
                try:
                    # –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                    if not last_seen_str or not last_lat or not last_lon:
                        kb = ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True)],
                                [KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")]
                            ],
                            resize_keyboard=True
                        )
                        
                        await bot.send_message(
                            tg_user_id,
                            "üìç <b>–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é</b>\n\n"
                            "–©–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥,\n"
                            "–ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.\n\n"
                            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
                            reply_markup=kb
                        )
                        logger.info(f"üì® –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ª–æ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–æ–¥—ñ—î–≤—ñ {full_name}")
                        continue
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –ª–æ–∫–∞—Ü—ñ—è
                    last_seen = datetime.fromisoformat(last_seen_str)
                    time_diff = (now - last_seen).total_seconds() / 60  # –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
                    
                    # –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 20 —Ö–≤–∏–ª–∏–Ω - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ—Ñ–ª–∞–π–Ω
                    if time_diff > 20:
                        from app.storage.db import set_driver_online
                        await set_driver_online(db_path, tg_user_id, False)
                        
                        await bot.send_message(
                            tg_user_id,
                            "üî¥ <b>–í–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ñ –≤ –æ—Ñ–ª–∞–π–Ω</b>\n\n"
                            "–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∞—Å—å –±—ñ–ª—å—à–µ 20 —Ö–≤–∏–ª–∏–Ω.\n\n"
                            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:\n"
                            "1. –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –ª–æ–∫–∞—Ü—ñ—î—é üìç\n"
                            "2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É'\n"
                            "3. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –æ–Ω–ª–∞–π–Ω üü¢"
                        )
                        logger.warning(f"üî¥ –í–æ–¥—ñ–π {full_name} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–π –≤ –æ—Ñ–ª–∞–π–Ω (–∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –ª–æ–∫–∞—Ü—ñ—è)")
                    
                    # –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ—è —Å—Ç–∞—Ä—ñ—à–∞ –∑–∞ 10 —Ö–≤–∏–ª–∏–Ω - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                    elif time_diff > 10:
                        kb = ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="üìç –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", request_location=True)],
                                [KeyboardButton(text="üöó –ü–∞–Ω–µ–ª—å –≤–æ–¥—ñ—è")]
                            ],
                            resize_keyboard=True
                        )
                        
                        await bot.send_message(
                            tg_user_id,
                            f"‚ö†Ô∏è <b>–û–Ω–æ–≤—ñ—Ç—å –≤–∞—à—É –ª–æ–∫–∞—Ü—ñ—é</b>\n\n"
                            f"–í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∞—Å—å {int(time_diff)} —Ö–≤.\n\n"
                            f"–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä—è–¥,\n"
                            f"–æ–Ω–æ–≤—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é üëá",
                            reply_markup=kb
                        )
                        logger.info(f"üì® –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–æ–¥—ñ—î–≤—ñ {full_name}")
                
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–æ–¥—ñ—è {tg_user_id}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–æ–±–ª–µ–Ω–æ {len(drivers)} –≤–æ–¥—ñ—ó–≤")
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ location_reminder_task: {e}")
            await asyncio.sleep(60)  # –ü–æ—á–µ–∫–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é


async def check_driver_location_status(db_path: str, tg_user_id: int) -> dict:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –≤–æ–¥—ñ—è.
    
    Returns:
        dict: {
            'has_location': bool,
            'age_minutes': int,
            'status': 'fresh' | 'warning' | 'stale' | 'none'
        }
    """
    import aiosqlite
    
    async with aiosqlite.connect(db_path) as db:
        async with db.execute(
            "SELECT last_seen_at, last_lat, last_lon FROM drivers WHERE tg_user_id = ?",
            (tg_user_id,)
        ) as cur:
            row = await cur.fetchone()
    
    if not row:
        return {'has_location': False, 'age_minutes': 0, 'status': 'none'}
    
    last_seen_str, last_lat, last_lon = row
    
    if not last_seen_str or not last_lat or not last_lon:
        return {'has_location': False, 'age_minutes': 0, 'status': 'none'}
    
    last_seen = datetime.fromisoformat(last_seen_str)
    now = datetime.now(timezone.utc)
    age_minutes = int((now - last_seen).total_seconds() / 60)
    
    if age_minutes < 10:
        status = 'fresh'  # –°–≤—ñ–∂–∞ –ª–æ–∫–∞—Ü—ñ—è
    elif age_minutes < 20:
        status = 'warning'  # –ü–æ—Ç—Ä–µ–±—É—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    else:
        status = 'stale'  # –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞
    
    return {
        'has_location': True,
        'age_minutes': age_minutes,
        'status': status
    }
