from __future__ import annotations

import asyncio
import logging
import os
import signal
import sys

from aiogram import Dispatcher, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from aiohttp import web

from app.config.config import load_config
from app.handlers.order import create_router as create_order_router
from app.handlers.start import create_router as create_start_router
from app.handlers.registration import create_registration_router
from app.handlers.driver import create_router as create_driver_router
from app.handlers.admin import create_router as create_admin_router
from app.handlers.driver_panel import create_router as create_driver_panel_router
from app.handlers.client import create_router as create_client_router
from app.handlers.ratings import create_router as create_ratings_router
from app.handlers.saved_addresses import create_router as create_saved_addresses_router
from app.handlers.cancel_reasons import create_router as create_cancel_reasons_router
from app.handlers.chat import create_router as create_chat_router
from app.handlers.promocodes import create_router as create_promocodes_router
from app.handlers.sos import create_router as create_sos_router
from app.handlers.live_tracking import create_router as create_live_tracking_router
from app.handlers.tips import create_router as create_tips_router
# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –ø—Ä–∏–±—Ä–∞–Ω–∞
# from app.handlers.referral import create_router as create_referral_router
from app.handlers.client_rating import create_router as create_client_rating_router
from app.handlers.voice_input import create_router as create_voice_input_router
# –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ü–†–ò–ë–†–ê–ù–û - –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞
# from app.handlers.driver_analytics import create_router as create_driver_analytics_router
from app.handlers.webapp import create_router as create_webapp_router  # WebApp –∑ –∫–∞—Ä—Ç–æ—é
from app.storage.db import init_db
from app.utils.scheduler import start_scheduler


async def health_check(request):
    """Health check endpoint for Render"""
    return web.Response(text="OK", status=200)


async def telegram_webhook_handler(request, bot, dp):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ Telegram webhook –∑–∞–ø–∏—Ç—ñ–≤
    
    Args:
        request: aiohttp request
        bot: Bot instance
        dp: Dispatcher instance
    """
    from aiogram.types import Update
    import traceback
    
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ JSON –≤—ñ–¥ Telegram
        data = await request.json()
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ Update –æ–±'—î–∫—Ç
        update = Update(**data)
        
        # –û–±—Ä–æ–±–∏—Ç–∏ —á–µ—Ä–µ–∑ dispatcher
        await dp.feed_update(bot, update)
        
        return web.Response(status=200)
    except Exception as e:
        # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ "message is not modified" - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        error_text = str(e)
        if "message is not modified" in error_text.lower():
            logging.debug(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∏–º —Å–∞–º–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (—ñ–≥–Ω–æ—Ä—É—î–º–æ): {e}")
            return web.Response(status=200)  # OK - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
        
        # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ –ø–æ–≤–Ω–∏–º traceback –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {e}")
        logging.error(f"üìú Traceback:\n{traceback.format_exc()}")
        return web.Response(status=500)


async def start_webhook_server(bot=None, dp=None):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç–∏ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook, health checks —Ç–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    
    Args:
        bot: Bot instance (–¥–ª—è webhook)
        dp: Dispatcher instance (–¥–ª—è webhook)
    """
    app = web.Application()
    
    # Health check endpoints
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üó∫Ô∏è –°–¢–ê–¢–ò–ß–ù–Ü –§–ê–ô–õ–ò (WebApp –∫–∞—Ä—Ç–∞)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —à–ª—è—Ö –¥–æ webapp –ø–∞–ø–∫–∏
    # main.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ app/, webapp/ –Ω–∞ —Ä—ñ–≤–µ–Ω—å –≤–∏—â–µ
    webapp_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'webapp')
    
    if os.path.exists(webapp_dir):
        # –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ä–æ—É—Ç –¥–ª—è webapp —Ñ–∞–π–ª—ñ–≤
        app.router.add_static('/webapp/', webapp_dir, name='webapp')
        logging.info(f"üó∫Ô∏è Static files (WebApp) enabled: /webapp/ ‚Üí {webapp_dir}")
        logging.info(f"‚úÖ WebApp –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: https://your-app.onrender.com/webapp/index.html")
    else:
        logging.warning(f"‚ö†Ô∏è WebApp directory not found: {webapp_dir}")
    
    # Webhook endpoint (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ bot —ñ dp)
    if bot and dp:
        webhook_token = bot.token.split(':')[1]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É —Ç–æ–∫–µ–Ω—É —è–∫ secret
        webhook_path = f'/webhook/{webhook_token}'
        
        # –î–æ–¥–∞—Ç–∏ webhook handler
        app.router.add_post(
            webhook_path,
            lambda req: telegram_webhook_handler(req, bot, dp)
        )
        logging.info(f"üéØ Webhook endpoint: {webhook_path}")
    
    port = int(os.getenv('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"üåê HTTP server started on port {port}")


async def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger = logging.getLogger(__name__)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DATABASE_URL –Ω–∞ Render
    if os.getenv('RENDER'):
        database_url = os.getenv('DATABASE_URL')
        logger.info("="*60)
        logger.info("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ –ù–ê RENDER")
        logger.info("="*60)
        
        if database_url:
            # –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            safe_url = database_url.split('@')[0].split('://')[0] + "://***@" + database_url.split('@')[1] if '@' in database_url else "***"
            logger.info(f"‚úÖ DATABASE_URL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {safe_url}")
            
            if database_url.startswith("postgres://") or database_url.startswith("postgresql://"):
                logger.info("‚úÖ DATABASE_URL –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ postgres:// - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é PostgreSQL")
            else:
                logger.warning(f"‚ö†Ô∏è  DATABASE_URL –ù–ï –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ postgres:// (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑: {database_url.split('://')[0]}://)")
                logger.warning("‚ö†Ô∏è  –ë—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ SQLite, —â–æ –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –Ω–∞ Render!")
        else:
            logger.error("‚ùå DATABASE_URL –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û –Ω–∞ Render!")
            logger.error("‚ùå –ù–∞–ª–∞—à—Ç—É–π—Ç–µ PostgreSQL –≤ Render Dashboard:")
            logger.error("   1. Dashboard ‚Üí Services ‚Üí New ‚Üí PostgreSQL")
            logger.error("   2. –°–∫–æ–ø—ñ—é–π—Ç–µ Internal Database URL")
            logger.error("   3. Environment ‚Üí Add DATABASE_URL")
            logger.warning("‚ö†Ô∏è  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é SQLite (–¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ!)")
        
        logger.info("="*60)
        
        startup_delay = 60  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è PostgreSQL + –º—ñ–≥—Ä–∞—Ü—ñ—ó!
        logging.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –∑–∞–ø—É—Å–∫—É {startup_delay}s –¥–ª—è graceful shutdown —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É...")
        for i in range(startup_delay):
            if i % 10 == 0:
                logging.info(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è... {startup_delay - i}s –∑–∞–ª–∏—à–∏–ª–æ—Å—å")
            await asyncio.sleep(1)

    config = load_config()
    await init_db(config.database_path)

    bot = Bot(token=config.bot.token, default=DefaultBotProperties(parse_mode="HTML"))
    
    # ‚≠ê FSM Strategy: GLOBAL_USER - –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞–Ω —Ç—ñ–ª—å–∫–∏ –ø–æ user_id (–Ω–µ chat_id)
    # –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–æ–¥—ñ—é –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏" –≤ –≥—Ä—É–ø—ñ, –∞ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
    dp = Dispatcher(
        storage=MemoryStorage(),
        fsm_strategy=FSMStrategy.GLOBAL_USER  # –¢—ñ–ª—å–∫–∏ user_id, –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ chat_id
    )

    # Include all routers (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
    dp.include_router(create_webapp_router(config))  # WebApp –ü–ï–†–®–ò–ú (–æ–±—Ä–æ–±–ª—è—î web_app_data!)
    dp.include_router(create_start_router(config))
    dp.include_router(create_registration_router(config))  # Registration module
    dp.include_router(create_saved_addresses_router(config))  # –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ - –ü–ï–†–ï–î order (state –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç!)
    dp.include_router(create_order_router(config))  # Order –ø–µ—Ä–µ–¥ Client!
    dp.include_router(create_admin_router(config))  # Admin –ü–ï–†–ï–î driver_panel (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∞–¥–º—ñ–Ω–∞!)
    dp.include_router(create_driver_panel_router(config))
    dp.include_router(create_driver_router(config))
    dp.include_router(create_ratings_router(config))
    dp.include_router(create_cancel_reasons_router(config))  # –ü—Ä–∏—á–∏–Ω–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    dp.include_router(create_chat_router(config))  # –ß–∞—Ç
    dp.include_router(create_promocodes_router(config))  # –ü—Ä–æ–º–æ–∫–æ–¥–∏
    dp.include_router(create_sos_router(config))  # SOS
    dp.include_router(create_live_tracking_router(config))  # –ñ–∏–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    dp.include_router(create_tips_router(config))  # –ß–∞–π–æ–≤—ñ
    # dp.include_router(create_referral_router(config))  # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ - –ü–†–ò–ë–†–ê–ù–û
    dp.include_router(create_client_rating_router(config))  # –†–µ–π—Ç–∏–Ω–≥ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    dp.include_router(create_voice_input_router(config))  # –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥
    # dp.include_router(create_driver_analytics_router(config))  # –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–æ–¥—ñ—è - –ü–†–ò–ë–†–ê–ù–û
    dp.include_router(create_client_router(config))  # Client –æ—Å—Ç–∞–Ω–Ω—ñ–π

    # Start scheduled tasks
    await start_scheduler(bot, config.database_path, config.payment_card)
    
    logging.info("üöÄ Bot started successfully!")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
    try:
        me = await bot.get_me()
        logging.info(f"‚úÖ –ë–æ—Ç @{me.username} (ID: {me.id}) –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –±–æ—Ç–∞: {e}")
    
    # === –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –†–ï–ñ–ò–ú–£: WEBHOOK –∞–±–æ POLLING ===
    use_webhook = bool(
        os.getenv('WEBHOOK_URL') or 
        os.getenv('RENDER') or 
        os.getenv('PRODUCTION')
    )
    
    if use_webhook:
        # ========================================
        # üéØ WEBHOOK MODE (Production)
        # ========================================
        logging.info("=" * 60)
        logging.info("üéØ –†–ï–ñ–ò–ú: WEBHOOK (Production)")
        logging.info("=" * 60)
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è webhook
        webhook_base_url = os.getenv('WEBHOOK_URL')
        
        if not webhook_base_url:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ URL –Ω–∞ Render
            render_service = os.getenv('RENDER_SERVICE_NAME', 'taxi-bot')
            webhook_base_url = f"https://{render_service}.onrender.com"
            logging.info(f"üîç WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é: {webhook_base_url}")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ webhook URL –∑ —Å–µ–∫—Ä–µ—Ç–Ω–∏–º —Ç–æ–∫–µ–Ω–æ–º
        webhook_token = bot.token.split(':')[1]
        webhook_url = f"{webhook_base_url}/webhook/{webhook_token}"
        
        try:
            # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook –≤ Telegram
            await bot.set_webhook(
                url=webhook_url,
                drop_pending_updates=True,
                allowed_updates=dp.resolve_used_update_types()
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            webhook_info = await bot.get_webhook_info()
            
            logging.info("‚úÖ Webhook –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            logging.info(f"üìç URL: {webhook_info.url}")
            logging.info(f"üìä Pending updates: {webhook_info.pending_update_count}")
            
            if webhook_info.last_error_date:
                logging.warning(f"‚ö†Ô∏è –û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞: {webhook_info.last_error_message}")
            
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook: {e}")
            logging.error("–ü–µ—Ä–µ–º–∏–∫–∞—é—Å—å –Ω–∞ Polling...")
            use_webhook = False
        
        if use_webhook:
            # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ HTTP —Å–µ—Ä–≤–µ—Ä –∑ webhook handler
            await start_webhook_server(bot, dp)
            
            logging.info("üéØ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ!")
            logging.info("‚ö° –ë–æ—Ç –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ú–ò–¢–¢–Ñ–í–û")
            logging.info("üí∞ –ï–∫–æ–Ω–æ–º—ñ—è —Ä–µ—Å—É—Ä—Å—ñ–≤: ~90%")
            
            # –¢—Ä–∏–º–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–º
            try:
                # –ß–µ–∫–∞—Ç–∏ –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ (—Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –≤ —Ñ–æ–Ω—ñ)
                await asyncio.Event().wait()
            except (KeyboardInterrupt, SystemExit):
                logging.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
            finally:
                # –í–∏–¥–∞–ª–∏—Ç–∏ webhook –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ
                try:
                    await bot.delete_webhook()
                    logging.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")
                except Exception:
                    pass
    
    if not use_webhook:
        # ========================================
        # üîÑ POLLING MODE (Development)
        # ========================================
        logging.info("=" * 60)
        logging.info("üîÑ –†–ï–ñ–ò–ú: POLLING (Development)")
        logging.info("=" * 60)
        logging.info("‚ö†Ô∏è –î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ WEBHOOK")
        logging.info("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å WEBHOOK_URL –∞–±–æ PRODUCTION=1 –¥–ª—è webhook")
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ webhook —è–∫—â–æ –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–Ω—ñ—à–µ
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logging.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –ø–µ—Ä–µ–º–∏–∫–∞—é—Å—å –Ω–∞ Polling")
            await asyncio.sleep(2)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
        
        # ‚≠ê –ó–∞–ø—É—Å—Ç–∏—Ç–∏ HTTP —Å–µ—Ä–≤–µ—Ä –ë–ï–ó webhook handler (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤)
        asyncio.create_task(start_webhook_server(bot=None, dp=None))
        logging.info("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ (WebApp)")
        
        # –ó–∞–ø—É—Å–∫ polling –∑ retry –ø—Ä–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ
        max_retries = 3
        retry_delay = 10
        
        try:
            for attempt in range(max_retries):
                try:
                    if attempt > 0:
                        logging.info(f"üîÑ –°–ø—Ä–æ–±–∞ {attempt + 1}/{max_retries} –∑–∞–ø—É—Å–∫—É polling...")
                        await asyncio.sleep(retry_delay * attempt)
                    else:
                        logging.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
                    
                    await dp.start_polling(bot, allowed_updates=None)
                    break
                    
                except Exception as e:
                    if "Conflict" in str(e):
                        if attempt < max_retries - 1:
                            logging.warning(
                                f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt + 1}/{max_retries}. "
                                f"–ß–µ–∫–∞—é {retry_delay * (attempt + 1)}s..."
                            )
                            continue
                        else:
                            logging.error("üî¥ –ö–†–ò–¢–ò–ß–ù–ò–ô –ö–û–ù–§–õ–Ü–ö–¢!")
                    logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                    if attempt == max_retries - 1:
                        raise
        finally:
            # Cleanup
            try:
                await bot.session.close()
            except Exception:
                pass
            logging.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
