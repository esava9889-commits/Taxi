from __future__ import annotations

import asyncio
import logging
import os
import signal
import sys

from aiogram import Dispatcher, Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

from app.config.config import load_config
from app.handlers.order import create_router as create_order_router
from app.handlers.start import create_router as create_start_router
from app.handlers.registration import create_registration_router
from app.handlers.driver import create_router as create_driver_router
from app.handlers.admin import create_router as create_admin_router
from app.handlers.driver_panel import create_router as create_driver_panel_router
from app.handlers.client import create_router as create_client_router
from app.handlers.ratings import create_router as create_ratings_router
from app.handlers.saved_addresses import create_router as create_saved_addresses_router
from app.handlers.cancel_reasons import create_router as create_cancel_reasons_router
from app.handlers.chat import create_router as create_chat_router
from app.handlers.promocodes import create_router as create_promocodes_router
from app.handlers.sos import create_router as create_sos_router
from app.handlers.live_tracking import create_router as create_live_tracking_router
from app.handlers.tips import create_router as create_tips_router
from app.handlers.referral import create_router as create_referral_router
from app.handlers.client_rating import create_router as create_client_rating_router
from app.handlers.voice_input import create_router as create_voice_input_router
from app.handlers.driver_analytics import create_router as create_driver_analytics_router
from app.storage.db import init_db
from app.utils.scheduler import start_scheduler


async def health_check(request):
    """Health check endpoint for Render"""
    return web.Response(text="OK", status=200)


async def start_webhook_server():
    """Start simple HTTP server for Render health checks"""
    app = web.Application()
    app.router.add_get('/health', health_check)
    app.router.add_get('/', health_check)
    
    port = int(os.getenv('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"üåê Health check server started on port {port}")


async def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —â–æ–± —Å—Ç–∞—Ä–∏–π –ø—Ä–æ—Ü–µ—Å –≤—Å—Ç–∏–≥ –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—å
    if os.getenv('RENDER'):
        startup_delay = 15  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–æ 15 —Å–µ–∫—É–Ω–¥!
        logging.info(f"‚è≥ –ó–∞—Ç—Ä–∏–º–∫–∞ –∑–∞–ø—É—Å–∫—É {startup_delay}s –¥–ª—è graceful shutdown —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É...")
        await asyncio.sleep(startup_delay)

    config = load_config()
    await init_db(config.database_path)

    bot = Bot(token=config.bot.token, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=MemoryStorage())

    # Include all routers (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
    dp.include_router(create_start_router(config))
    dp.include_router(create_registration_router(config))  # Registration module
    dp.include_router(create_order_router(config))  # Order –ø–µ—Ä–µ–¥ Client!
    dp.include_router(create_driver_panel_router(config))
    dp.include_router(create_driver_router(config))
    dp.include_router(create_admin_router(config))
    dp.include_router(create_ratings_router(config))
    dp.include_router(create_saved_addresses_router(config))  # –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏
    dp.include_router(create_cancel_reasons_router(config))  # –ü—Ä–∏—á–∏–Ω–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    dp.include_router(create_chat_router(config))  # –ß–∞—Ç
    dp.include_router(create_promocodes_router(config))  # –ü—Ä–æ–º–æ–∫–æ–¥–∏
    dp.include_router(create_sos_router(config))  # SOS
    dp.include_router(create_live_tracking_router(config))  # –ñ–∏–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
    dp.include_router(create_tips_router(config))  # –ß–∞–π–æ–≤—ñ
    dp.include_router(create_referral_router(config))  # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞
    dp.include_router(create_client_rating_router(config))  # –†–µ–π—Ç–∏–Ω–≥ –∫–ª—ñ—î–Ω—Ç—ñ–≤
    dp.include_router(create_voice_input_router(config))  # –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥
    dp.include_router(create_driver_analytics_router(config))  # –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –≤–æ–¥—ñ—è
    dp.include_router(create_client_router(config))  # Client –æ—Å—Ç–∞–Ω–Ω—ñ–π

    # Start scheduled tasks
    await start_scheduler(bot, config.database_path, config.payment_card)
    
    # Start health check server for Render (if on Render)
    if os.getenv('RENDER'):
        asyncio.create_task(start_webhook_server())
        logging.info("üè• Health check server enabled for Render")
    
    logging.info("üöÄ Bot started successfully!")

    # –í–∏–¥–∞–ª–∏—Ç–∏ webhook —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ pending updates
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, pending updates –æ—á–∏—â–µ–Ω–æ")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {e}")
    
    # –û–±—Ä–æ–±–Ω–∏–∫ graceful shutdown
    shutdown_event = asyncio.Event()
    
    def signal_handler(sig, frame):
        logging.info(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {sig}, graceful shutdown...")
        shutdown_event.set()
    
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
    if sys.platform != 'win32':
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ polling –∑ –æ–±—Ä–æ–±–∫–æ—é –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    try:
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        
        # Polling task
        polling_task = asyncio.create_task(dp.start_polling(bot, allowed_updates=None))
        
        # –ß–µ–∫–∞—î–º–æ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è polling –∞–±–æ shutdown
        done, pending = await asyncio.wait(
            [polling_task, asyncio.create_task(shutdown_event.wait())],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –Ø–∫—â–æ shutdown - –∑—É–ø–∏–Ω—è—î–º–æ polling
        if shutdown_event.is_set():
            logging.info("üõë –ó—É–ø–∏–Ω–∫–∞ polling...")
            await dp.stop_polling()
            try:
                await bot.session.close()
            except Exception:
                pass
            logging.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        if "Conflict" in str(e):
            logging.error(
                "üî¥ –ö–û–ù–§–õ–Ü–ö–¢: –Ü–Ω—à–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π!\n"
                "–ó—É–ø–∏–Ω—ñ—Ç—å –≤—Å—ñ —ñ–Ω—à—ñ –ø—Ä–æ—Ü–µ—Å–∏ –±–æ—Ç–∞:\n"
                "  - –õ–æ–∫–∞–ª—å–Ω—ñ –∑–∞–ø—É—Å–∫–∏ (–Ω–∞ –≤–∞—à–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ)\n"
                "  - –Ü–Ω—à—ñ –¥–µ–ø–ª–æ—ó –Ω–∞ Render/Railway/—ñ–Ω—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö\n"
                "Telegram –¥–æ–∑–≤–æ–ª—è—î —Ç—ñ–ª—å–∫–∏ –û–î–ò–ù –∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞.\n\n"
                "üí° –†—ñ—à–µ–Ω–Ω—è: Render Dashboard ‚Üí Settings ‚Üí —Ç–∏–ø 'Background Worker' –∑–∞–º—ñ—Å—Ç—å 'Web Service'"
            )
        raise
    finally:
        # Cleanup
        try:
            await bot.session.close()
        except Exception:
            pass
        logging.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
