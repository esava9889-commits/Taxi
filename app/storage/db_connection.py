"""–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π connection manager –¥–ª—è SQLite —Ç–∞ PostgreSQL"""
import os
import logging
from typing import Optional, Any
from contextlib import asynccontextmanager

try:
    import asyncpg
except ImportError:
    asyncpg = None

logger = logging.getLogger(__name__)


class DatabaseConnection:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ SQLite –∞–±–æ PostgreSQL)"""
    
    def __init__(self):
        self.db_type: Optional[str] = None
        self.db_url: Optional[str] = None
        self._detect_database()
    
    def _detect_database(self):
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ë–î –∑ environment variables"""
        database_url = os.getenv("DATABASE_URL")
        
        if database_url and (database_url.startswith("postgres") or database_url.startswith("postgresql")):
            self.db_type = "postgres"
            # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ postgres:// –Ω–∞ postgresql://
            if database_url.startswith("postgres://"):
                database_url = database_url.replace("postgres://", "postgresql://", 1)
            self.db_url = database_url
            logger.info(f"üêò Database: PostgreSQL")
        else:
            self.db_type = "sqlite"
            logger.info(f"üìÅ Database: SQLite")
    
    def connect(self, db_path: str):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ connection (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ SQLite –∞–±–æ PostgreSQL)"""
        return _connection_context(self, db_path)


@asynccontextmanager
async def _connection_context(manager: DatabaseConnection, db_path: str):
    """Async context manager –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    logger.debug(f"üîå –í—ñ–¥–∫—Ä–∏–≤–∞—é –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {manager.db_type}...")
    
    if manager.db_type == "postgres":
        import asyncpg
        try:
            conn = await asyncpg.connect(manager.db_url)
            logger.debug("‚úÖ PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            try:
                yield PostgresAdapter(conn)
            finally:
                await conn.close()
                logger.debug("üîí PostgreSQL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è PostgreSQL: {e}")
            raise
    else:
        import aiosqlite
        try:
            conn = await aiosqlite.connect(db_path)
            logger.debug(f"‚úÖ SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {db_path}")
            try:
                yield SQLiteAdapter(conn)
            finally:
                await conn.close()
                logger.debug("üîí SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è SQLite: {e}")
            raise


class SQLiteCursor:
    """–û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è aiosqlite cursor –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é await"""
    
    def __init__(self, adapter, query, params):
        self.adapter = adapter
        self.query = query
        self.params = params
        self._cursor = None
        self._executed = False
        self._lastrowid = None
        self._rowcount = 0
    
    async def __aenter__(self):
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ cursor —á–µ—Ä–µ–∑ async context manager"""
        if not self._cursor:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ cursor –≤—ñ–¥ connection
            self._cursor = self.adapter.conn.execute(self.query, self.params or ())
        # –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π aiosqlite cursor
        await self._cursor.__aenter__()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä–∏—Ç–∏ cursor"""
        if self._cursor:
            await self._cursor.__aexit__(exc_type, exc_val, exc_tb)
        return False
    
    def __await__(self):
        """–ó—Ä–æ–±–∏—Ç–∏ cursor awaitable –¥–ª—è INSERT/UPDATE/DELETE –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        return self._execute_and_return_self().__await__()
    
    async def _execute_and_return_self(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ self"""
        if not self._executed:
            await self._execute()
        return self
    
    async def _execute(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç"""
        if self._executed:
            return
        
        self._executed = True
        # aiosqlite.Connection.execute() –ù–ï —î coroutine - –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î cursor
        self._cursor = self.adapter.conn.execute(self.query, self.params or ())
    
    @property
    def lastrowid(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
        if self._cursor:
            return self._cursor.lastrowid
        return None
    
    @property
    def rowcount(self):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤"""
        if self._cursor:
            return self._cursor.rowcount
        return 0
    
    async def fetchone(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫"""
        if not self._cursor:
            # aiosqlite.Connection.execute() –ù–ï —î coroutine
            self._cursor = self.adapter.conn.execute(self.query, self.params or ())
        return await self._cursor.fetchone()
    
    async def fetchall(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏"""
        if not self._cursor:
            # aiosqlite.Connection.execute() –ù–ï —î coroutine
            self._cursor = self.adapter.conn.execute(self.query, self.params or ())
        return await self._cursor.fetchall()


class SQLiteAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è SQLite"""
    
    def __init__(self, conn):
        self.conn = conn
        self.is_postgres = False
    
    def _convert_params(self, params):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ datetime –æ–±'—î–∫—Ç–∏ –≤ ISO string –¥–ª—è SQLite"""
        if not params:
            return params
        
        from datetime import datetime, date
        converted = []
        for param in params:
            if isinstance(param, (datetime, date)):
                # SQLite –æ—á—ñ–∫—É—î —Ä—è–¥–∫–∏ –¥–ª—è –¥–∞—Ç
                converted.append(param.isoformat())
            else:
                converted.append(param)
        return tuple(converted)
    
    def execute(self, query: str, params=None):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î async context manager –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é await"""
        if params:
            params = self._convert_params(params)
        return SQLiteCursor(self, query, params)
    
    async def commit(self):
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"""
        await self.conn.commit()
    
    async def fetchone(self, query: str, params=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫"""
        if params:
            params = self._convert_params(params)
        async with self.conn.execute(query, params or ()) as cur:
            return await cur.fetchone()
    
    async def fetchall(self, query: str, params=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏"""
        if params:
            params = self._convert_params(params)
        async with self.conn.execute(query, params or ()) as cur:
            return await cur.fetchall()


class PostgresCursor:
    """–ï–º—É–ª—è—Ü—ñ—è cursor –¥–ª—è PostgreSQL –∑ async context manager —Ç–∞ awaitable"""
    
    def __init__(self, adapter, query, params):
        self.adapter = adapter
        self.query = adapter._convert_query(query)
        self.params = params
        self._result = None
        self._lastrowid = None
        self._rowcount = 0
        self._executed = False
    
    async def __aenter__(self):
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        return False
    
    def __await__(self):
        """–ó—Ä–æ–±–∏—Ç–∏ cursor awaitable –¥–ª—è INSERT/UPDATE/DELETE –æ–ø–µ—Ä–∞—Ü—ñ–π"""
        return self._execute_and_return_self().__await__()
    
    async def _execute_and_return_self(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ self"""
        if not self._executed:
            await self._execute()
        return self
    
    async def _execute(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–ª—è INSERT/UPDATE/DELETE"""
        if self._executed:
            return
        
        self._executed = True
        
        # –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
        query_upper = self.query.strip().upper()
        
        if query_upper.startswith('INSERT'):
            # –î–ª—è INSERT —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ id —á–µ—Ä–µ–∑ RETURNING
            # –ê–ª–µ —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ –º–∞—î 'id', —Ü–µ –Ω–µ —Å–ø—Ä–∞—Ü—é—î
            if 'RETURNING' not in query_upper:
                # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑ RETURNING id
                try:
                    returning_query = self.query.rstrip(';') + ' RETURNING id'
                    if self.params:
                        result = await self.adapter.conn.fetchrow(returning_query, *self.params)
                    else:
                        result = await self.adapter.conn.fetchrow(returning_query)
                    
                    if result and 'id' in result:
                        self._lastrowid = result['id']
                        self._rowcount = 1
                    else:
                        self._rowcount = 1
                except Exception as e:
                    # –Ø–∫—â–æ –∫–æ–ª–æ–Ω–∫–∞ 'id' –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ PostgreSQL, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ INSERT –±–µ–∑ RETURNING
                    logger.debug(f"INSERT –±–µ–∑ RETURNING id (—Ç–∞–±–ª–∏—Ü—è –º–æ–∂–µ –Ω–µ –º–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ 'id'): {type(e).__name__}")
                    try:
                        if self.params:
                            status = await self.adapter.conn.execute(self.query, *self.params)
                        else:
                            status = await self.adapter.conn.execute(self.query)
                        
                        # –î–ª—è INSERT status –±—É–¥–µ "INSERT 0 1" (0 = OID, 1 = rows affected)
                        self._rowcount = 1
                    except Exception as e2:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è INSERT: {e2}")
                        raise
            else:
                # –Ø–∫—â–æ RETURNING –≤–∂–µ —î –≤ –∑–∞–ø–∏—Ç—ñ
                if self.params:
                    result = await self.adapter.conn.fetchrow(self.query, *self.params)
                else:
                    result = await self.adapter.conn.fetchrow(self.query)
                
                if result and 'id' in result:
                    self._lastrowid = result['id']
                self._rowcount = 1
        else:
            # –î–ª—è UPDATE/DELETE
            if self.params:
                result = await self.adapter.conn.execute(self.query, *self.params)
            else:
                result = await self.adapter.conn.execute(self.query)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ rowcount –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (format: "UPDATE 5")
            if result:
                try:
                    parts = result.split()
                    if len(parts) >= 2:
                        self._rowcount = int(parts[-1])
                except:
                    self._rowcount = 0
    
    @property
    def lastrowid(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
        return self._lastrowid
    
    @property
    def rowcount(self):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤"""
        return self._rowcount
    
    async def fetchone(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫"""
        if self.params:
            return await self.adapter.conn.fetchrow(self.query, *self.params)
        return await self.adapter.conn.fetchrow(self.query)
    
    async def fetchall(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏"""
        if self.params:
            rows = await self.adapter.conn.fetch(self.query, *self.params)
        else:
            rows = await self.adapter.conn.fetch(self.query)
        return [tuple(row.values()) for row in rows] if rows else []


class PostgresAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è PostgreSQL"""
    
    def __init__(self, conn):
        self.conn = conn
        self.is_postgres = True
        self._last_cursor = None
        self._last_insert_id = None
    
    def _convert_query(self, query: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ ? –Ω–∞ $1, $2, ... –¥–ª—è PostgreSQL"""
        parts = query.split('?')
        if len(parts) == 1:
            return query
        
        result = parts[0]
        for i, part in enumerate(parts[1:], 1):
            result += f"${i}" + part
        
        return result
    
    def execute(self, query: str, params=None):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç - –ø–æ–≤–µ—Ä—Ç–∞—î async context manager (cursor)"""
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ PostgresCursor —è–∫–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É—î async with
        return PostgresCursor(self, query, params)
    
    async def commit(self):
        """PostgreSQL –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —è–≤–Ω–æ–≥–æ commit"""
        pass
    
    @property
    def lastrowid(self):
        """–ï–º—É–ª—è—Ü—ñ—è lastrowid –¥–ª—è PostgreSQL"""
        return self._last_insert_id if hasattr(self, '_last_insert_id') else None
    
    @property  
    def rowcount(self):
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤"""
        if self._last_cursor:
            try:
                return int(self._last_cursor.split()[-1])
            except:
                return 0
        return 0
    
    async def fetchone(self, query: str, params=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫"""
        query = self._convert_query(query)
        if params:
            return await self.conn.fetchrow(query, *params)
        return await self.conn.fetchrow(query)
    
    async def fetchall(self, query: str, params=None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏"""
        query = self._convert_query(query)
        if params:
            rows = await self.conn.fetch(query, *params)
        else:
            rows = await self.conn.fetch(query)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ asyncpg.Record –≤ tuple –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        return [tuple(row.values()) for row in rows] if rows else []


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å
db_manager = DatabaseConnection()
