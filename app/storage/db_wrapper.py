"""–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è SQLite —Ç–∞ PostgreSQL"""
import os
import logging
from typing import Optional, Any, List
from contextlib import asynccontextmanager

logger = logging.getLogger(__name__)


class DatabaseWrapper:
    """–û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ SQLite –∞–±–æ PostgreSQL"""
    
    def __init__(self):
        self.db_type: Optional[str] = None
        self.db_url: Optional[str] = None
        self.db_path: Optional[str] = None
        self._detect_database()
    
    def _detect_database(self):
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ë–î –∑ environment variables"""
        database_url = os.getenv("DATABASE_URL")
        
        if database_url and (database_url.startswith("postgres") or database_url.startswith("postgresql")):
            self.db_type = "postgres"
            # Render –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î postgres://, –∞–ª–µ asyncpg –ø–æ—Ç—Ä–µ–±—É—î postgresql://
            if database_url.startswith("postgres://"):
                database_url = database_url.replace("postgres://", "postgresql://", 1)
            self.db_url = database_url
            logger.info(f"üêò PostgreSQL –≤–∏—è–≤–ª–µ–Ω–æ: {database_url[:30]}...")
        else:
            self.db_type = "sqlite"
            self.db_path = os.getenv("DB_PATH", "data/taxi.sqlite3")
            logger.info(f"üìÅ SQLite –≤–∏—è–≤–ª–µ–Ω–æ: {self.db_path}")
    
    @asynccontextmanager
    async def get_connection(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ connection –¥–æ –ë–î"""
        if self.db_type == "postgres":
            import asyncpg
            conn = await asyncpg.connect(self.db_url)
            try:
                yield conn
            finally:
                await conn.close()
        else:
            import aiosqlite
            conn = await aiosqlite.connect(self.db_path)
            try:
                yield conn
            finally:
                await conn.close()
    
    async def execute(self, query: str, *args) -> None:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –±–µ–∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
        async with self.get_connection() as conn:
            if self.db_type == "postgres":
                # PostgreSQL –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î $1, $2 –∑–∞–º—ñ—Å—Ç—å ?
                query = self._convert_placeholders(query)
                await conn.execute(query, *args)
            else:
                await conn.execute(query, args)
                await conn.commit()
    
    async def fetchone(self, query: str, *args) -> Optional[tuple]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–¥–∏–Ω —Ä—è–¥–æ–∫"""
        async with self.get_connection() as conn:
            if self.db_type == "postgres":
                query = self._convert_placeholders(query)
                return await conn.fetchrow(query, *args)
            else:
                async with conn.execute(query, args) as cur:
                    return await cur.fetchone()
    
    async def fetchall(self, query: str, *args) -> List[tuple]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏"""
        async with self.get_connection() as conn:
            if self.db_type == "postgres":
                query = self._convert_placeholders(query)
                rows = await conn.fetch(query, *args)
                return [tuple(row.values()) for row in rows]
            else:
                async with conn.execute(query, args) as cur:
                    return await cur.fetchall()
    
    def _convert_placeholders(self, query: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ ? –Ω–∞ $1, $2, ... –¥–ª—è PostgreSQL"""
        if self.db_type != "postgres":
            return query
        
        # –ü—Ä–æ—Å—Ç–∞ –∑–∞–º—ñ–Ω–∞ ? –Ω–∞ $1, $2, $3...
        parts = query.split('?')
        if len(parts) == 1:
            return query
        
        result = parts[0]
        for i, part in enumerate(parts[1:], 1):
            result += f"${i}" + part
        
        return result
    
    def _convert_datetime_sql(self, query: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ SQL –¥–ª—è –¥–∞—Ç"""
        if self.db_type == "postgres":
            # PostgreSQL –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î NOW() –∑–∞–º—ñ—Å—Ç—å datetime('now')
            query = query.replace("datetime('now')", "NOW()")
            query = query.replace("AUTOINCREMENT", "")
            query = query.replace("INTEGER PRIMARY KEY", "SERIAL PRIMARY KEY")
            query = query.replace("REAL", "DOUBLE PRECISION")
        
        return query


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
db_wrapper = DatabaseWrapper()
