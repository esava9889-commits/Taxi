"""Database adapter - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –º—ñ–∂ SQLite —Ç–∞ PostgreSQL"""
import os
import logging
from typing import Optional

logger = logging.getLogger(__name__)


def get_database_config() -> dict:
    """
    –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ë–î —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.
    
    Returns:
        dict: {
            'type': 'sqlite' | 'postgres',
            'url': str,  # –¥–ª—è postgres
            'path': str  # –¥–ª—è sqlite
        }
    """
    database_url = os.getenv("DATABASE_URL")
    
    if database_url and database_url.startswith("postgres"):
        # PostgreSQL –Ω–∞ Render
        logger.info("üêò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é PostgreSQL")
        
        # Render –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î postgres://, –∞–ª–µ asyncpg –ø–æ—Ç—Ä–µ–±—É—î postgresql://
        if database_url.startswith("postgres://"):
            database_url = database_url.replace("postgres://", "postgresql://", 1)
        
        return {
            'type': 'postgres',
            'url': database_url,
            'path': None
        }
    else:
        # SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
        db_path = os.getenv("DB_PATH", "data/taxi.sqlite3")
        logger.info(f"üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é SQLite: {db_path}")
        
        return {
            'type': 'sqlite',
            'url': None,
            'path': db_path
        }


async def get_db_connection():
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î (SQLite –∞–±–æ PostgreSQL).
    
    Usage:
        async with get_db_connection() as conn:
            # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ conn
    """
    config = get_database_config()
    
    if config['type'] == 'postgres':
        import asyncpg
        return await asyncpg.connect(config['url'])
    else:
        import aiosqlite
        return await aiosqlite.connect(config['path'])
