#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
"""
import asyncio
import aiosqlite
import os
from app.storage.db import init_db


async def test_db():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î"""
    test_db_path = "/tmp/test_taxi_bot.db"
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É –ë–î —è–∫—â–æ —î
    if os.path.exists(test_db_path):
        os.remove(test_db_path)
        print(f"üóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—É –ë–î: {test_db_path}")
    
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î...\n")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ë–î
    try:
        await init_db(test_db_path)
        print("‚úÖ init_db() –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ init_db(): {e}")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
    async with aiosqlite.connect(test_db_path) as db:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
        async with db.execute(
            "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name"
        ) as cur:
            tables = await cur.fetchall()
        
        print("üìã –¢–ê–ë–õ–ò–¶–Ü –í –ë–î:")
        print("=" * 60)
        
        for (table_name,) in tables:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
            async with db.execute(f"PRAGMA table_info({table_name})") as cur:
                columns = await cur.fetchall()
            
            print(f"\n‚úÖ {table_name}:")
            for col in columns:
                col_id, col_name, col_type, not_null, default, pk = col
                flags = []
                if pk:
                    flags.append("PRIMARY KEY")
                if not_null:
                    flags.append("NOT NULL")
                if default:
                    flags.append(f"DEFAULT {default}")
                
                flags_str = f" ({', '.join(flags)})" if flags else ""
                print(f"   - {col_name}: {col_type}{flags_str}")
        
        print("\n" + "=" * 60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ DRIVERS –¥–µ—Ç–∞–ª—å–Ω–æ
        print("\nüöó –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –¢–ê–ë–õ–ò–¶–Ü 'drivers':")
        print("=" * 60)
        
        async with db.execute("PRAGMA table_info(drivers)") as cur:
            driver_cols = await cur.fetchall()
            driver_col_names = [col[1] for col in driver_cols]
        
        required_cols = [
            'id', 'tg_user_id', 'full_name', 'phone', 
            'car_make', 'car_model', 'car_plate', 
            'license_photo_file_id', 'city', 'status', 
            'created_at', 'updated_at', 'online', 
            'last_lat', 'last_lon', 'last_seen_at',
            'car_class', 'card_number'  # –ù–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏!
        ]
        
        print(f"\n–û—á—ñ–∫—É–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {len(required_cols)}")
        print(f"–§–∞–∫—Ç–∏—á–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {len(driver_col_names)}")
        
        missing = []
        extra = []
        
        for col in required_cols:
            if col not in driver_col_names:
                missing.append(col)
        
        for col in driver_col_names:
            if col not in required_cols:
                extra.append(col)
        
        if missing:
            print(f"\n‚ùå –í–Ü–î–°–£–¢–ù–Ü –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
        else:
            print("\n‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ!")
        
        if extra:
            print(f"\n‚ö†Ô∏è  –ó–∞–π–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(extra)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ car_class —Ç–∞ card_number
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        if 'car_class' in driver_col_names:
            print("   ‚úÖ car_class - —î")
        else:
            print("   ‚ùå car_class - –í–Ü–î–°–£–¢–ù–Ø!")
        
        if 'card_number' in driver_col_names:
            print("   ‚úÖ card_number - —î")
        else:
            print("   ‚ùå card_number - –í–Ü–î–°–£–¢–ù–Ø!")
        
        print("\n" + "=" * 60)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
        async with db.execute(
            "SELECT name FROM sqlite_master WHERE type='index' ORDER BY name"
        ) as cur:
            indexes = await cur.fetchall()
        
        print(f"\nüìå –Ü–ù–î–ï–ö–°–ò ({len(indexes)}):")
        for (idx_name,) in indexes:
            if not idx_name.startswith('sqlite_'):
                print(f"   ‚úÖ {idx_name}")
        
        print("\n" + "=" * 60)
        print("\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    
    # –û—á–∏—Å—Ç–∏—Ç–∏
    os.remove(test_db_path)
    print(f"\nüóëÔ∏è  –¢–µ—Å—Ç–æ–≤—É –ë–î –≤–∏–¥–∞–ª–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(test_db())
