#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ—ó SQLite –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
import os
import sys
import asyncio
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def recreate_database():
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—É –ë–î —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É"""
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥
    from app.config.config import load_config
    from app.storage.db import init_db
    
    logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config = load_config()
    db_path = config.database_path
    
    logger.info(f"üìÅ –®–ª—è—Ö –¥–æ –ë–î: {db_path}")
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª —è–∫—â–æ —ñ—Å–Ω—É—î
    if os.path.exists(db_path):
        logger.info(f"üóëÔ∏è  –í–∏–¥–∞–ª—è—é —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ë–î: {db_path}")
        try:
            os.remove(db_path)
            logger.info("‚úÖ –°—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
            return False
    else:
        logger.info("‚ÑπÔ∏è  –°—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –ë–î –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ –ø–∞–ø–∫–∞ —ñ—Å–Ω—É—î
    db_dir = os.path.dirname(db_path)
    if db_dir and not os.path.exists(db_dir):
        logger.info(f"üìÅ –°—Ç–≤–æ—Ä—é—é –ø–∞–ø–∫—É: {db_dir}")
        os.makedirs(db_dir, exist_ok=True)
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ë–î
    logger.info("üî® –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—É –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
    try:
        await init_db(db_path)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        if os.path.exists(db_path):
            file_size = os.path.getsize(db_path)
            logger.info(f"‚úÖ –§–∞–π–ª –ë–î —Å—Ç–≤–æ—Ä–µ–Ω–æ: {db_path} ({file_size} bytes)")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ
            import aiosqlite
            async with aiosqlite.connect(db_path) as db:
                async with db.execute(
                    "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name"
                ) as cur:
                    tables = await cur.fetchall()
                    logger.info(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)}")
                    for table in tables:
                        logger.info(f"  ‚úì {table[0]}")
            
            return True
        else:
            logger.error("‚ùå –§–∞–π–ª –ë–î –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ë–î: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


if __name__ == "__main__":
    result = asyncio.run(recreate_database())
    
    if result:
        print("\n" + "="*60)
        print("‚úÖ –ë–ê–ó–ê –î–ê–ù–ò–• –£–°–ü–Ü–®–ù–û –°–¢–í–û–†–ï–ù–ê!")
        print("="*60)
        print("\n–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±–æ—Ç–∞:")
        print("  python app/main.py")
        print()
        sys.exit(0)
    else:
        print("\n" + "="*60)
        print("‚ùå –ü–û–ú–ò–õ–ö–ê –ü–†–ò –°–¢–í–û–†–ï–ù–ù–Ü –ë–ê–ó–ò –î–ê–ù–ò–•")
        print("="*60)
        print("\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        print()
        sys.exit(1)
