# GitHub Actions: Pre-deployment checks
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º

name: Deploy Checks

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  syntax-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Python syntax
      run: |
        python -m py_compile app/**/*.py
        echo "‚úÖ All Python files compiled successfully"
    
    - name: Verify project structure
      run: |
        test -f render.yaml && echo "‚úÖ render.yaml exists" || exit 1
        test -f requirements.txt && echo "‚úÖ requirements.txt exists" || exit 1
        test -f .env.example && echo "‚úÖ .env.example exists" || exit 1
        test -d app && echo "‚úÖ app/ directory exists" || exit 1
        test -f app/main.py && echo "‚úÖ app/main.py exists" || exit 1
    
    - name: Check for sensitive data
      run: |
        if grep -r "BOT_TOKEN=.*[0-9]" --include="*.py" --include="*.md" app/; then
          echo "‚ùå Found hardcoded BOT_TOKEN!"
          exit 1
        fi
        echo "‚úÖ No sensitive data in code"
    
    - name: Verify imports
      run: |
        python -c "from app.main import main; print('‚úÖ Main import successful')"
        python -c "from app.storage.db import init_db; print('‚úÖ DB import successful')"
        python -c "from app.config.config import load_config; print('‚úÖ Config import successful (will fail without .env, that's OK)')" || echo "‚ö†Ô∏è Config needs .env"

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        docker build -t telegram-taxi-bot:test .
        echo "‚úÖ Docker image built successfully"
    
    - name: Verify Docker image
      run: |
        docker images | grep telegram-taxi-bot
        echo "‚úÖ Docker image verified"

  render-config-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Validate render.yaml
      run: |
        python -c "import yaml; yaml.safe_load(open('render.yaml'))" && echo "‚úÖ render.yaml is valid YAML" || exit 1
    
    - name: Check render.yaml structure
      run: |
        grep -q "type: worker" render.yaml && echo "‚úÖ Service type: worker" || exit 1
        grep -q "env: python" render.yaml && echo "‚úÖ Environment: python" || exit 1
        grep -q "buildCommand:" render.yaml && echo "‚úÖ Build command defined" || exit 1
        grep -q "startCommand:" render.yaml && echo "‚úÖ Start command defined" || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [syntax-check, docker-build, render-config-check]
    if: always()
    
    steps:
    - name: Deployment ready
      run: |
        echo "üöÄ All checks passed!"
        echo "‚úÖ Ready for deployment to Render.com"
        echo ""
        echo "Next steps:"
        echo "1. Push to GitHub: git push origin main"
        echo "2. Render will auto-deploy (if connected)"
        echo "3. Check logs on Render Dashboard"
